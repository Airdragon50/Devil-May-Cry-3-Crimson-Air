
// ================================================================================================
// -*- C++ -*-
// File:   debug_draw.hpp
// Author: Guilherme R. Lampert
// Brief:  Debug Draw - an immediate-mode, renderer agnostic, lightweight debug drawing API.
// ================================================================================================

#ifndef DEBUG_DRAW_HPP
#define DEBUG_DRAW_HPP

// ========================================================
// Library Overview:
// ========================================================
//
// ---------
//  LICENSE
// ---------
// This software is in the public domain. Where that dedication is not recognized,
// you are granted a perpetual, irrevocable license to copy, distribute, and modify
// this file as you see fit.
//
// The source code is provided "as is", without warranty of any kind, express or implied.
// No attribution is required, but a mention about the author(s) is appreciated.
//
// -------------
//  QUICK SETUP
// -------------
// In *one* C++ source file, *before* including this file, do this:
//
//   #define DEBUG_DRAW_IMPLEMENTATION
//
// To enable the implementation. Further includes of this
// file *should not* redefine DEBUG_DRAW_IMPLEMENTATION.
// Example:
//
// In my_program.cpp:
//
//   #define DEBUG_DRAW_IMPLEMENTATION
//   #include "debug_draw.hpp"
//
// In my_program.hpp:
//
//   #include "debug_draw.hpp"
//
// ----------------------
//  COMPILATION SWITCHES
// ----------------------
//
// DEBUG_DRAW_CXX11_SUPPORTED
//  Enables the use of some C++11 features. If your compiler supports C++11
//  or better, you should define this switch globally or before every inclusion
//  of this file. If it is not defined, we try to guess it from the value of the
//  '__cplusplus' built-in macro constant.
//
// DEBUG_DRAW_MAX_*
//  Sizes of internal intermediate buffers, which are allocated on initialization
//  by the implementation. If you need to draw more primitives than the sizes of
//  these buffers, you need to redefine the macros and recompile.
//
// DEBUG_DRAW_VERTEX_BUFFER_SIZE
//  Size in dd::DrawVertex elements of the intermediate vertex buffer used
//  to batch primitives before sending them to dd::RenderInterface. A bigger
//  buffer will reduce the number of calls to dd::RenderInterface when drawing
//  large sets of debug primitives.
//
// DEBUG_DRAW_OVERFLOWED(message)
//  An error handler called if any of the DEBUG_DRAW_MAX_* sizes overflow.
//  By default it just prints a message to stderr.
//
// DEBUG_DRAW_USE_STD_MATH
//  If defined to nonzero, uses cmath/math.h. If you redefine it to zero before
//  the library implementation, it will force the use of local replacements
//  for the Standard Library. This might be useful if you want to avoid the
//  dependency. It is defined to zero by default (i.e. we use cmath by default).
//
// DEBUG_DRAW_*_TYPE_DEFINED
//  The compound types used by Debug Draw can also be customized.
//  By default, ddVec3 and ddMat4x4 are plain C-arrays, but you can
//  redefine them to use your own classes or structures (see below).
//  ddStr is by default a std::string, but you can redefine it to
//  a custom string type if necessary. The only requirements are that
//  it provides a 'c_str()' method returning a null terminated
//  const char* string and an assignment operator (=).
//
// DEBUG_DRAW_STR_DEALLOC_FUNC(str)
//  If you define a custom string type for ddStr and it requires some
//  extra cleanup besides the class destructor, you might define this
//  function macro to perform said cleanup. It is called by dd::clear()
//  and dd::shutdown() on every instance of the internal DebugString buffer.
//
// DEBUG_DRAW_NO_DEFAULT_COLORS
//  If defined, doesn't add the set of predefined color constants inside
//  dd::colors:: namespace. Each color is a ddVec3, so you can define this
//  to prevent adding more global data to the binary if you don't need them.
//
// DEBUG_DRAW_PER_THREAD_CONTEXT
//  If defined, a per-thread global context will be created for Debug Draw.
//  This allows having an instance of the library for each thread in
//  your application. You must then call initialize/shutdown/flush/etc
//  for each thread that wishes to use the library. If this is not
//  defined it defaults to a single threaded global context.
//
// DEBUG_DRAW_EXPLICIT_CONTEXT
//  If defined, each Debug Draw function will expect and additional argument
//  (the first one) which is the library context instance. This is an alternative
//  to DEBUG_DRAW_PER_THREAD_CONTEXT to allow having multiple instances of the
//  library in the same application. This flag is mutually exclusive with
//  DEBUG_DRAW_PER_THREAD_CONTEXT.
//
// -------------------
//  MEMORY ALLOCATION
// -------------------
// Debug Draw will only perform a couple of memory allocations during startup to decompress
// the built-in glyph bitmap used for debug text rendering and to allocate the vertex buffers
// and intermediate draw/batch buffers and context data used internally.
//
// Memory allocation and deallocation for Debug Draw will be done via:
//
//   DD_MALLOC(size)
//   DD_MFREE(ptr)
//
// These two macros can be redefined if you'd like to supply you own memory allocator.
// By default, they are defined to use std::malloc and std::free, respectively.
// Note: If you redefine one, you must also provide the other.
//
// --------------------------------
//  INTERFACING WITH YOUR RENDERER
// --------------------------------
// Debug Draw doesn't touch on any renderer-specific aspects or APIs, instead you provide
// the library with all of it's rendering needs via the dd::RenderInterface abstract class.
//
// See the declaration of dd::RenderInterface for details. Not all methods are
// required. In fact, you could also implement a full no-op RenderInterface that
// disables debug drawing by simply inheriting from dd::RenderInterface and not overriding
// any of the methods (or even easier, call dd::initialize(nullptr) to make everything a no-op).
//
// For examples on how to implement your own dd::RenderInterface, see the accompanying samples.
// You can also find them in the source code repository for this project:
// https://github.com/glampert/debug-draw
//
// ------------------
//  CONVENTIONS USED
// ------------------
// Points and lines are always specified in world-space positions. This also
// applies to shapes drawn from lines, like boxes, spheres, cones, etc.
//
// 2D screen-text is in screen-space pixels (from 0,0 in the upper-left
// corner of the screen to screen_width-1 and screen_height-1).
// RenderInterface::drawGlyphList() also receives vertexes in screen-space.
//
// We make some usage of matrices for things like the projected text labels.
// Matrix layout used is column-major and vectors multiply as columns.
// This is the convention normally used by standard OpenGL.
//
// C++ Exceptions are not used. Little error checking is provided or
// done inside the library. We favor simpler, faster and easier to maintain
// code over more sophisticated error handling. The rationale is that a
// debug drawing API doesn't have to be very robust, since it won't make
// into the final release executable in most cases.
//

// ========================================================
// Configurable compilation switches:
// ========================================================

//
// If the user didn't specify if C++11 or above are supported, try to guess
// from the value of '__cplusplus'. It should be 199711L for pre-C++11 compilers
// and 201103L in those supporting C++11, but this is not a guarantee that all
// C++11 features will be available and stable, so again, we are making a guess.
// It is recommended to instead supply the DEBUG_DRAW_CXX11_SUPPORTED switch
// yourself before including this file.
//
#ifndef DEBUG_DRAW_CXX11_SUPPORTED
    #if (__cplusplus > 199711L)
        #define DEBUG_DRAW_CXX11_SUPPORTED 1
    #endif // __cplusplus
#endif // DEBUG_DRAW_CXX11_SUPPORTED

//
// Max elements of each type at any given time.
// We supply these reasonable defaults, but you can provide your
// own tunned values to save memory or fit all of your debug data.
// These are hard constraints. If not enough, change and recompile.
//
#ifndef DEBUG_DRAW_MAX_STRINGS
    #define DEBUG_DRAW_MAX_STRINGS 512
#endif // DEBUG_DRAW_MAX_STRINGS

#ifndef DEBUG_DRAW_MAX_POINTS
    #define DEBUG_DRAW_MAX_POINTS 8192
#endif // DEBUG_DRAW_MAX_POINTS

#ifndef DEBUG_DRAW_MAX_LINES
    #define DEBUG_DRAW_MAX_LINES 32768
#endif // DEBUG_DRAW_MAX_LINES

//
// Size in vertexes of a local buffer we use to sort elements
// drawn with and without depth testing before submitting them to
// the dd::RenderInterface. A larger buffer will require less flushes
// (e.g. dd::RenderInterface calls) when drawing large amounts of
// primitives. Less will obviously save more memory. Each DrawVertex
// is about 32 bytes in size, we keep a context-specific array
// with this many entries.
//
#ifndef DEBUG_DRAW_VERTEX_BUFFER_SIZE
    #define DEBUG_DRAW_VERTEX_BUFFER_SIZE 4096
#endif // DEBUG_DRAW_VERTEX_BUFFER_SIZE

//
// This macro is called with an error message if any of the above
// sizes is overflowed during runtime. In a debug build, you might
// keep this enabled to be able to log and find out if more space
// is needed for the debug data arrays. Default output is stderr.
//
#ifndef DEBUG_DRAW_OVERFLOWED
    #include <cstdio>
    #define DEBUG_DRAW_OVERFLOWED(message) std::fprintf(stderr, "%s\n", message)
#endif // DEBUG_DRAW_OVERFLOWED

//
// Use <math.h> and <float.h> for trigonometry functions by default.
// If you wish to avoid those dependencies, DD provides local approximations
// of the required functions as a portable replacement. Just define
// DEBUG_DRAW_USE_STD_MATH to zero before including this file.
//
#ifndef DEBUG_DRAW_USE_STD_MATH
    #define DEBUG_DRAW_USE_STD_MATH 1
#endif // DEBUG_DRAW_USE_STD_MATH

// ========================================================
// Overridable Debug Draw types:
// ========================================================

#include <cstddef>
#include <cstdint>

//
// Following typedefs are not members of the dd:: namespace to allow easy redefinition by the user.
// If you provide a custom implementation for them before including this file, be sure to
// also define the proper DEBUG_DRAW_*_TYPE_DEFINED switch to disable the default typedefs.
//
// The only requirement placed on the vector/matrix types is that they provide
// an array subscript operator [] and have the expected number of elements. Apart
// from that, they could be structs, classes, what-have-you. POD types are recommended
// but not mandatory.
//

#ifndef DEBUG_DRAW_VEC3_TYPE_DEFINED
    // ddVec3:
    //  A small array of floats with at least three elements, but
    //  it could have more for alignment purposes, extra slots are ignored.
    //  A custom ddVec3 type must provide the array subscript operator.
    typedef float ddVec3[3];

    // ddVec3_In/ddVec3_Out:
    //  Since our default ddVec3 is a plain C-array, it decays to a pointer
    //  when passed as an input parameter to a function, so we can use it directly.
    //  If you change it to some structured type, it might be more efficient
    //  passing by const reference instead, however, some platforms have optimized
    //  hardware registers for vec3s/vec4s, so passing by value might also be efficient.
    typedef const ddVec3 ddVec3_In;
    typedef       ddVec3 ddVec3_Out;

    #define DEBUG_DRAW_VEC3_TYPE_DEFINED 1
#endif // DEBUG_DRAW_VEC3_TYPE_DEFINED

#ifndef DEBUG_DRAW_MAT4X4_TYPE_DEFINED
    // ddMat4x4:
    //  Homogeneous matrix of 16 floats, representing rotations as well as
    //  translation/scaling and projections. The internal matrix layout used by this
    //  library is COLUMN-MAJOR, vectors multiplying as columns (usual OpenGL convention).
    //  Column-major matrix layout:
    //          c.0   c.1   c.2    c.3
    //    r.0 | 0.x   4.x   8.x    12.x |
    //    r.1 | 1.y   5.y   9.y    13.y |
    //    r.2 | 2.z   6.z   10.z   14.z |
    //    r.3 | 3.w   7.w   11.w   15.w |
    //  If your custom matrix type uses row-major format internally, you'll
    //  have to transpose them before passing your matrices to the DD functions.
    //  We use the array subscript operator internally, so it must also be provided.
    typedef float ddMat4x4[4 * 4];

    // ddMat4x4_In/ddMat4x4_Out:
    //  Since our default ddMat4x4 is a plain C-array, it decays to a pointer
    //  when passed as an input parameter to a function, so we can use it directly.
    //  If you change it to some structured type, it might be more efficient
    //  passing by const reference instead.
    typedef const ddMat4x4 ddMat4x4_In;
    typedef       ddMat4x4 ddMat4x4_Out;

    #define DEBUG_DRAW_MAT4X4_TYPE_DEFINED 1
#endif // DEBUG_DRAW_MAT4X4_TYPE_DEFINED

#ifndef DEBUG_DRAW_STRING_TYPE_DEFINED
    // ddStr:
    //  String type used internally to store the debug text strings.
    //  A custom string type must provide at least an assignment
    //  operator (=) and a 'c_str()' method that returns a
    //  null-terminated const char* string pointer. That's it.
    //  An array subscript operator [] is not required for ddStr.
    #include <string>
    typedef std::string   ddStr;
    typedef const ddStr & ddStr_In;
    typedef       ddStr & ddStr_Out;

    #define DEBUG_DRAW_STRING_TYPE_DEFINED 1
#endif // DEBUG_DRAW_STRING_TYPE_DEFINED

namespace dd
{

// ========================================================
// Optional built-in colors in RGB float format:
// ========================================================

#ifndef DEBUG_DRAW_NO_DEFAULT_COLORS
namespace colors
{
extern const ddVec3 AliceBlue;
extern const ddVec3 AntiqueWhite;
extern const ddVec3 Aquamarine;
extern const ddVec3 Azure;
extern const ddVec3 Beige;
extern const ddVec3 Bisque;
extern const ddVec3 Black;
extern const ddVec3 BlanchedAlmond;
extern const ddVec3 Blue;
extern const ddVec3 BlueViolet;
extern const ddVec3 Brown;
extern const ddVec3 BurlyWood;
extern const ddVec3 CadetBlue;
extern const ddVec3 Chartreuse;
extern const ddVec3 Chocolate;
extern const ddVec3 Coral;
extern const ddVec3 CornflowerBlue;
extern const ddVec3 Cornsilk;
extern const ddVec3 Crimson;
extern const ddVec3 Cyan;
extern const ddVec3 DarkBlue;
extern const ddVec3 DarkCyan;
extern const ddVec3 DarkGoldenRod;
extern const ddVec3 DarkGray;
extern const ddVec3 DarkGreen;
extern const ddVec3 DarkKhaki;
extern const ddVec3 DarkMagenta;
extern const ddVec3 DarkOliveGreen;
extern const ddVec3 DarkOrange;
extern const ddVec3 DarkOrchid;
extern const ddVec3 DarkRed;
extern const ddVec3 DarkSalmon;
extern const ddVec3 DarkSeaGreen;
extern const ddVec3 DarkSlateBlue;
extern const ddVec3 DarkSlateGray;
extern const ddVec3 DarkTurquoise;
extern const ddVec3 DarkViolet;
extern const ddVec3 DeepPink;
extern const ddVec3 DeepSkyBlue;
extern const ddVec3 DimGray;
extern const ddVec3 DodgerBlue;
extern const ddVec3 FireBrick;
extern const ddVec3 FloralWhite;
extern const ddVec3 ForestGreen;
extern const ddVec3 Gainsboro;
extern const ddVec3 GhostWhite;
extern const ddVec3 Gold;
extern const ddVec3 GoldenRod;
extern const ddVec3 Gray;
extern const ddVec3 Green;
extern const ddVec3 GreenYellow;
extern const ddVec3 HoneyDew;
extern const ddVec3 HotPink;
extern const ddVec3 IndianRed;
extern const ddVec3 Indigo;
extern const ddVec3 Ivory;
extern const ddVec3 Khaki;
extern const ddVec3 Lavender;
extern const ddVec3 LavenderBlush;
extern const ddVec3 LawnGreen;
extern const ddVec3 LemonChiffon;
extern const ddVec3 LightBlue;
extern const ddVec3 LightCoral;
extern const ddVec3 LightCyan;
extern const ddVec3 LightGoldenYellow;
extern const ddVec3 LightGray;
extern const ddVec3 LightGreen;
extern const ddVec3 LightPink;
extern const ddVec3 LightSalmon;
extern const ddVec3 LightSeaGreen;
extern const ddVec3 LightSkyBlue;
extern const ddVec3 LightSlateGray;
extern const ddVec3 LightSteelBlue;
extern const ddVec3 LightYellow;
extern const ddVec3 Lime;
extern const ddVec3 LimeGreen;
extern const ddVec3 Linen;
extern const ddVec3 Magenta;
extern const ddVec3 Maroon;
extern const ddVec3 MediumAquaMarine;
extern const ddVec3 MediumBlue;
extern const ddVec3 MediumOrchid;
extern const ddVec3 MediumPurple;
extern const ddVec3 MediumSeaGreen;
extern const ddVec3 MediumSlateBlue;
extern const ddVec3 MediumSpringGreen;
extern const ddVec3 MediumTurquoise;
extern const ddVec3 MediumVioletRed;
extern const ddVec3 MidnightBlue;
extern const ddVec3 MintCream;
extern const ddVec3 MistyRose;
extern const ddVec3 Moccasin;
extern const ddVec3 NavajoWhite;
extern const ddVec3 Navy;
extern const ddVec3 OldLace;
extern const ddVec3 Olive;
extern const ddVec3 OliveDrab;
extern const ddVec3 Orange;
extern const ddVec3 OrangeRed;
extern const ddVec3 Orchid;
extern const ddVec3 PaleGoldenRod;
extern const ddVec3 PaleGreen;
extern const ddVec3 PaleTurquoise;
extern const ddVec3 PaleVioletRed;
extern const ddVec3 PapayaWhip;
extern const ddVec3 PeachPuff;
extern const ddVec3 Peru;
extern const ddVec3 Pink;
extern const ddVec3 Plum;
extern const ddVec3 PowderBlue;
extern const ddVec3 Purple;
extern const ddVec3 RebeccaPurple;
extern const ddVec3 Red;
extern const ddVec3 RosyBrown;
extern const ddVec3 RoyalBlue;
extern const ddVec3 SaddleBrown;
extern const ddVec3 Salmon;
extern const ddVec3 SandyBrown;
extern const ddVec3 SeaGreen;
extern const ddVec3 SeaShell;
extern const ddVec3 Sienna;
extern const ddVec3 Silver;
extern const ddVec3 SkyBlue;
extern const ddVec3 SlateBlue;
extern const ddVec3 SlateGray;
extern const ddVec3 Snow;
extern const ddVec3 SpringGreen;
extern const ddVec3 SteelBlue;
extern const ddVec3 Tan;
extern const ddVec3 Teal;
extern const ddVec3 Thistle;
extern const ddVec3 Tomato;
extern const ddVec3 Turquoise;
extern const ddVec3 Violet;
extern const ddVec3 Wheat;
extern const ddVec3 White;
extern const ddVec3 WhiteSmoke;
extern const ddVec3 Yellow;
extern const ddVec3 YellowGreen;
} // namespace colors
#endif // DEBUG_DRAW_NO_DEFAULT_COLORS

// ========================================================
// Optional explicit context mode:
// ========================================================

#ifdef DEBUG_DRAW_EXPLICIT_CONTEXT
    struct OpaqueContextType { };
    typedef OpaqueContextType * ContextHandle;
    #define DD_EXPLICIT_CONTEXT_ONLY(...) __VA_ARGS__
#else // !DEBUG_DRAW_EXPLICIT_CONTEXT
    #define DD_EXPLICIT_CONTEXT_ONLY(...) /* nothing */
#endif // DEBUG_DRAW_EXPLICIT_CONTEXT

// ========================================================
// Debug Draw functions:
// - Durations are always in milliseconds.
// - Colors are RGB floats in the [0,1] range.
// - Positions are in world-space, unless stated otherwise.
// ========================================================

// Add a point in 3D space to the debug draw queue.
// Point is expressed in world-space coordinates.
// Note that not all renderer support configurable point
// size, so take the 'size' parameter as a hint only
void point(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
           ddVec3_In pos,
           ddVec3_In color,
           float size = 1.0f,
           int durationMillis = 0,
           bool depthEnabled = true);

// Add a 3D line to the debug draw queue. Note that
// lines are expressed in world coordinates, and so are
// all wireframe primitives which are built from lines.
void line(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
          ddVec3_In from,
          ddVec3_In to,
          ddVec3_In color,
          int durationMillis = 0,
          bool depthEnabled = true);

// Add a 2D text string as an overlay to the current view, using a built-in font.
// Position is in screen-space pixels, origin at the top-left corner of the screen.
// The third element (Z) of the position vector is ignored.
// Note: Newlines and tabs are handled (1 tab = 4 spaces).
void screenText(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
                const char * str,
                ddVec3_In pos,
                ddVec3_In color,
                float scaling = 1.0f,
                int durationMillis = 0);


// Project World space to Screen space
void worldToScreen(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
    ddVec3_In pos,
    ddMat4x4_In vpMatrix,
    ddVec3_Out outScreenPos,
    int sx, int sy,
    int sw, int sh,
    float scaling = 1.0f,
    int durationMillis = 0);


// Add a 3D text label centered at the given world position that
// gets projected to screen-space. The label always faces the viewer.
// sx/sy, sw/sh are the viewport coordinates/size, in pixels.
// 'vpMatrix' is the view * projection transform to map the text from 3D to 2D.
void projectedText(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
                   const char * str,
                   ddVec3_In pos,
                   ddVec3_In color,
                   ddMat4x4_In vpMatrix,
                   int sx, int sy,
                   int sw, int sh,
                   float scaling = 1.0f,
                   int durationMillis = 0);

// Add a set of three coordinate axis depicting the position and orientation of the given transform.
// 'size' defines the size of the arrow heads. 'length' defines the length of the arrow's base line.
void axisTriad(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
               ddMat4x4_In transform,
               float size,
               float length,
               int durationMillis = 0,
               bool depthEnabled = true);

// Add a 3D line with an arrow-like end to the debug draw queue.
// 'size' defines the arrow head size. 'from' and 'to' the length of the arrow's base line.
void arrow(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
           ddVec3_In from,
           ddVec3_In to,
           ddVec3_In color,
           float size,
           int durationMillis = 0,
           bool depthEnabled = true);

// Add an axis-aligned cross (3 lines converging at a point) to the debug draw queue.
// 'length' defines the length of the crossing lines.
// 'center' is the world-space point where the lines meet.
void cross(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
           ddVec3_In center,
           float length,
           int durationMillis = 0,
           bool depthEnabled = true);

// Add a wireframe circle to the debug draw queue.
void circle(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
            ddVec3_In center,
            ddVec3_In planeNormal,
            ddVec3_In color,
            float radius,
            float numSteps,
            int durationMillis = 0,
            bool depthEnabled = true);

// Add a wireframe plane in 3D space to the debug draw queue.
// If 'normalVecScale' is not zero, a line depicting the plane normal is also draw.
void plane(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
           ddVec3_In center,
           ddVec3_In planeNormal,
           ddVec3_In planeColor,
           ddVec3_In normalVecColor,
           float planeScale,
           float normalVecScale,
           int durationMillis = 0,
           bool depthEnabled = true);

// Add a wireframe sphere to the debug draw queue.
void sphere(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
            ddVec3_In center,
            ddVec3_In color,
            float radius,
            int durationMillis = 0,
            bool depthEnabled = true);

// Add a wireframe cone to the debug draw queue.
// The cone 'apex' is the point where all lines meet.
// The length of the 'dir' vector determines the thickness.
// 'baseRadius' & 'apexRadius' are in degrees.
void cone(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
          ddVec3_In apex,
          ddVec3_In dir,
          ddVec3_In color,
          float baseRadius,
          float apexRadius,
          int durationMillis = 0,
          bool depthEnabled = true);

// Wireframe box from the eight points that define it.
void box(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
         const ddVec3 points[8],
         ddVec3_In color,
         int durationMillis = 0,
         bool depthEnabled = true);

// Add a wireframe box to the debug draw queue.
void box(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
         ddVec3_In center,
         ddVec3_In color,
         float width,
         float height,
         float depth,
         int durationMillis = 0,
         bool depthEnabled = true);

// Add a wireframe Axis Aligned Bounding Box (AABB) to the debug draw queue.
void aabb(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
          ddVec3_In mins,
          ddVec3_In maxs,
          ddVec3_In color,
          int durationMillis = 0,
          bool depthEnabled = true);

// Add a wireframe frustum pyramid to the debug draw queue.
// 'invClipMatrix' is the inverse of the matrix defining the frustum
// (AKA clip) volume, which normally consists of the projection * view matrix.
// E.g.: inverse(projMatrix * viewMatrix)
void frustum(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
             ddMat4x4_In invClipMatrix,
             ddVec3_In color,
             int durationMillis = 0,
             bool depthEnabled = true);

// Add a vertex normal for debug visualization.
// The normal vector 'normal' is assumed to be already normalized.
void vertexNormal(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
                  ddVec3_In origin,
                  ddVec3_In normal,
                  float length,
                  int durationMillis = 0,
                  bool depthEnabled = true);

// Add a "tangent basis" at a given point in world space.
// Color scheme used is: normal=WHITE, tangent=YELLOW, bi-tangent=MAGENTA.
// The normal vector, tangent and bi-tangent vectors are assumed to be already normalized.
void tangentBasis(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
                  ddVec3_In origin,
                  ddVec3_In normal,
                  ddVec3_In tangent,
                  ddVec3_In bitangent,
                  float lengths,
                  int durationMillis = 0,
                  bool depthEnabled = true);

// Makes a 3D square grid of lines along the X and Z planes.
// 'y' defines the height in the Y axis where the grid is placed.
// The grid will go from 'mins' to 'maxs' units in both the X and Z.
// 'step' defines the gap between each line of the grid.
void xzSquareGrid(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
                  float mins,
                  float maxs,
                  float y,
                  float step,
                  ddVec3_In color,
                  int durationMillis = 0,
                  bool depthEnabled = true);

// ========================================================
// Debug Draw vertex type:
// The only drawing type the user has to interface with.
// ========================================================

union DrawVertex
{
    struct
    {
        float x, y, z;
        float r, g, b;
        float size;
    } point;

    struct
    {
        float x, y, z;
        float r, g, b;
    } line;

    struct
    {
        float x, y;
        float u, v;
        float r, g, b;
    } glyph;
};

//
// Opaque handle to a texture object.
// Used by the debug text drawing functions.
//
struct OpaqueTextureType { };
typedef OpaqueTextureType * GlyphTextureHandle;

// ========================================================
// Debug Draw rendering callbacks:
// Implementation is provided by the user so we don't
// tie this code directly to a specific rendering API.
// ========================================================

class RenderInterface
{
public:

    //
    // These are called by dd::flush() before any drawing and after drawing is finished.
    // User can override these to perform any common setup for subsequent draws and to
    // cleanup afterwards. By default, no-ops stubs are provided.
    //
    virtual void beginDraw();
    virtual void endDraw();

    //
    // Create/free the glyph bitmap texture used by the debug text drawing functions.
    // The debug renderer currently only creates one of those on startup.
    //
    // You're not required to implement these two if you don't care about debug text drawing.
    // Default no-op stubs are provided by default, which disable debug text rendering.
    //
    // Texture dimensions are in pixels, data format is always 8-bits per pixel (Grayscale/GL_RED).
    // The pixel values range from 255 for a pixel within a glyph to 0 for a transparent pixel.
    // If createGlyphTexture() returns null, the renderer will disable all text drawing functions.
    //
    virtual GlyphTextureHandle createGlyphTexture(int width, int height, const void * pixels);
    virtual void destroyGlyphTexture(GlyphTextureHandle glyphTex);

    //
    // Batch drawing methods for the primitives used by the debug renderer.
    // If you don't wish to support a given primitive type, don't override the method.
    //
    virtual void drawPointList(const DrawVertex * points, int count, bool depthEnabled);
    virtual void drawLineList(const DrawVertex * lines, int count, bool depthEnabled);
    virtual void drawGlyphList(const DrawVertex * glyphs, int count, GlyphTextureHandle glyphTex);

    // User defined cleanup. Nothing by default.
    virtual ~RenderInterface() = 0;
};

// ========================================================
// Housekeeping functions:
// ========================================================

// Flags for dd::flush()
enum FlushFlags
{
    FlushPoints = 1 << 1,
    FlushLines  = 1 << 2,
    FlushText   = 1 << 3,
    FlushAll    = (FlushPoints | FlushLines | FlushText)
};

// Initialize with the user-supplied renderer interface.
// Given object must remain valid until after dd::shutdown() is called!
// If 'renderer' is null, the Debug Draw functions become no-ops, but
// can still be safely called.
bool initialize(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle * outCtx,) RenderInterface * renderer);

// After this is called, it is safe to dispose the dd::RenderInterface instance
// you passed to dd::initialize(). Shutdown will also attempt to free the glyph texture.
void shutdown(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx));

// Test if the Debug Draw library is currently initialized and has a render interface.
bool isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx));

// Test if there's data in the debug draw queue and dd::flush() should be called.
bool hasPendingDraws(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx));

// Manually removes all queued debug render data without drawing.
// This is not normally called. To draw stuff, call dd::flush() instead.
void clear(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx));

// Actually calls the dd::RenderInterface to consume the debug draw queues.
// Objects that have expired their lifetimes get removed. Pass the current
// application time in milliseconds to remove timed objects that have expired.
// Passing zero removes all objects after they get drawn, regardless of lifetime.
void flush(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
           std::int64_t currTimeMillis = 0,
           std::uint32_t flags = FlushAll);

} // namespace dd

// ================== End of header file ==================
#endif // DEBUG_DRAW_HPP
// ================== End of header file ==================

// ================================================================================================
//
//                                  Debug Draw Implementation
//
// ================================================================================================

#ifdef DEBUG_DRAW_IMPLEMENTATION

#ifndef DD_MALLOC
    #include <cstdlib>
    #define DD_MALLOC std::malloc
    #define DD_MFREE  std::free
#endif // DD_MALLOC

#if DEBUG_DRAW_USE_STD_MATH
    #include <math.h>
    #include <float.h>
#endif // DEBUG_DRAW_USE_STD_MATH

namespace dd
{

#if defined(FLT_EPSILON) && DEBUG_DRAW_USE_STD_MATH
    static const float FloatEpsilon = FLT_EPSILON;
#else // !FLT_EPSILON || !DEBUG_DRAW_USE_STD_MATH
    static const float FloatEpsilon = 1e-14;
#endif // FLT_EPSILON && DEBUG_DRAW_USE_STD_MATH

#if defined(M_PI) && DEBUG_DRAW_USE_STD_MATH
    static const float PI = static_cast<float>(M_PI);
#else // !M_PI || !DEBUG_DRAW_USE_STD_MATH
    static const float PI = 3.1415926535897931f;
#endif // M_PI && DEBUG_DRAW_USE_STD_MATH

static const float HalfPI = PI * 0.5f;
static const float TAU    = PI * 2.0f;

template<typename T>
static inline float degreesToRadians(const T degrees)
{
    return (static_cast<float>(degrees) * PI / 180.0f);
}

template<typename T, int Size>
static inline int arrayLength(const T (&)[Size])
{
    return Size;
}

// ========================================================
// Built-in color constants:
// ========================================================

#ifndef DEBUG_DRAW_NO_DEFAULT_COLORS
namespace colors
{
const ddVec3 AliceBlue         = {0.941176f, 0.972549f, 1.000000f};
const ddVec3 AntiqueWhite      = {0.980392f, 0.921569f, 0.843137f};
const ddVec3 Aquamarine        = {0.498039f, 1.000000f, 0.831373f};
const ddVec3 Azure             = {0.941176f, 1.000000f, 1.000000f};
const ddVec3 Beige             = {0.960784f, 0.960784f, 0.862745f};
const ddVec3 Bisque            = {1.000000f, 0.894118f, 0.768627f};
const ddVec3 Black             = {0.000000f, 0.000000f, 0.000000f};
const ddVec3 BlanchedAlmond    = {1.000000f, 0.921569f, 0.803922f};
const ddVec3 Blue              = {0.000000f, 0.000000f, 1.000000f};
const ddVec3 BlueViolet        = {0.541176f, 0.168627f, 0.886275f};
const ddVec3 Brown             = {0.647059f, 0.164706f, 0.164706f};
const ddVec3 BurlyWood         = {0.870588f, 0.721569f, 0.529412f};
const ddVec3 CadetBlue         = {0.372549f, 0.619608f, 0.627451f};
const ddVec3 Chartreuse        = {0.498039f, 1.000000f, 0.000000f};
const ddVec3 Chocolate         = {0.823529f, 0.411765f, 0.117647f};
const ddVec3 Coral             = {1.000000f, 0.498039f, 0.313726f};
const ddVec3 CornflowerBlue    = {0.392157f, 0.584314f, 0.929412f};
const ddVec3 Cornsilk          = {1.000000f, 0.972549f, 0.862745f};
const ddVec3 Crimson           = {0.862745f, 0.078431f, 0.235294f};
const ddVec3 Cyan              = {0.000000f, 1.000000f, 1.000000f};
const ddVec3 DarkBlue          = {0.000000f, 0.000000f, 0.545098f};
const ddVec3 DarkCyan          = {0.000000f, 0.545098f, 0.545098f};
const ddVec3 DarkGoldenRod     = {0.721569f, 0.525490f, 0.043137f};
const ddVec3 DarkGray          = {0.662745f, 0.662745f, 0.662745f};
const ddVec3 DarkGreen         = {0.000000f, 0.392157f, 0.000000f};
const ddVec3 DarkKhaki         = {0.741176f, 0.717647f, 0.419608f};
const ddVec3 DarkMagenta       = {0.545098f, 0.000000f, 0.545098f};
const ddVec3 DarkOliveGreen    = {0.333333f, 0.419608f, 0.184314f};
const ddVec3 DarkOrange        = {1.000000f, 0.549020f, 0.000000f};
const ddVec3 DarkOrchid        = {0.600000f, 0.196078f, 0.800000f};
const ddVec3 DarkRed           = {0.545098f, 0.000000f, 0.000000f};
const ddVec3 DarkSalmon        = {0.913725f, 0.588235f, 0.478431f};
const ddVec3 DarkSeaGreen      = {0.560784f, 0.737255f, 0.560784f};
const ddVec3 DarkSlateBlue     = {0.282353f, 0.239216f, 0.545098f};
const ddVec3 DarkSlateGray     = {0.184314f, 0.309804f, 0.309804f};
const ddVec3 DarkTurquoise     = {0.000000f, 0.807843f, 0.819608f};
const ddVec3 DarkViolet        = {0.580392f, 0.000000f, 0.827451f};
const ddVec3 DeepPink          = {1.000000f, 0.078431f, 0.576471f};
const ddVec3 DeepSkyBlue       = {0.000000f, 0.749020f, 1.000000f};
const ddVec3 DimGray           = {0.411765f, 0.411765f, 0.411765f};
const ddVec3 DodgerBlue        = {0.117647f, 0.564706f, 1.000000f};
const ddVec3 FireBrick         = {0.698039f, 0.133333f, 0.133333f};
const ddVec3 FloralWhite       = {1.000000f, 0.980392f, 0.941176f};
const ddVec3 ForestGreen       = {0.133333f, 0.545098f, 0.133333f};
const ddVec3 Gainsboro         = {0.862745f, 0.862745f, 0.862745f};
const ddVec3 GhostWhite        = {0.972549f, 0.972549f, 1.000000f};
const ddVec3 Gold              = {1.000000f, 0.843137f, 0.000000f};
const ddVec3 GoldenRod         = {0.854902f, 0.647059f, 0.125490f};
const ddVec3 Gray              = {0.501961f, 0.501961f, 0.501961f};
const ddVec3 Green             = {0.000000f, 0.501961f, 0.000000f};
const ddVec3 GreenYellow       = {0.678431f, 1.000000f, 0.184314f};
const ddVec3 HoneyDew          = {0.941176f, 1.000000f, 0.941176f};
const ddVec3 HotPink           = {1.000000f, 0.411765f, 0.705882f};
const ddVec3 IndianRed         = {0.803922f, 0.360784f, 0.360784f};
const ddVec3 Indigo            = {0.294118f, 0.000000f, 0.509804f};
const ddVec3 Ivory             = {1.000000f, 1.000000f, 0.941176f};
const ddVec3 Khaki             = {0.941176f, 0.901961f, 0.549020f};
const ddVec3 Lavender          = {0.901961f, 0.901961f, 0.980392f};
const ddVec3 LavenderBlush     = {1.000000f, 0.941176f, 0.960784f};
const ddVec3 LawnGreen         = {0.486275f, 0.988235f, 0.000000f};
const ddVec3 LemonChiffon      = {1.000000f, 0.980392f, 0.803922f};
const ddVec3 LightBlue         = {0.678431f, 0.847059f, 0.901961f};
const ddVec3 LightCoral        = {0.941176f, 0.501961f, 0.501961f};
const ddVec3 LightCyan         = {0.878431f, 1.000000f, 1.000000f};
const ddVec3 LightGoldenYellow = {0.980392f, 0.980392f, 0.823529f};
const ddVec3 LightGray         = {0.827451f, 0.827451f, 0.827451f};
const ddVec3 LightGreen        = {0.564706f, 0.933333f, 0.564706f};
const ddVec3 LightPink         = {1.000000f, 0.713726f, 0.756863f};
const ddVec3 LightSalmon       = {1.000000f, 0.627451f, 0.478431f};
const ddVec3 LightSeaGreen     = {0.125490f, 0.698039f, 0.666667f};
const ddVec3 LightSkyBlue      = {0.529412f, 0.807843f, 0.980392f};
const ddVec3 LightSlateGray    = {0.466667f, 0.533333f, 0.600000f};
const ddVec3 LightSteelBlue    = {0.690196f, 0.768627f, 0.870588f};
const ddVec3 LightYellow       = {1.000000f, 1.000000f, 0.878431f};
const ddVec3 Lime              = {0.000000f, 1.000000f, 0.000000f};
const ddVec3 LimeGreen         = {0.196078f, 0.803922f, 0.196078f};
const ddVec3 Linen             = {0.980392f, 0.941176f, 0.901961f};
const ddVec3 Magenta           = {1.000000f, 0.000000f, 1.000000f};
const ddVec3 Maroon            = {0.501961f, 0.000000f, 0.000000f};
const ddVec3 MediumAquaMarine  = {0.400000f, 0.803922f, 0.666667f};
const ddVec3 MediumBlue        = {0.000000f, 0.000000f, 0.803922f};
const ddVec3 MediumOrchid      = {0.729412f, 0.333333f, 0.827451f};
const ddVec3 MediumPurple      = {0.576471f, 0.439216f, 0.858824f};
const ddVec3 MediumSeaGreen    = {0.235294f, 0.701961f, 0.443137f};
const ddVec3 MediumSlateBlue   = {0.482353f, 0.407843f, 0.933333f};
const ddVec3 MediumSpringGreen = {0.000000f, 0.980392f, 0.603922f};
const ddVec3 MediumTurquoise   = {0.282353f, 0.819608f, 0.800000f};
const ddVec3 MediumVioletRed   = {0.780392f, 0.082353f, 0.521569f};
const ddVec3 MidnightBlue      = {0.098039f, 0.098039f, 0.439216f};
const ddVec3 MintCream         = {0.960784f, 1.000000f, 0.980392f};
const ddVec3 MistyRose         = {1.000000f, 0.894118f, 0.882353f};
const ddVec3 Moccasin          = {1.000000f, 0.894118f, 0.709804f};
const ddVec3 NavajoWhite       = {1.000000f, 0.870588f, 0.678431f};
const ddVec3 Navy              = {0.000000f, 0.000000f, 0.501961f};
const ddVec3 OldLace           = {0.992157f, 0.960784f, 0.901961f};
const ddVec3 Olive             = {0.501961f, 0.501961f, 0.000000f};
const ddVec3 OliveDrab         = {0.419608f, 0.556863f, 0.137255f};
const ddVec3 Orange            = {1.000000f, 0.647059f, 0.000000f};
const ddVec3 OrangeRed         = {1.000000f, 0.270588f, 0.000000f};
const ddVec3 Orchid            = {0.854902f, 0.439216f, 0.839216f};
const ddVec3 PaleGoldenRod     = {0.933333f, 0.909804f, 0.666667f};
const ddVec3 PaleGreen         = {0.596078f, 0.984314f, 0.596078f};
const ddVec3 PaleTurquoise     = {0.686275f, 0.933333f, 0.933333f};
const ddVec3 PaleVioletRed     = {0.858824f, 0.439216f, 0.576471f};
const ddVec3 PapayaWhip        = {1.000000f, 0.937255f, 0.835294f};
const ddVec3 PeachPuff         = {1.000000f, 0.854902f, 0.725490f};
const ddVec3 Peru              = {0.803922f, 0.521569f, 0.247059f};
const ddVec3 Pink              = {1.000000f, 0.752941f, 0.796078f};
const ddVec3 Plum              = {0.866667f, 0.627451f, 0.866667f};
const ddVec3 PowderBlue        = {0.690196f, 0.878431f, 0.901961f};
const ddVec3 Purple            = {0.501961f, 0.000000f, 0.501961f};
const ddVec3 RebeccaPurple     = {0.400000f, 0.200000f, 0.600000f};
const ddVec3 Red               = {1.000000f, 0.000000f, 0.000000f};
const ddVec3 RosyBrown         = {0.737255f, 0.560784f, 0.560784f};
const ddVec3 RoyalBlue         = {0.254902f, 0.411765f, 0.882353f};
const ddVec3 SaddleBrown       = {0.545098f, 0.270588f, 0.074510f};
const ddVec3 Salmon            = {0.980392f, 0.501961f, 0.447059f};
const ddVec3 SandyBrown        = {0.956863f, 0.643137f, 0.376471f};
const ddVec3 SeaGreen          = {0.180392f, 0.545098f, 0.341176f};
const ddVec3 SeaShell          = {1.000000f, 0.960784f, 0.933333f};
const ddVec3 Sienna            = {0.627451f, 0.321569f, 0.176471f};
const ddVec3 Silver            = {0.752941f, 0.752941f, 0.752941f};
const ddVec3 SkyBlue           = {0.529412f, 0.807843f, 0.921569f};
const ddVec3 SlateBlue         = {0.415686f, 0.352941f, 0.803922f};
const ddVec3 SlateGray         = {0.439216f, 0.501961f, 0.564706f};
const ddVec3 Snow              = {1.000000f, 0.980392f, 0.980392f};
const ddVec3 SpringGreen       = {0.000000f, 1.000000f, 0.498039f};
const ddVec3 SteelBlue         = {0.274510f, 0.509804f, 0.705882f};
const ddVec3 Tan               = {0.823529f, 0.705882f, 0.549020f};
const ddVec3 Teal              = {0.000000f, 0.501961f, 0.501961f};
const ddVec3 Thistle           = {0.847059f, 0.749020f, 0.847059f};
const ddVec3 Tomato            = {1.000000f, 0.388235f, 0.278431f};
const ddVec3 Turquoise         = {0.250980f, 0.878431f, 0.815686f};
const ddVec3 Violet            = {0.933333f, 0.509804f, 0.933333f};
const ddVec3 Wheat             = {0.960784f, 0.870588f, 0.701961f};
const ddVec3 White             = {1.000000f, 1.000000f, 1.000000f};
const ddVec3 WhiteSmoke        = {0.960784f, 0.960784f, 0.960784f};
const ddVec3 Yellow            = {1.000000f, 1.000000f, 0.000000f};
const ddVec3 YellowGreen       = {0.603922f, 0.803922f, 0.196078f};
} // namespace colors
#endif // DEBUG_DRAW_NO_DEFAULT_COLORS

// ========================================================
// Embedded bitmap font for debug text rendering:
// ========================================================

struct FontChar
{
    std::uint16_t x;
    std::uint16_t y;
};

struct FontCharSet
{
    enum { MaxChars = 256 };
    const std::uint8_t * bitmap;
    int bitmapWidth;
    int bitmapHeight;
    int bitmapColorChannels;
    int bitmapDecompressSize;
    int charBaseHeight;
    int charWidth;
    int charHeight;
    int charCount;
    FontChar chars[MaxChars];
};


#if DEBUG_DRAW_CXX11_SUPPORTED
    #define DD_ALIGNED_BUFFER(name) alignas(16) static const std::uint8_t name[]
#else // !C++11
    #if defined(__GNUC__) // Clang & GCC
        #define DD_ALIGNED_BUFFER(name) static const std::uint8_t name[] __attribute__((aligned(16)))
    #elif defined(_MSC_VER) // Visual Studio
        #define DD_ALIGNED_BUFFER(name) __declspec(align(16)) static const std::uint8_t name[]
    #else // Unknown compiler
        #define DD_ALIGNED_BUFFER(name) static const std::uint8_t name[] /* hope for the best! */
    #endif // Compiler id
#endif // DEBUG_DRAW_CXX11_SUPPORTED

//
// Data generated from font 'Monoid18' by font-tool.
// Command line: monoid-18.fnt monoid-18.png monoid-18.h Monoid18 --static --compress --structs --hex --encoding=lzw
//
// The Monoid font, copyright (c) 2015 Andreas Larsen and contributors,
// is released under the MIT license. See: https://github.com/larsenwork/monoid
//
// The following glyph bitmap is an LZW compressed graymap.
// ~7.55 KB of data.
//
// It is better to ensure it is aligned to a, say 16 bytes boundary,
// because we cast the first few bytes to uint32s.
//
// font-tool: https://github.com/glampert/font-tool
// LZW compression: https://github.com/glampert/compression-algorithms
//
DD_ALIGNED_BUFFER(s_fontMonoid18Bitmap) =
"\x2F\x1E\x00\x00\x78\xF1\x00\x00\x00\x00\x06\x14\x38\x90\x60\x41\x83\x07\x11\x26\x54\xB8"
"\x90\x61\x43\x87\x0F\x21\x46\x94\x38\x91\x62\x45\x8B\x17\x31\x66\xD4\x88\x70\x43\x13\x8C"
"\x15\x80\x0D\xD8\x98\x10\x0D\x98\x84\x4D\x36\x8C\x8C\x28\x40\xC1\x01\x95\x2F\x1F\x06\x10"
"\x10\x00\x26\xC0\x44\xFE\x5C\x5A\xA4\xF4\x8F\x4E\xCD\x81\x01\xF8\xFD\x4B\x70\x30\x40\x3F"
"\x3F\x3E\x17\x32\xFA\xB7\xB4\x5F\xCA\x8C\x67\xFC\xD1\x04\xB0\x2F\x0D\x52\x82\x74\x96\xF2"
"\x54\xD9\xC4\x5D\xD6\xA5\xBF\x10\x36\x5B\xBA\xE3\x60\x81\x7E\xFD\xA4\x2E\x3C\xC0\xE8\xDB"
"\xD2\x77\xC1\x2A\x34\xF4\xF2\xEF\x52\x42\x7E\x3D\xAD\x1E\x74\xB5\x34\x13\xB4\xA5\x11\x9E"
"\x46\x05\x78\x37\x6F\xC0\x25\x4B\xDB\xFE\xAB\xB2\x51\x0E\xE2\x7E\xFF\xDE\xF9\x73\xA6\xF7"
"\x9F\xBF\xA5\x14\x0E\xEE\xFC\xC2\xD0\x44\x56\x7F\xEF\xB2\xB2\x60\xA8\xCF\xDF\x50\x84\x84"
"\x0B\x13\x8C\xF0\xAF\x5F\xCE\x2F\xFF\xC0\x62\x84\x4A\x13\x28\xDE\xC2\xD8\xFC\xC5\xA5\xE0"
"\xAF\x5B\x40\x1A\x16\x0F\xF8\xF3\x67\x02\x40\x17\x7F\x09\x4B\xB0\x06\x30\xE4\x5F\x6F\x83"
"\xC1\xFB\x31\xDC\xF7\x4F\x4D\x5A\x2B\xFF\xD8\x2D\x9C\xF2\x8F\x94\x42\xD4\xA9\x05\x7E\xF8"
"\x57\x35\xE0\x3E\x6E\x19\x8D\x07\xE4\x47\xBE\xF0\xB2\xE3\x83\x9D\x2B\x1A\x5F\x91\xF9\x66"
"\x00\xB3\x11\x66\xFB\x07\x02\xA0\xB2\x7F\xA2\x0D\x12\xE5\x1F\x26\x14\x3A\xAC\xBB\x81\x70"
"\x4B\xEB\xA0\x7C\xFE\x01\xCC\x2E\xDB\x16\x6A\x86\xC0\x8C\xC4\x3B\x10\x80\x01\xFA\x71\xCE"
"\xA2\x59\xDA\x9A\xC5\xC3\x7F\xBE\x01\x46\x23\x09\x11\x4A\xE4\x1F\x6F\x9A\xE8\x86\x2E\x00"
"\xE4\x6B\xAD\xA2\xC6\x34\x00\x08\x3F\x83\x34\xF8\x67\x32\x80\x6A\xBC\xB1\x20\x08\xFE\xE1"
"\x47\x21\x34\xFE\xF9\x00\xA0\x06\xAC\x00\xC3\x0A\x67\x04\x43\x88\xB9\xD8\x1E\x74\xE8\x3B"
"\x8C\xA6\xC3\x0C\x00\x66\xB4\xB2\x28\x00\xCB\xBC\x5A\x2A\xC9\x81\x5A\x3A\xC0\xCB\x03\x14"
"\x10\xC0\x3B\x08\x0B\xDA\x26\xAB\x76\x00\x30\xB1\x1F\x91\x2A\x92\x61\xC5\xFB\xB6\x24\x48"
"\x97\x7F\x66\x10\xE8\x9E\x06\x0F\xDA\xE5\x1F\xB2\x10\x82\xCA\x00\x00\xD2\xC8\x32\xCE\x82"
"\xD2\xF9\x27\xC6\x31\x9D\x24\xD3\xA2\xC3\xFC\x51\xE3\xB1\xE8\x30\x12\xC0\x0F\x7F\x1A\x20"
"\xA0\x01\x7E\xFE\x10\x93\xA0\x2B\xB3\xFC\xE7\xA8\x26\x13\x32\x81\x08\xE2\xD4\xFC\xD3\x22"
"\x0C\xFF\xA9\x03\x00\x34\xDE\x7B\xCE\xC1\x80\x0E\x78\xB5\xA0\x0C\xFE\x41\xB3\xCF\xE3\x3C"
"\xA8\xAC\x89\x06\x14\xF8\x63\xD0\x81\xDC\xD4\x11\xD4\x83\x36\x88\x6B\x30\xF2\x04\xF8\x8D"
"\xA0\x06\x32\x99\x45\xD5\x80\x76\x90\xC5\xA0\x40\xB3\x7A\x46\x41\x8B\x66\x7C\x72\x20\x60"
"\x3C\xEC\x36\x98\x09\x4F\x53\xF4\x20\x4B\x58\x33\xF5\xA2\x1D\xBC\xF2\xC7\x8A\x8D\x96\xF9"
"\xEF\x56\x00\xCC\xD8\x33\x20\x57\x7E\x15\x48\x3F\xFE\x16\xD2\x96\x20\x7B\x2A\xAB\x03\x84"
"\x7E\x30\x31\x21\x98\xA5\x00\x0C\x08\xA8\xAC\x20\x05\xA0\x92\x5F\x47\xF1\x0A\x2F\x01\x08"
"\x90\x2D\x49\x7D\x21\x92\x49\x00\x01\x0E\xC0\x14\x80\x8B\x35\x35\x88\x5C\x17\x0D\xB2\x98"
"\xE3\x91\x3B\x26\x08\x24\xAF\xFA\x31\xED\xA2\xE4\x34\x2C\x08\x2A\x78\xF7\x0B\x28\x9B\x7A"
"\x01\x62\xB9\x21\x8A\x05\x02\x23\xB1\x4E\x4D\x71\x2A\xA0\x19\xFE\x29\x25\x02\x75\x60\x03"
"\x68\xE6\x6B\x19\xAD\x80\x07\xD6\x44\x92\x83\xE6\x87\xD2\x3B\xD6\xA2\xC6\x3A\xD5\xF2\xDA"
"\x80\x1A\x5E\x13\x21\xAA\xAB\x7E\x7A\xAA\x45\x2A\x50\xD1\xC7\x8C\xB4\x89\xD9\xA0\x97\xE3"
"\xAD\x13\x00\x1E\x9F\x6E\xB7\x60\x44\x15\x52\x00\x0C\x84\xF1\x25\xA8\x31\x21\x03\x98\x6E"
"\x16\x40\xB0\x23\xA8\xEC\x12\x00\x12\x70\xB2\x19\x29\x6A\x62\x16\x7F\xC0\x68\x02\x0C\x7F"
"\x80\xF1\x88\x22\x2A\xBE\x81\x46\x72\xC8\x24\x87\xC6\x9B\xAB\x01\xC8\x5A\x01\xC3\x67\x31"
"\x89\x20\xC8\x2B\x0F\xDD\x72\xCC\xD5\x23\xAF\x6C\x21\x31\x0A\xF6\xA0\x97\x55\xA8\x8C\x07"
"\x1E\x82\xA2\x99\x56\x5B\x19\xC2\x99\xA0\xE4\x96\x6A\x79\x20\xA7\xD9\x8C\x00\x4B\x79\x05"
"\x02\x2A\xBB\x80\xF4\xF9\x87\x08\x2A\xBC\x5E\x28\x80\xAA\x97\x22\x3D\xA2\xF5\x12\x6A\x18"
"\xA7\x4A\xBC\x8A\x45\x23\xD4\x56\x98\x2F\xA3\x42\x8D\x25\xE8\x8C\x7F\x20\x00\x60\xAF\xA5"
"\xDC\x09\x86\x66\x3D\xF9\xAC\x5D\x5C\x82\x50\x25\x42\x2C\x45\x0C\x8A\xA0\x85\xE0\x79\x20"
"\xA2\x81\x4D\xF9\x39\x2F\xA0\x1A\xAD\xB6\xA8\x85\x52\xFC\xC1\x83\x16\xF0\xA0\x1F\xA5\x98"
"\x5F\x41\x82\x92\xA5\xF5\x19\xCC\x76\x99\xAB\x4C\x02\x14\xC0\x9A\x0A\x54\x80\x1D\x86\xCA"
"\x08\x6A\x68\xB5\xC0\x88\xA0\xCB\x17\x06\x69\x0C\xE0\x00\xC0\x03\x40\xA8\x01\x00\x0D\x50"
"\x16\x41\x78\x34\xB6\x9B\x69\x30\x20\xED\xEA\x4E\x70\xFE\x41\x9C\x8A\xE8\xE7\x50\x00\x01"
"\x12\x6B\x9C\xE7\x90\xA8\x01\x00\x7A\x06\xD1\xC7\x3B\x80\x08\x44\x7F\xB0\xE7\x20\x0D\xDC"
"\x07\xA5\x00\x50\x23\x34\x00\xA4\x0B\x66\xB3\x12\x6A\x4C\xF4\xB6\x8B\x30\x48\x56\xD0\xE2"
"\x8E\x43\x04\x04\x2E\xF5\x29\x84\x02\xCA\x01\x08\x73\x84\x25\x11\x2A\x54\x46\x86\x00\x28"
"\x40\xEE\x24\x26\x95\x06\x56\xCC\x28\x08\x69\x80\x83\xC4\x53\x8A\xC0\xFD\x03\x84\x14\x51"
"\x63\x55\xAE\xE3\x0F\x73\x61\x64\x3B\x16\x1A\xC8\x74\x00\x51\xB2\x92\x09\x04\x3A\x10\x59"
"\x23\x40\x22\x20\xAB\x13\x56\xE4\x15\xE4\x6B\x96\x57\x0E\x58\x91\x6C\xB1\x10\x22\x28\x69"
"\x48\xF1\x26\x97\xB0\x89\xD4\xC8\x1F\x6D\xF9\xCC\x52\x86\xA0\x12\xD2\xA8\x4C\x20\x2D\xF0"
"\x0C\x68\x96\x82\xBA\x81\x68\xC6\x90\x94\xF4\x09\x0F\xBA\x92\x15\x40\x5C\x47\x93\x00\x00"
"\x81\x15\x9A\x90\x4B\x5D\xE6\x72\x5D\x67\x4B\x12\x55\xC0\x33\x90\x06\x54\xF0\x1F\xEE\xA8"
"\x62\x44\x28\xF0\x18\xAF\x78\xC3\x67\x1B\x99\xCB\x22\x0C\xA2\x80\x4C\x24\xE6\x33\xDF\xE8"
"\x5E\x40\xCC\x82\x96\x56\x06\xB3\x20\x04\xF0\x12\x42\xF6\xC0\xBC\xE6\x71\x53\x22\xDF\xD4"
"\x88\x02\xFC\x51\x97\x9A\x1C\x8C\x94\x10\xD9\x89\x2B\x09\x72\x48\x72\xAA\xA6\x05\x26\xB0"
"\xE7\x3D\xED\x19\xC9\x79\xEE\x13\x20\x96\xF4\xC9\x17\x3C\x37\x91\x0A\xCC\x82\x4D\x0F\x91"
"\x27\x3F\x11\x9A\x50\x85\xF2\x13\x98\x0B\x75\xE8\x43\x21\x1A\x51\x89\x4E\x94\xA2\x15\xB5"
"\xE8\x45\x31\x9A\x51\x8D\x6E\x94\xA3\x1D\xF5\xE8\x47\x41\x1A\x52\x91\x8E\x94\xA4\x25\x35"
"\xE9\x49\x51\x9A\x52\x95\xAE\x14\xA1\x8C\x00\xC3\xFD\x20\x42\x03\x46\xE8\x73\x20\x44\xB0"
"\xE9\x4D\x15\xB2\x81\x9B\xDA\xB4\x99\x03\xA1\x41\xDD\x20\x12\x50\x96\xA2\x94\x53\xFF\x80"
"\x66\x43\x2A\xA0\x4C\xF8\x15\x64\x79\xE9\xCA\x21\x00\xB8\xB6\x94\xA5\x16\x64\x3A\x47\x75"
"\x48\x04\x82\x42\xC4\xA1\x1E\x04\x62\x83\xAC\x68\x04\x16\x07\xBC\x85\x60\xE3\x1F\xC0\x30"
"\x41\x4E\x0A\x42\x03\xB5\xFE\x2F\x79\x50\x21\x82\x5A\x69\x70\xCD\x81\xF0\xC0\x32\x98\x70"
"\x08\x03\x1E\x03\x0C\xB4\x9E\xB4\xA1\x08\x69\x58\xB5\x8E\x39\x10\xF7\x30\x40\xA1\x6E\x82"
"\x27\x50\x54\xB8\x10\xE3\x3C\xF5\x65\x0C\x61\x40\x50\x16\xC3\x10\x06\x59\x35\xA5\x87\xC4"
"\x0D\x34\x4C\xA1\x4C\x98\x1A\x64\x8C\xEA\x44\x28\x86\xE0\xC9\xC3\xA9\x2E\x84\x70\xBE\x7C"
"\xAA\x40\xBA\xE8\x0F\xC2\x2A\x84\x7A\xD6\x63\xE9\x21\x4B\xA6\x86\x37\x1D\xE4\x88\x7B\x3C"
"\xC8\x25\x42\x3B\x90\x04\xB0\x03\xA8\x06\x39\x28\x0F\xB5\x9A\x90\xD2\xBA\x2C\x79\x03\xE9"
"\xAC\x42\x0A\xE0\x8F\x5A\x56\x36\xB7\x00\x00\x8A\xEE\xEC\xF6\x8F\xD1\x1A\x64\x00\xD3\xB1"
"\xEB\x43\x22\xF0\x98\xE0\xC6\x73\xBB\x06\xD9\x47\x6E\x87\xEB\xBD\xE2\xFE\x71\xB9\x9F\xD3"
"\x9E\x42\x86\x10\x8C\x6F\x2D\x24\xBD\xEB\x45\xE8\x6F\x01\x62\x16\xE8\x0E\x64\x00\xB3\x60"
"\x84\xF2\xD6\xF1\x0F\x69\x35\x04\x04\x96\x89\xAC\x5D\x98\x94\x10\x1E\x81\xB7\xAD\xE3\x15"
"\x88\x80\x7A\x4B\x90\x76\x05\xD6\x65\x4B\x71\xE5\xF7\xAA\xC4\x4F\xF8\x02\x60\x27\xDD\x9D"
"\x48\xA1\xC2\x78\x10\x53\x0E\x48\x79\xFC\xF0\x07\x83\x07\x22\x9F\x4F\x31\x24\xBC\x03\x29"
"\x71\x9F\x9C\x68\x10\x65\x18\x98\x6A\xAE\x6C\x71\x42\xE1\x8B\x2E\x7F\x14\x94\x6C\xB5\x7A"
"\x2A\x11\xC6\xD2\x10\x13\xFD\x23\x18\x8B\x1C\x08\x23\xBA\x82\xC4\x86\x9C\x38\x20\x44\x36"
"\x88\x0E\x52\x5C\x10\x65\x24\x36\x21\x2D\xA8\x43\x1D\x7C\x6C\x10\x27\x43\x39\xA1\xDC\xF8"
"\xAF\x42\xC4\x23\xD6\x8D\x50\x09\x64\x05\x79\x0D\x9D\x1C\x32\x80\xAC\x4C\xD7\x60\x58\xF2"
"\x23\x69\x0B\x7C\xDA\x81\xD0\x2A\xC1\x03\x51\x86\xFE\xB6\xEA\x10\x74\x44\x58\x25\xBD\xF0"
"\x54\xC8\x1E\xD3\x66\x84\x14\xCA\x1B\x34\xD8\xEB\x40\x36\x50\x87\x1C\x0F\x39\xCD\x0F\x19"
"\xA3\x9E\x03\xA2\x8C\xF2\xC6\x99\x28\xFC\x60\xF2\x46\x0A\x50\xC1\x05\x06\x85\x84\x0D\x41"
"\x2C\x43\x82\x40\x67\x85\x18\x19\x4E\x6A\x16\xC8\xF7\x10\x0D\x10\xF7\x78\x9A\xD1\x00\xD0"
"\x87\x85\x2D\xF2\xD8\xA2\x1D\x04\x04\x4B\xA1\xAC\x77\x3C\x9B\x90\xE4\x12\x98\xB1\x06\x4E"
"\xF4\x3F\xE4\x4A\x10\x3D\xA9\xB2\xD4\xF3\xCC\xEE\x3F\x5C\x8B\x10\x0D\xD4\xF5\x66\xA8\x1E"
"\x08\x7C\x39\xCD\x69\xFA\xF6\xE3\xD1\x04\x41\x32\x99\x2F\xE2\x05\x20\xDA\x27\x21\xD2\x7E"
"\x07\xB5\x53\x3A\xEC\x7F\x5C\x57\x21\xBF\x0E\xF6\xB0\xBC\x63\x6C\x13\x17\xBA\x21\x8D\x81"
"\xF6\xB2\x67\xBC\x10\x05\x80\x00\x04\x9B\x45\xB1\xA6\xCF\xE6\x60\x75\xB3\xDB\xDD\x19\x31"
"\x01\x23\x00\x31\x92\x56\x1B\xF5\xAE\x8F\x09\x30\x75\xFB\x11\x5A\x7E\x9C\xDB\xB4\xC2\xB5"
"\x75\x6A\x57\x9B\x10\xEA\xFD\xDB\x83\x4B\x19\xF1\xD6\xE4\xAD\x90\x17\x4B\xDC\xE1\x2A\x99"
"\xCE\x79\x2F\xC2\x80\xA5\xFC\x01\x22\x09\x08\x4A\x07\x11\x62\x58\x86\x00\x85\x76\x8A\x2D"
"\x70\x43\x32\xF6\x0F\x6C\x27\xA4\x78\x1C\x17\x6E\xC4\x13\xB2\x01\x2B\xF8\xC3\x95\x32\xA7"
"\x39\x69\x61\x9E\x91\x83\xDD\x59\x23\x7D\x68\x2E\x36\xD9\x51\x6F\x81\x34\xA0\x09\x8F\xA9"
"\xA3\x42\x0A\x35\x0B\x10\x44\xCC\x20\x34\x68\x41\x3D\x01\x58\x6B\x01\xB6\x20\xAE\x1A\x7E"
"\x8C\x1C\x1B\xE2\xBB\xA0\x31\x3D\xDE\x18\x07\xF7\xD7\xBB\x2E\xEE\x88\x34\x32\xC9\x13\x2D"
"\x2A\xD6\x19\xF2\x6B\xE9\x86\x4C\x50\x4F\x8D\xEA\xDA\x7D\xBB\x6D\x88\x24\xD5\xEB\x15\x01"
"\x1A\x3C\xEF\x9E\xD0\x03\x90\x3A\xA1\x8C\x50\x03\x88\x11\xC2\x83\x4C\x44\x39\x20\x3B\xB5"
"\x69\x4E\x0D\xDF\x53\x81\xF0\xA0\x8C\x10\xA9\x4E\x46\x98\xE3\x2E\xF4\x12\xAC\xD7\x95\xA7"
"\x68\x63\x2A\x4D\xF1\xCC\x5B\x9E\xF3\x0F\xF5\x2A\x42\x3E\xDF\x79\xD1\x8F\x9E\xF4\xA5\x37"
"\xFD\xE9\x51\x9F\x7A\xD5\xAF\x9E\xF5\xAD\x77\xFD\xEB\x61\x1F\x7B\xD9\xCF\x9E\xF6\xB5\x8F"
"\x08\x01\xB8\x9E\x10\x8E\x35\x04\xF7\x2F\xC9\xFD\x45\x03\x80\xFB\xD0\x97\xD4\x77\xDF\x5E"
"\xDD\x2F\x51\x8D\xE3\xA5\x3C\x83\xC6\x05\x29\x45\x56\xF4\x9A\x90\xB9\x2D\xC5\x1B\x42\xBF"
"\x75\xD5\x78\x5D\x10\xDC\x00\x7E\x2A\x9D\x42\x35\xAB\x4C\xD3\x57\x82\x5C\xDC\x2D\x75\x27"
"\xDE\x32\x73\x5D\x90\x06\x74\x43\x9B\x19\x15\x0F\x9C\x6F\xA5\xC6\x05\xF2\x2F\x32\xFF\x80"
"\x3F\x41\xFC\xE3\x0F\x68\x58\xA6\xD9\x01\xB9\x21\x34\x40\x83\x66\x7A\xE1\x33\x82\x08\x95"
"\x42\x8D\x05\x6A\xC5\x3B\x20\x23\x88\xCC\xAF\x85\x26\x66\x81\x7E\x08\x88\x12\xE3\xE1\x8E"
"\xED\x1B\x82\x61\x16\x02\xB0\x9D\x08\xE2\x3A\x2A\x83\xEF\x10\xAA\x46\xEE\xAF\xE0\x78\x68"
"\x81\xF4\x64\x31\x02\x80\x68\xD2\x0F\x00\xBA\xA8\xFD\xF4\x43\x6D\xA8\x2A\x37\x00\x62\x11"
"\x1A\x50\xFB\xD2\xED\x20\x0A\x25\xFB\x10\x28\xB7\xD0\x41\x85\xE4\x89\x01\x84\x83\xFB\x02"
"\x42\x3E\x62\xED\x27\x7E\xA1\x32\xBE\xC1\xD6\x12\x0A\x04\xD1\x4C\xFE\x68\x4B\x85\xF4\xA4"
"\xBB\x80\xE6\xBF\x92\x63\x7D\x6A\xC4\xB3\x92\x2B\x04\x0D\x22\x01\x80\x2D\xE4\x56\x0D\xEC"
"\x4E\x03\xCE\xE4\x49\x3F\xB4\xC8\x3B\xE6\x0B\x20\xA6\x43\x5A\x16\x4B\xA3\x94\x70\xD3\x1E"
"\xB0\x88\xD4\xA9\x8B\xE0\x0D\x20\x60\x24\x20\x40\xCB\x20\xC4\x83\x88\xCC\x83\xC4\x24\xCF"
"\x20\xE6\x4C\x4A\xBC\x30\x7E\x78\x6E\x04\x15\x62\x8C\x18\x0E\x21\x82\x03\x0B\x01\x42\x0D"
"\x94\xC5\xC8\x16\xA1\x5B\x3C\x04\x1A\x52\x50\x0D\x98\x4F\x20\xAA\xE0\x19\x34\x10\x00\x62"
"\x21\x18\xF4\xA9\x14\xA0\xC1\x05\x69\xC4\xFE\x96\x70\x30\x26\x8D\x3C\xC8\x6E\x7D\x40\x4D"
"\x20\xBE\xCB\x20\x7C\x90\x49\x78\xA4\x10\x09\x65\xD1\x70\x84\x35\x4C\x80\x06\xB8\x8F\x1F"
"\x36\x63\x80\x14\x6F\x20\x6A\x84\x3D\xD6\x28\x01\x94\xEB\x21\xFA\x20\x0E\xC5\x2B\x87\xCE"
"\xA1\x53\x8E\x4E\x20\xF8\x00\xCC\x02\x02\x1D\x6A\x70\x20\x80\x24\x61\x98\x43\x6B\x84\xCD"
"\x46\x42\x51\x10\x7D\xAB\x27\x78\x04\x10\xC4\x4F\x20\x80\xA4\x6E\x56\x63\x81\x8E\xE8\x80"
"\x60\xE1\x1F\x42\x89\x8B\x66\xAB\x20\xDE\x6E\xBF\xBC\xEB\x1B\x94\x89\xDF\x0E\x62\x2E\xEA"
"\x66\x8D\xF4\xA3\x1D\x88\xE0\xF7\x0E\x22\x38\xF4\xA8\x1A\x0D\xC2\x9B\x0E\xC0\x52\xCE\x82"
"\x74\x92\x63\xAA\x30\xA4\x0C\x01\xA0\x6C\xC8\x63\x3A\x3C\xF1\x13\x11\x71\x20\x98\xE0\x72"
"\x00\xC2\xCA\x0C\xA2\x8B\x7A\x42\x14\xFA\x41\x01\xF4\x21\xC3\x00\xE2\x30\x6C\x43\xE4\x0C"
"\x02\x01\xFF\x61\x16\xBA\x82\x20\x07\x02\x11\x82\x04\x21\xDA\xA5\x51\x04\x4D\x31\xF0\xAC"
"\x32\xAC\x80\x6F\xB4\x6C\x20\x92\xF1\x55\xD6\x08\x1F\x3C\xC3\xB6\x0C\x62\x2F\x28\xF0\xF8"
"\x3C\xAD\x31\xC6\x30\x78\xF8\x81\x76\x02\xF2\x20\x34\x2E\x2A\x1A\xC3\xF8\x42\x66\xC2\x12"
"\x42\x3C\xD0\xE0\x8C\x8E\x62\x1F\xCA\x90\x47\xFA\xE1\x7E\x08\x80\x68\xAE\x6C\x20\x78\xA4"
"\x7A\x46\x03\x16\xCD\xF0\xC3\x6A\xA6\x39\x0E\xA2\x0E\x80\x41\x2A\x96\xE4\x20\x46\x4D\x3D"
"\x58\x08\x63\x1A\x80\x1B\xE0\x6E\x1A\xB5\x72\xDC\xD4\x2C\x38\x86\x87\x2C\x4B\x03\x20\x92"
"\x51\x8A\x4C\x0C\x32\x70\x68\x8B\x32\xC2\x07\xC1\x60\x52\xFE\x84\x1F\xCE\x4C\x20\xEC\x0C"
"\x44\xB2\xC2\x0F\x09\x82\x41\x00\xE1\x00\x36\x60\x3A\x56\xAE\x20\xB2\x27\x27\xFF\xA8\x65"
"\xF2\xC1\xC0\xF6\xA1\xFF\x00\x00\x1F\x5A\xA6\x87\x90\x8B\x37\x14\x42\x0C\x09\x4D\xCD\xF6"
"\x22\xD4\x00\x60\x2E\x22\x4B\x1B\xF2\x11\x21\xA8\x44\x19\x17\x42\x1F\x1A\xB3\x22\xF6\x21"
"\x18\xFA\xA1\x3B\x80\x02\xD5\x32\x01\x65\x0E\x42\x3C\x58\xD1\x2B\x13\x62\x2F\x6A\x31\xD6"
"\x56\xCC\xD3\x7E\x93\xA9\x28\x0D\x0C\xC0\xA0\x0E\xFC\x21\x18\x84\xCA\x24\xBD\x06\x68\x4A"
"\x8E\x0D\x4F\x4B\x3C\x8C\x92\x20\x34\x6E\x32\xCC\x22\x2E\x0F\xA2\x31\x9A\x91\x9B\xA6\x83"
"\x2B\xAD\x31\x21\x98\x63\x08\x3F\x8D\x8E\xEC\xA5\x2D\x85\x27\xDC\x04\xA2\x2C\x17\x22\x38"
"\x37\xA5\x1D\xB3\x44\xCD\xEE\xC1\x6B\x18\xA4\xF1\x9C\x13\xE9\xE6\x52\x21\x98\x71\x00\x62"
"\x20\x10\x55\xD1\xCC\xF6\x29\x28\x62\x43\x22\x17\x62\xCE\x52\xF0\x3E\x2C\x28\xD1\xBC\xA6"
"\x3E\xBC\xC3\x8F\xD4\x53\x21\xD0\x93\x20\x4C\x00\x04\xEC\x09\x04\x5A\xA0\x80\x44\xD3\x01"
"\x9D\xA7\x89\x30\x32\xFE\x12\x42\x23\x19\x62\x3B\xC0\x40\x06\x71\x50\xB0\x8C\xE7\x6F\x16"
"\xE2\xDE\xF2\x4D\x23\xA2\x04\x20\x90\x4C\xDC\x6C\xE6\x20\x0E\xE3\xCA\xF2\xA1\x2D\xDD\xE3"
"\x12\x7D\xD2\x3A\x9D\x72\xE4\xF8\xC1\x3A\xED\x42\xEC\x06\xA3\x39\x7D\x12\x4F\x1C\xC2\xC8"
"\xF2\xA6\x2D\x7F\xD4\x8B\x0E\x82\x39\xB2\x23\x7B\x2C\x13\x15\x97\x82\x47\x19\x42\x4F\xEC"
"\x83\x41\x06\x54\x66\xF6\xB0\x20\x34\x2E\x65\x00\x02\x2B\xA2\x13\x56\x24\x63\x21\xF4\xE3"
"\x80\x98\x00\x14\x43\x46\x20\xFC\xE0\x1C\xFF\xD0\xB9\x04\x02\x2B\x02\x33\x20\x48\x12\x3C"
"\xE7\xF3\x20\x4C\x24\x7D\x16\x22\x18\xAF\x88\x28\xA6\x03\x84\xDA\x85\x85\x76\x0E\x32\x27"
"\x22\xCB\x66\xE1\x31\x16\x32\x20\x90\x4C\x47\x0B\x42\x40\xFE\xC1\x14\x54\x04\x48\xE3\xAD"
"\x27\x0B\x02\x5D\x78\xCC\x2F\xCA\x4E\x3D\xDE\xC2\x14\x62\xC9\xFA\xAE\xB1\x88\x26\x35\x96"
"\x0C\xF3\xD8\x10\x23\x88\xFC\xA1\x86\x74\xF2\x34\x2A\xC3\x53\xC5\x6D\x3A\xEC\x52\x20\xA8"
"\x47\x47\x38\xC9\x52\x03\x82\xEC\x2A\xF4\x21\x9A\xA0\x5A\x9A\xAF\x20\xC8\xE5\x18\x0D\xC2"
"\x25\x8B\x29\x17\xCF\x33\x3B\x11\xA2\x09\xB0\x24\x80\x10\xA2\x78\xB2\xC2\x1D\xA6\x74\xFC"
"\x2C\x4C\x58\xC9\x47\x57\xCD\xB0\x6A\x40\x55\x04\xBD\xAB\x53\x28\x49\x1F\xB4\xD2\x07\xFF"
"\xC1\x30\xF7\x62\x4D\x07\x62\xEF\x5E\xA2\x25\x1A\x82\x55\x09\x02\x63\xFE\x2C\x23\xCC\x29"
"\x21\x82\x6F\x5C\x75\x8E\x1F\x37\xAA\x4C\xDD\xD4\xF6\xD8\xF5\x21\x64\xE1\x31\xEA\xB3\x5D"
"\xE5\x15\x22\x1E\xE3\x19\x8A\x75\x5E\xF1\x95\x20\x0E\x60\xF8\xF2\xB5\x5F\xFD\xF5\x5F\x01"
"\x36\x60\x05\x76\x60\x09\xB6\x60\x0D\xF6\x60\x11\x36\x61\x15\x76\x61\x19\xB6\x61\x01\x62"
"\x26\x18\x82\x5F\x1D\x76\xA2\xB6\x91\xAA\x9C\x54\x50\x2B\xC3\x5B\x01\xA2\x50\xD6\x75\xA2"
"\x74\xAA\x61\x0F\x09\x29\xA9\xC6\x56\x7F\xE2\x31\x08\xB5\xA2\x9C\xC6\x03\xF1\x35\x64\x7F"
"\xAE\xBF\xDA\x61\x56\x09\x82\x14\x54\x6E\xA3\x76\x48\x61\x59\x16\xA1\x14\x41\x1D\x05\x82"
"\x06\xAC\x89\x20\x24\x91\xC6\x2A\x91\x46\x49\x24\x20\x86\x76\x20\xD2\x8B\x43\x3E\xD2\x43"
"\xDC\xCB\x20\xD4\xE0\x1B\xDE\xE1\x1B\x22\x87\x51\x01\xA2\x19\x42\x09\x10\x9C\xF6\x1D\xAA"
"\xB2\xA6\x9C\x56\x16\x0E\xE0\x17\xA4\x16\x00\x9A\x81\xF1\xDC\xE1\x1D\xB8\x36\x54\x9E\x01"
"\x1A\xBE\xE1\x44\x0F\xA2\x19\x6C\x0A\x6A\x4D\x01\x66\x97\x03\x39\xA1\x36\xAE\xBA\xE1\x1D"
"\xC2\xF2\x4C\xCD\x32\x20\x12\x20\x18\xA0\x01\xC4\x8E\x76\x16\x44\x04\x21\xB8\x65\x16\x96"
"\xD6\x20\x1A\x34\x20\x1A\x23\xC1\x82\xF1\xE8\x70\xC3\x26\x45\x51\x20\x28\x26\x9C\xAA\x86"
"\x4F\x01\xA0\x50\xB2\x84\x72\xF9\x01\x51\x1D\x66\x75\xA0\xB5\x88\xDA\xEE\x48\xB3\x64\x49"
"\x13\x08\x61\xBA\xAE\x6A\x32\x34\x6F\x41\xA5\xBA\xDC\xB1\xE1\xFA\x67\x25\x73\x4E\xC9\x7E"
"\xE5\x14\x07\x02\x68\xF0\xD0\x47\x51\xF7\x71\x09\xC2\x52\x0E\x40\x11\xFC\x61\x03\x1A\xE0"
"\x77\xED\x11\x20\xBA\xA8\xFA\x00\x22\x00\xB4\xF5\x59\xA9\x83\x36\x1A\xCD\x78\x00\xA0\x33"
"\x84\xB1\xFB\xC0\x82\x00\xCC\x04\x1C\xFF\xC1\x23\x08\x40\x2D\x2D\x6C\x3A\xD6\xE5\x00\xD4"
"\xB2\x1C\xEF\xB2\x27\x02\xA5\x35\x0A\xE0\x88\x72\xE8\x66\x03\x80\x41\xB0\x35\x20\x30\x46"
"\x52\xBC\xA6\x1F\x2F\x85\x85\x82\xF3\x00\x4C\xC1\x73\x64\x57\x20\x7C\x50\x47\xBA\x28\x7D"
"\x9F\xA4\x81\x1A\x2B\x21\x6A\x64\x0E\x1A\x62\x3A\xC4\x0E\x3A\xFD\xEF\x79\xC9\x17\x20\x34"
"\x0E\x11\x6B\xC4\x42\x0E\x91\xB6\x34\x44\x3C\xC4\xC5\x4F\xCC\xA8\x1F\x8E\x0A\x11\xBC\x26"
"\x64\x97\x88\x68\x5C\x91\xB8\xD4\x6C\x8D\x82\x13\xC9\x20\xE5\x7B\x42\x34\x46\x03\x62\x3B"
"\xBE\x76\x7F\x35\x48\xD9\x6A\xC4\x1D\x36\x40\xCD\xF6\x81\x48\x01\x62\x2E\x0A\x06\x40\xBD"
"\x4B\x58\xB2\xA1\xFD\xEE\x52\x4E\xD3\x81\x66\xBE\xA3\x36\x38\x58\x6A\x3A\x2D\x5C\xBC\x83"
"\x11\x8A\xF0\x74\x7F\x18\x6E\x8E\xEF\x4F\x42\xA1\x32\x08\xAB\x0F\xEA\x65\x2F\xA4\x84\x37"
"\x8B\x08\x42\xF8\x77\xBC\xDA\x45\x4B\x66\x01\xF0\xF2\x10\xE7\x54\x09\x82\x1D\x58\x20\x16"
"\x34\x3C\x79\x2D\x8C\x21\x97\x8A\x23\xB8\x0D\x83\x78\x8A\x15\x82\xFC\x68\x2D\x5F\x58\x48"
"\x84\x2F\x13\x94\x00\x60\x19\x70\x58\x20\x94\x60\x66\x4D\x4D\x2B\x51\x58\x43\x17\xC2\x0A"
"\x82\x01\x95\x70\x4D\x8D\x71\xAE\x6E\x7C\xD8\xB7\x1E\x8E\x8C\x65\x24\xC5\x10\x19\x77\x19"
"\xF9\xD3\xD0\xD8\xC8\x42\xD6\x33\x12\xEE\x4D\xF1\x16\x00\xC4\x83\x0A\xCE\xA8\x09\xD2\xA1"
"\x3B\xF2\xA1\x0C\x83\x63\x32\x68\x25\x7D\xBB\x73\x94\x87\xF1\x21\x04\x40\x06\x17\xF2\xA0"
"\xEA\x37\x83\x68\x4B\x58\x16\x19\x8E\x0D\x94\x74\xF6\xB8\x94\xAD\x11\x92\x29\xE9\x27\x01"
"\xE0\x8E\x8D\xD8\x2D\xDD\x38\x21\x82\x23\x0D\x68\xE0\x1F\x0E\x60\x12\xF8\x21\x63\x3A\xD6"
"\x34\x01\x20\x0E\x54\x13\x81\x88\xA8\x8A\x55\x16\x00\xD0\x01\x16\x0F\xEA\x6E\x02\x82\x95"
"\x6B\x18\x8C\xEB\xE5\x83\xEC\x85\x87\xCD\xF8\x88\x51\xC3\x96\xCD\xB3\x72\x5F\x32\x54\x91"
"\xF8\x20\xF4\x01\x18\x32\xC1\x47\x64\x00\x71\x54\xD2\x20\xE6\xC2\x0A\xB6\x41\x2B\x81\x82"
"\x49\x68\x38\xDE\x9A\x95\x21\x8E\xE6\x52\x17\x22\x39\x5C\x0E\x00\x90\x0C\x1C\x55\x08\x43"
"\x4E\x16\x00\x10\x70\xC4\x8A\x62\xA0\x47\x99\x62\x26\x49\x46\x2E\xF8\x96\xF1\x42\x3C\xEA"
"\x98\x9C\x2B\x19\x00\xF4\x64\x45\xCC\x62\x29\xEE\x99\x4B\x97\x42\x94\xA7\x02\x06\x01\x80"
"\x5C\x34\x68\x2E\xD0\xAE\x21\xC2\x14\xA1\x0F\x0A\x1F\x01\x43\x75\xA9\x97\x3C\xA8\x67\x5D"
"\x93\xCB\xA3\xC9\xA5\x63\x67\x99\x97\x6B\xF9\x69\x48\x0E\x89\x5B\xC1\x4C\xDD\x79\xBC\x0E"
"\x09\xC2\xD4\x66\xCE\x22\x7A\x20\x2A\x3A\xA3\x91\x71\x29\x66\xA1\x1D\x5E\x77\x20\x2E\xDA"
"\x1D\x4C\xE1\x1B\xB2\x96\x78\xA0\x61\x16\x9A\x7A\x29\x12\xB2\x8C\x1B\x62\x89\xFF\x61\xFF"
"\x92\xBA\x3C\x3A\x75\x29\x26\x79\x20\xE8\x34\x13\x54\x24\x5E\xE3\xA9\x9B\x69\xF9\x9B\xBD"
"\x66\xCE\xBE\x61\x16\xBC\xB7\xAC\xB1\x29\xCF\x14\x82\x5E\x3A\x98\x92\x52\x8B\x4D\x1A\x63"
"\x83\x01\x42\x3C\x76\x39\x06\xB5\x84\x07\x2A\x76\x20\x28\x28\x2B\xA8\x77\x58\x09\xAF\x3C"
"\x2E\x16\x13\x98\x02\x04\x52\xD1\xB7\xD4\x40\xB6\xC8\x28\x21\x1C\xFB\x44\xB4\x18\x0F\xB7"
"\x6B\x46\x1A\xCA\xC8\x1A\xE0\xE2\x28\x57\xFC\xE6\x62\xAF\x99\xD1\x85\x2F\x16\x26\x64\xE2"
"\x21\xBC\x49\x62\x83\x0F\x62\x54\xE2\x62\x1A\xF9\xD8\x00\x98\x00\x24\x96\x90\x82\x97\x9C"
"\xBC\xE4\x99\x11\xE2\x35\x02\x95\x60\x6D\x07\x29\x57\xAA\x1B\x82\xA1\x2F\x96\x42\x59\x0B"
"\x36\xB7\x7F\x6E\xA5\x46\xD7\x1F\x5E\x35\x60\x8B\x82\x4F\x93\x3B\xF5\x20\x46\x01\x26\xB6"
"\x9F\x94\xD5\x9F\x9E\x7B\xBA\xA9\xBB\xBA\xAD\xFB\xBA\xB1\x3B\xBB\xB5\x7B\xBB\xB9\xBB\xBB"
"\xBD\x1B\xA5\x84\xEF\xBB\x33\xEA\xAF\x33\x62\xFA\xB6\xFA\x22\xC8\x1B\x22\xD2\xDB\xBA\x75"
"\x9B\x21\xF6\xCD\x43\xDC\xA1\x35\x2F\xA2\xBD\xDD\xDA\xBB\xE9\x9B\xE2\xE4\xF4\x25\xEE\xDB"
"\xAA\xED\x7B\xB8\x49\x0C\x27\x90\x62\xBF\x6F\x97\xBB\xF9\x41\x0D\x88\xC0\x6D\xE1\x36\x20"
"\xB8\x82\x6C\xBB\xF6\x6B\xE1\xA4\x21\x78\x40\x72\xBE\x21\x13\xC2\x55\x6B\x43\xA4\x02\xF4"
"\x41\x83\x36\xC0\x14\x24\xB0\x67\x7D\xEB\x0B\x4C\xC0\x1D\xBE\xA1\x6C\x0F\x22\x02\xA0\x16"
"\x6A\xA1\xA1\xB0\xFF\x95\xFC\x98\x02\xE2\x14\xA8\x9B\x1A\x60\x77\x7B\xF7\x77\x2B\xE5\x20"
"\x6E\xC8\x33\x12\x1C\xC2\x36\xD7\x20\x80\x26\x4B\x48\x76\x59\x9D\xEA\x36\x3B\xE5\xB8\xDB"
"\x55\x7B\x01\x80\x7B\xC9\xF1\x28\xFF\xE1\x37\x36\xE0\x31\xC4\x45\x72\x3B\x85\x4F\x07\xC0"
"\xC3\xE6\x47\x00\x62\x41\x3F\x7F\x94\x08\x9A\xF7\xBC\x4D\xED\x1F\x02\x2A\xB6\x97\xF5\x17"
"\x82\x6F\x7A\x0D\x51\x2A\x02\x85\x72\xFB\xF5\x46\xF3\x5A\x18\x17\xB8\xC8\xE2\x70\x08\x4C"
"\x61\x9A\x0E\x35\x13\x32\xC1\x14\xDA\x3A\x3C\xD6\x12\x43\x10\x91\x80\x6D\x88\xCD\xBB\x70"
"\x8D\x93\x24\x81\x1D\xEB\x79\xFB\xB5\x87\x71\xA6\x89\xEA\xA6\x46\x34\xA8\x66\xDF\x11\xCC"
"\x02\x80\x26\xA2\x19\x73\x64\x38\x20\xEA\x79\x20\xE6\xA2\xAA\x5B\x79\x3C\x3D\x6D\xB1\x71"
"\xDB\xAC\xBD\x67\x0F\x7D\x30\x85\x8B\x4B\xC7\x83\xFC\xD3\xBB\x58\x18\x81\x24\x44\xBD\xAB"
"\x65\x16\x39\x11\x77\x86\xD0\xF3\x75\xA6\x9D\xD1\x89\x2A\x9D\x96\xDF\xED\xC4\xA1\xB6\x0C"
"\xEB\xB7\x90\x09\x82\x39\x88\x9C\x1F\x0E\x59\x00\xDD\x02\x6A\x61\x7D\x65\x3D\xDD\x68\x55"
"\xD3\x8B\x25\x9A\x73\x55\xFD\xD3\xEB\xC6\x9A\x4D\x3D\x80\x5D\xB9\x5E\x6A\xC4\x1B\x9C\xDB"
"\xB9\x04\xDC\xF5\x64\x1D\xB5\xC4\x54\x61\x08\x5D\xD9\xB4\x79\x21\xA8\x19\x20\xA0\x7D\xD6"
"\x7F\x9C\xAA\xA6\x1D\x73\xBE\xC7\x7B\x15\xDD\x60\xB7\x5D\x20\x18\x04\x13\x1A\xC0\xB1\x45"
"\xFD\xB4\x82\x72\x9F\xFF\xA1\x9F\xFF\xD9\x20\xEE\x7D\x21\x2A\x93\x0E\xFB\x61\xA0\xC3\x3D"
"\x97\x8B\x7D\x5E\xDF\x3D\x20\x36\xCC\xA8\x6F\x6E\xD9\x9F\xC3\x32\x5E\x15\xA5\x2F\x64\x3A"
"\xD6\xC7\x2C\x7A\x57\x3A\xB4\xA7\xA5\x8F\x6C\xD5\x0E\x40\xE2\xDD\xFD\xD8\x97\x05\x10\x32"
"\x81\x07\x1A\xE0\xDB\xC7\x2B\x19\x0F\xD5\x14\xFE\xD8\xC2\xB0\xFA\x70\xB8\xFC\x86\x2E\xD0"
"\x7C\xB2\x77\x29\xD0\xD6\xAB\xCD\xB9\x98\x66\x41\xB0\x0D\x56\xFC\xD6\x5B\x20\xF2\xB3\xDE"
"\x19\x42\x0D\x7E\x67\x06\x01\x00\xB1\x5D\x67\xBD\xC3\x2A\x2B\xB2\xB7\xB1\xB5\x44\x3E\x85"
"\x89\x98\xDA\x01\xC3\x43\x5B\x61\x07\xA0\x78\x88\x9C\x21\xFA\x11\x62\x75\xAF\xC2\xEF\xD1"
"\xB5\x19\xC2\x9B\xAC\x5E\xEB\xAB\x1B\x72\xA4\xDA\x32\xF0\x5A\xBC\x19\x8D\xD4\xB9\xCD\xEC"
"\x47\xAF\x5C\xC1\x5C\xED\xDD\xFE\xED\xE1\x3E\xEE\xE5\x7E\xEE\xE9\xBE\xEE\xED\xFE\xEE\xF1"
"\x3E\xEF\xF5\x7E\xEF\xF9\xBE\xEF\xFD\xFE\xEF\x01\x3F\xF0\x05\x7F\xF0\x09\xBF\xF0\x0D\xFF"
"\xF0\x11\x3F\xF1\x15\x7F\xF1\x19\xBF\xF1\x1D\xFF\xF1\x21\x3F\xF2\x25\x7F\xF2\x29\xBF\xF2"
"\x2D\xFF\xF2\x31\x3F\xF3\x35\x7F\xF3\x39\xBF\xF3\x3D\xFF\xF3\x41\x3F\xF4\x45\x7F\xF4\x37"
"\x4A\xF8\x68\x9B\xAB\x7A\x6F\x24\x20\xA6\xED\x1D\x8A\x7F\x4C\xD7\x6F\x4E\x53\x20\x1A\x23"
"\x21\x83\x51\xAB\x02\x80\x34\x6C\x8B\x22\xAF\x06\x2A\xAA\x48\xD1\x0A\xE2\xD0\x68\xDA\x91"
"\xAF\x85\xD4\xB3\x24\xA8\x01\x02\x76\xB2\xC4\x15\xC9\xEF\x2D\x78\xC0\x10\x65\xC1\x33\xB4"
"\x9C\xB6\xB2\x82\xF9\x9D\x1F\xFA\xE3\x2D\xBF\xD3\xD8\xCD\xAB\x5A\x1B\x8C\x7F\xE7\xF7\x67"
"\x01\x0B\x70\x29\x42\xB0\x31\x82\xEB\x88\x9A\x6F\x28\x69\xAC\x28\x15\x2C\x76\x93\x6C\x17"
"\x84\x0C\x55\x03\x59\xF8\x6D\x3D\x86\xC1\xDF\x2D\x80\xC8\xF8\x6F\xE8\x1B\x50\xFE\x08\x33"
"\x34\x28\x80\x28\x2B\x9C\x01\x08\x28\x30\x60\x03\x7F\xFF\xFC\x99\x82\xF6\xEF\x1F\xA6\x81"
"\x0E\xF9\xFD\x7B\xF7\x6E\xE1\x3F\x80\x0E\x09\x1A\x44\xA8\xF0\x1F\xA9\x8B\x00\xCE\xFC\xEB"
"\x77\xF1\x8C\xBF\x00\x0E\x41\xF2\x73\xA8\xE3\xA0\xC9\x8B\xFC\xE8\x78\x8C\xE9\x31\xDD\xBF"
"\x19\x17\x0B\xF8\x13\x39\x50\xC9\xBF\x4B\x1E\x13\xFD\x5B\x24\xB0\x40\x3F\x7F\x09\x2E\x2E"
"\x2B\x39\xF2\x1F\x08\x87\x5E\x6A\x5E\xD4\xA6\x73\x20\xC9\x96\x54\x95\xCA\x7C\x29\x33\x60"
"\x82\x83\x2D\xB6\x0E\xD4\x1A\x10\xC4\xBE\x9E\x1E\xB5\x31\x14\x08\xA2\xDF\x3F\x16\x31\xC5"
"\x02\x20\x6B\x36\xEA\xBF\x52\x6A\xD9\xBA\x3D\xB9\xF0\xCB\x49\xAC\x02\x41\xFE\x1B\x32\x10"
"\x1F\x4B\x8F\x70\xC1\x7A\xA4\x52\x31\xA6\xA8\xC0\x83\xFF\x31\xF0\x38\x80\x9F\xD1\x80\x94"
"\xFE\xFD\xF1\x28\xC7\xEF\x5F\x7F\x03\x1C\x7E\xC0\xEC\x30\x00\xBF\x6E\x23\x39\x07\xAC\xBA"
"\xF5\xB0\x47\x9E\x55\x10\x0B\x3C\x1C\x40\x9F\x3F\x03\x0E\x4B\x2C\x1E\x18\xDA\xB4\x61\x98"
"\x02\x67\xD7\x76\x08\xE2\x1F\x37\xD0\xFF\x78\x53\x5D\xD8\xCF\xEA\x47\xD4\x80\xA7\x0E\x59"
"\x88\x3A\x20\x6B\xD8\x01\x27\xFB\x8B\xEC\x91\xC1\xBF\x94\x01\x57\xC6\x92\xF9\x34\x3C\xF7"
"\xE5\x1E\x55\xF7\x65\x0E\x60\x40\x3F\xE4\x01\x35\x88\x4E\x7F\x5A\xFD\x43\xDF\x32\xE5\xFC"
"\xFB\x60\x1D\x00\xEB\x38\x4C\x1D\x22\xF2\x9F\x43\xBD\x54\xE6\x92\x7D\x01\xF9\xD7\xD4\x40"
"\x40\x29\x38\x10\x81\x47\x51\xD5\x0F\x18\xF1\xA5\xE6\x5C\x3F\x80\xFC\xF3\x1A\x00\xF9\xB8"
"\xC3\xC8\x74\xFC\x1D\xB8\x1F\x00\x8D\x85\xE8\x50\x25\xFF\x30\x11\x50\x3E\xD9\x6D\x95\xCF"
"\x3F\x11\x34\xA6\xE1\x69\x02\x45\x70\x40\x40\x5E\x4C\x87\x0E\x67\x5D\x40\x25\x9F\x8F\x6F"
"\x95\xE8\xD0\x0C\x73\xC1\xC6\xDA\x24\x02\x0A\xB4\xCC\x54\x03\xF1\x58\x42\x6F\x0E\x1D\xD9"
"\x60\x40\x4A\x7A\xD4\xE4\x49\xFD\x08\x90\x4D\x81\xCD\xA9\x77\x46\x3F\x07\xE4\x23\x12\x4F"
"\x43\x50\xF1\x61\x75\xB0\xC1\xB7\xA4\x47\x38\xF9\x03\x80\x19\x44\xC6\xB4\xD2\x42\xDE\x9D"
"\xF7\x4F\x05\x00\x84\xC6\x4E\x40\xAE\x4C\x07\x94\x06\x03\xED\xB2\x65\x67\xF4\xA1\x07\x24"
"\x58\xEC\xFD\x03\x06\x7D\x4F\x0E\x74\xE2\x9F\x03\x29\x33\x1D\x48\x52\xC6\x16\xA2\xA3\x0E"
"\x45\x4A\x28\x92\x15\xE2\xC9\xD1\xA0\x7D\x01\xC0\x13\x20\xEC\x88\x64\x86\x99\x41\x22\x46"
"\x93\x4D\x60\xE1\xF7\x8D\x3F\x9E\x21\x86\x56\x8F\x9A\xFD\x87\x46\x61\x49\xD1\x37\x64\x1A"
"\x03\xE9\x43\xE7\x55\x84\x7E\x58\x29\x62\x3B\x50\xF4\x4D\x26\x3C\xAC\x76\xE0\x70\x6A\x02"
"\x90\xE9\x52\x94\x52\xA7\x6C\x48\x17\x39\xAB\x17\xA5\xAA\x29\xF3\x0F\x05\x15\x76\xA9\x94"
"\x3E\x0B\xBD\x56\x68\x58\xA8\x6E\xA5\x98\x45\x88\xB9\x88\x22\x6C\xAD\x2C\xA4\x9D\x47\x2C"
"\xFC\xF3\x67\xB6\xF9\x35\xAB\xE7\x4D\xFD\x9C\x0B\x9F\x4F\xF3\xF1\x9B\x15\xB9\x03\x6D\x10"
"\x0C\x45\x21\x7D\x66\xD8\x1F\x01\x10\xD0\x80\x1A\x0B\xA5\xE8\xD0\x2B\xFF\xD8\x66\xAD\xC1"
"\x08\x2B\xCC\xF0\x45\x0F\x47\x9C\xDC\xB5\x4A\x51\x90\x9B\xB8\x5C\x02\xB0\xC4\xB4\x20\x1B"
"\x28\xE2\x7A\x45\xB9\x0B\x56\xC7\xBF\xC0\x06\x01\x45\xE1\xC5\x04\xDF\x6B\xFC\xD4\xA1\xCF"
"\x1C\x1B\x16\x77\x16\x56\xB6\xE6\xF5\xE3\xA7\xFE\x8A\x48\x80\x09\xDD\xFC\xD3\x4E\x4C\x65"
"\x0D\xFC\x4F\x90\x4A\x6A\x0A\x2D\x00\x48\x0F\xBC\xB4\x79\x12\xFF\x1A\x50\x63\x4E\x7E\x8C"
"\x1E\x08\x0D\x70\xCB\xE8\x7E\x24\x8A\xB8\xCF\xAE\x88\x65\x6B\xC5\x36\xF4\x7A\x44\x1A\x1A"
"\x11\xBC\xD8\x4A\x71\x67\x02\xC0\x73\x40\xDA\x7C\x48\x92\x47\x38\x2E\x2A\xAC\xC9\x00\xD0"
"\xF4\xE8\x43\xEE\xCC\x12\xCC\x2C\x07\xC5\x54\xAD\xC6\x86\x01\x2E\x78\x1D\x11\x14\x2E\xE9"
"\xA6\x24\x1F\xE0\x8F\xD1\xA6\x76\x0B\xEC\xA2\x70\xC7\x14\x1A\xB3\x60\x61\x2E\x10\x6E\x46"
"\xC7\x70\x5C\x4C\xA4\xA5\x51\x85\x48\x53\xF4\xD3\xC0\x3E\xA8\xB2\xED\x53\xE4\x2C\xD7\xC9"
"\xB8\x43\xA2\x04\x1B\xED\xDE\x00\xAC\xD4\xF0\x43\x63\x03\x70\xA2\x8C\x90\x62\x65\x15\x48"
"\xFA\xB9\xC4\xFB\x56\x86\xFF\xF5\x78\xA1\x01\xCE\x50\x66\xE5\xFD\xD6\x27\xA2\xAA\x26\x77"
"\x1E\x10\x4D\x79\x65\xF3\xCF\x0E\x31\x61\xF3\x0C\x30\x00\x75\x5C\xC7\x3F\x4E\xC6\x94\xCE"
"\xE9\x8E\x79\x64\x2B\xF9\x03\x61\x53\x3B\x88\xB7\x77\xEC\x87\xD7\x2E\xFB\x2A\x90\xAD\x82"
"\x05\xD0\x8F\x6F\xEA\x9C\x0A\xDB\xFD\x17\xE1\xC3\x39\x7E\x21\x4D\x3B\x00\x21\x40\xCB\x79"
"\x0D\x31\x8A\x81\x9D\x88\xAA\x17\x9D\x9C\x75\x6A\x73\x00\xE8\xC5\x5E\x02\xF2\xAD\x78\xC9"
"\xC4\x56\x2D\x60\x46\xB0\xA2\xD3\x91\x81\x44\x4E\x82\x7A\x33\x19\x50\x7A\x36\x2E\x48\xB5"
"\xE5\x22\x1D\x33\xDA\xFB\xE0\x75\xAE\xE8\x21\x66\x85\x0E\x71\x21\xF4\x3E\x22\x9D\xE7\xF9"
"\x6C\x84\x60\x21\x8A\xA0\xAC\x53\xBD\x6F\xF9\x0D\x00\xBB\xF8\x07\x5F\x96\x62\xA7\x80\x0C"
"\xB1\x76\x09\x30\x88\xA7\x64\x52\x16\x30\x08\x44\x01\xDC\x20\x22\xE7\xFE\x15\x10\xF5\x34"
"\xE1\x20\x19\x3B\xA1\x40\x56\x90\x1B\x87\x64\xAF\x14\x04\x10\x5B\x04\xF0\x62\x28\xD8\x64"
"\xAF\x21\x01\xD9\x80\x19\x73\xF8\xAD\x03\xD6\x50\x87\x5B\x01\xCC\x37\x24\x62\xC7\x77\x4C"
"\xED\x8C\x31\xC1\x0F\x03\x03\xE2\x32\x58\x09\x69\x64\x00\x50\x0C\x0B\x65\x42\x41\x0C\xCA"
"\x84\x58\x07\x31\x85\xC0\x8A\x86\x98\xEA\xC1\xE7\x1D\xD0\x98\x85\x29\xDC\xB1\x10\xC1\x24"
"\x10\x00\x84\x91\xDD\x40\x0A\x92\xB4\xB4\xE8\x11\x2C\x11\xC8\x48\x42\x16\x62\x97\x38\xF2"
"\x04\x8E\x39\x0C\xC8\x3E\xFC\x71\x47\x89\xE4\x31\x79\x9F\x54\x4E\xDE\x58\x69\xBC\x8B\xD0"
"\x26\x65\x01\x39\x51\x11\x07\xC2\x36\x06\xB2\x0D\x66\x32\x09\xCD\x0B\x63\x52\x01\x60\x50"
"\xC4\x1F\x50\x44\x8C\xD8\x54\xC6\x96\x81\x79\x63\x03\x4E\xBC\xA5\xC8\x6E\x19\x90\x03\x0C"
"\x6E\x21\xEF\x68\xC2\x56\x9A\x69\x1D\x6C\x26\x93\x9B\xE7\x99\x8E\xF9\x70\x58\xB5\x8B\x40"
"\x6D\x60\xB1\xBC\x1D\x3B\xDB\xE9\x4E\x99\x08\xE0\x00\x04\x78\x67\x4C\x04\x40\x80\x7B\xD2"
"\xD3\x23\x14\xB4\x26\x3D\xE3\x69\xA3\x7C\x02\x34\xA0\x02\x1D\x28\x41\x0B\xFA\xCE\x8E\xFD"
"\xE3\x1B\xA6\x78\x86\x41\x1B\xEA\xD0\x87\x42\x34\xA2\x12\xBD\x88\x09\xDA\x71\xC3\x89\x62"
"\x34\xA3\x1A\xDD\x28\x47\x05\x42\x80\x03\x08\xA0\xA3\x22\x1D\x29\x49\x4B\x6A\xD2\x93\xA2"
"\x34\xA5\x2A\x5D\x29\x4B\x5B\xEA\xD2\x97\xC2\x34\xA6\x32\x9D\x29\x4D\x6B\x6A\xD3\x9B\xE2"
"\x34\xA7\x3A\xDD\x29\x4F\x7B\xEA\xD3\x9F\x02\x35\xA8\x42\x1D\xEA\x46\xED\x49\x80\x90\xCE"
"\xF4\x9E\x47\x25\x6A\x41\x3F\x46\xC1\x55\xA1\x73\x96\xEB\x64\xE5\x27\xF9\xF9\x31\x92\x5D"
"\x84\x07\xDF\x48\x1A\x3F\x9F\x26\xD5\x45\xA5\x93\x22\xEB\x04\x8C\x74\x82\x21\xCE\xAD\x58"
"\xE1\x99\x2F\x33\xA2\x74\xA0\x71\xD6\xAD\x44\xA7\x90\x40\x15\x97\x25\x9A\xE8\x11\x7D\xBC"
"\x72\x22\x1F\xC2\xEB\x44\x22\xF2\x0F\xAB\x4A\xEA\x43\x67\xFB\x87\x3B\x4C\x31\x0B\x68\xF8"
"\xA3\x97\x0F\x89\xC8\x2B\xA7\xCA\x1F\xC6\xDE\x71\xAC\x90\x65\x62\x3F\x20\x74\x91\x00\xAC"
"\x63\x21\x0A\x3D\xAC\x3F\x20\x98\x3C\x3B\xAE\x15\x2C\x17\x54\xAC\x4F\x0B\x65\x2B\xF7\xC0"
"\xE6\xAA\x5C\x8C\xC9\x55\xAF\xDA\x18\x77\x48\xB3\x48\x56\x5C\xED\x1C\xFD\x12\x81\x66\x08"
"\xD2\x21\xAE\xF8\xC7\x33\xB8\x06\x96\x42\x55\xA0\x2C\xBA\xF3\x88\xC8\x66\xC1\x0F\x11\xE6"
"\x14\x3D\x2B\x41\x2E\x6B\xDD\xD7\xB9\xD6\xA2\x86\x6D\xCC\x85\xA1\x6C\x53\x8B\x1A\x45\xC0"
"\x29\x20\x1D\x9B\x6E\xD7\x04\xC2\x80\xCE\x6E\x25\x1D\x6D\xF2\xCF\xF6\xE6\xAA\x94\x0A\x1C"
"\xC4\xB2\xFB\x51\xAD\x1C\x57\xF9\xB1\xFF\xED\xA7\x7A\xB4\x95\xC9\x55\xF5\xC1\x2C\xF8\x22"
"\xE6\x63\xFB\xF0\xAC\x43\x32\xE0\xA9\xC8\x15\x93\xA7\x76\x2B\x00\x44\x9C\x96\x5F\xE7\xFE"
"\x0B\xBA\xEA\x41\xDE\x23\x67\xDB\xDE\x71\xD2\xE7\x52\xC0\xAB\xA5\xCF\x00\x2C\x93\x00\x11"
"\x2F\x52\x5B\x14\xF0\x97\xEE\x81\xBE\xBD\xB1\xD7\x76\xF4\x6D\xD3\x45\xBA\x80\x1A\x06\x73"
"\xAE\xAB\x86\x51\xF1\x39\x07\xF2\x14\x4A\xA1\xB8\xB9\x03\x09\x00\x6E\x49\x3B\x90\x30\x09"
"\x44\x64\xBF\x13\xF0\xC0\x0C\x7C\x60\x0A\x3F\xF7\x1F\x80\xA8\x03\x91\x89\xAC\x86\x60\x9C"
"\xD8\x2F\x3C\x30\x45\x26\x32\x61\x8A\xB7\x3C\x43\x0D\x45\xAE\x03\x0D\xB2\xF2\x0D\x46\x34"
"\xD9\xC9\x98\x74\xEF\xE3\x62\x5C\x27\x26\x67\x62\x16\x06\x09\xB0\x40\xE0\x23\x4C\xEE\x90"
"\x39\xB9\xEA\x64\x67\x88\xDF\x47\xDF\x59\x5E\x74\xC2\x02\xD9\x43\x32\xC1\xFA\x49\x45\x38"
"\xF1\xCE\x10\xBE\x08\x28\xBA\xEC\xBE\xE4\x7C\xD2\x1F\x06\xC6\xCF\x96\x35\x09\xC8\x9E\x82"
"\xC4\x34\xEC\x12\xA6\x88\xDA\xFC\x5C\x7F\xB4\x60\x03\x92\x96\x74\x05\x2E\x91\x64\xAB\x24"
"\xEC\x00\x8A\x30\x13\x26\x2A\x30\xE9\xAD\x65\x65\x11\x07\x68\x00\xA9\x1B\x30\xCF\x38\x02"
"\xE0\xC5\x98\xFA\x73\x67\x36\x50\xEA\x0A\x4C\xE8\x1F\xBE\x75\x48\x52\x0A\x16\x90\x00\xF9"
"\xD8\xA6\x24\xB1\x4D\x00\xCA\x52\x68\xEB\x38\x3A\xC1\x24\x76\x08\xE5\x68\x1D\xD8\xCB\xB1"
"\x78\x77\xD6\x6D\x9A\xB1\x29\x7C\x95\x8B\x10\x8B\xD1\x02\x29\x4B\x1D\xC0\x60\x6D\x2B\x64"
"\x36\xD9\x34\x45\x0F\x6E\x82\x23\xA2\x3E\x20\xB8\xB6\x08\x1C\x08\xED\x36\x8C\xD5\xF9\x26"
"\x6B\xD9\xD4\xF2\xC7\xAC\xAD\xE6\xED\x1F\xBB\x84\xBF\x00\x60\x1B\x9C\xA5\xAD\xD3\x42\x01"
"\x25\xCD\x32\xD1\x12\x90\x85\x3D\x6E\x81\xF0\xA8\x44\xAA\x95\xEF\x83\xE3\xC8\x9E\xFA\x0D"
"\x52\x69\xC0\x46\xCD\x00\xBE\xE8\xB9\xBA\x6C\xC0\x04\x12\x07\x01\x0D\xDA\xF3\x53\x71\xB9"
"\xC8\xC6\x01\xE1\xA4\x40\x5C\x26\xD7\x4C\xBA\x17\x35\x21\x44\xB5\x9B\xAB\x0B\xEF\x81\x2C"
"\xE3\x1F\xF2\x73\x48\x08\x9D\xDD\xDD\x8E\x83\x57\x2F\x50\x15\x08\xBF\x4B\xCB\x19\xF8\xBC"
"\xE8\x22\x5D\xF1\x06\x27\x23\x50\x16\x8D\xA3\xBB\xC5\x3F\x1B\x08\xBB\xBC\xD1\x6E\x34\xF4"
"\xCF\x87\x0E\x2E\x54\x04\x32\x2B\xC1\x50\xFC\x83\xE7\x27\x27\xC8\xB7\x86\xBB\x4B\x44\x02"
"\x8A\x45\x88\x46\x0D\x7E\x10\x7E\x80\x0B\xBE\x63\x16\x5B\x75\xB8\x43\xF8\x7A\x90\x77\xF8"
"\x03\xB0\xFF\x16\xC8\x00\x2E\x08\x8D\x30\x6F\x35\xE9\xB0\x69\x65\x5E\x25\x2B\x91\x3A\x4A"
"\x47\xBD\x33\x4E\xD7\x66\x83\x81\xC7\xA5\xDC\x91\x22\x64\xC6\xD5\xB3\x6C\x4E\x1F\xB4\xEC"
"\x38\x20\x4D\x18\x3B\x61\xAD\xD0\xCD\x4F\x06\x49\xC1\x31\x01\x83\x5A\x23\x22\x8B\xA3\x69"
"\x7B\xDA\x5F\xD5\x4B\x32\xDD\x8A\x98\x26\x58\x52\x9D\x5D\x4A\x9A\x3F\xBE\xB1\x4C\xA4\x4C"
"\x15\x24\x26\x60\xAA\x75\x02\x20\x00\xA4\x8E\xF4\xA3\x04\x70\x39\x4A\x65\x0F\x7B\xD6\xE3"
"\x3E\xF7\xBA\xDF\x3D\xEF\x7B\xEF\xFB\xDF\x03\x3F\xF8\xC2\x1F\x3E\xF1\x8B\x6F\xFC\xE3\x23"
"\x3F\xF9\xCA\x5F\x3E\xF3\x9B\xEF\xFC\xE7\x43\x3F\xFA\xD2\x9F\x3E\xF5\xAB\x6F\xFD\xEB\x63"
"\x3F\xFB\xDA\xDF\x3E\xF7\xBB\xEF\xFD\xEF\x83\x3F\xFC\xE2\x1F\x3F\xF9\xCB\x6F\xFE\xF3\xA3"
"\x3F\xFD\xEA\x5F\x3F\xFB\xDB\xEF\xFE\xF7\xC3\xFF\xF8";
#undef DD_ALIGNED_BUFFER

static const FontCharSet s_fontMonoid18CharSet = {
  /* bitmap               = */ s_fontMonoid18Bitmap,
  /* bitmapWidth          = */ 256,
  /* bitmapHeight         = */ 256,
  /* bitmapColorChannels  = */ 1,
  /* bitmapDecompressSize = */ 65536,
  /* charBaseHeight       = */ 20,
  /* charWidth            = */ 17,
  /* charHeight           = */ 30,
  /* charCount            = */ 96,
  {
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0, 150 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,  60 }, {  17,  60 }, {  68,   0 },
   { 153,   0 }, { 119,   0 }, {  34,   0 }, { 204,  30 },
   { 119,  30 }, { 102,  30 }, {   0,   0 }, { 102,   0 },
   { 170,  30 }, { 136,   0 }, { 187,  30 }, { 221,   0 },
   {  34,  60 }, { 187,  60 }, { 170,  60 }, { 153,  60 },
   { 136,  60 }, { 119,  60 }, { 102,  60 }, {  85,  60 },
   {  68,  60 }, {  51,  60 }, { 136,  30 }, { 153,  30 },
   {  17,  30 }, {  85,   0 }, {   0,  30 }, { 221,  30 },
   { 204,   0 }, { 170, 210 }, { 153, 210 }, { 136, 210 },
   { 119, 210 }, { 102, 210 }, {  85, 210 }, {  68, 210 },
   {  51, 210 }, {  34, 210 }, {  17, 210 }, {   0, 210 },
   { 238, 180 }, { 221, 180 }, { 204, 180 }, { 187, 180 },
   { 170, 180 }, { 153, 180 }, { 136, 180 }, { 119, 180 },
   { 102, 180 }, {  85, 180 }, {  68, 180 }, {  51, 180 },
   {  34, 180 }, {  17, 180 }, {   0, 180 }, {  85,  30 },
   { 187,   0 }, {  68,  30 }, { 170,   0 }, {  51,   0 },
   { 238,  30 }, { 119, 120 }, { 102, 120 }, {  85, 120 },
   {  68, 120 }, {  51, 120 }, {  34, 120 }, {  17, 120 },
   {   0, 120 }, { 238,  90 }, { 221,  90 }, { 204,  90 },
   { 187,  90 }, { 170,  90 }, { 153,  90 }, { 136,  90 },
   { 119,  90 }, { 102,  90 }, {  85,  90 }, {  68,  90 },
   {  51,  90 }, {  34,  90 }, {  17,  90 }, {   0,  90 },
   { 238,  60 }, { 221,  60 }, { 204,  60 }, {  51,  30 },
   { 238,   0 }, {  34,  30 }, {  17,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }
  }
};

#if DEBUG_DRAW_CXX11_SUPPORTED
#define DD_ALIGNED_BUFFER(name) alignas(16) static const std::uint8_t name[]
#else // !C++11
#if defined(__GNUC__) // Clang & GCC
#define DD_ALIGNED_BUFFER(name) static const std::uint8_t name[] __attribute__((aligned(16)))
#elif defined(_MSC_VER) // Visual Studio
#define DD_ALIGNED_BUFFER(name) __declspec(align(16)) static const std::uint8_t name[]
#else // Unknown compiler
#define DD_ALIGNED_BUFFER(name) static const std::uint8_t name[] /* hope for the best! */
#endif // Compiler id
#endif // DEBUG_DRAW_CXX11_SUPPORTED

DD_ALIGNED_BUFFER(fontRussoOneBitmap) = 
"\xFA\x75\x00\x00\xCE\xAF\x03\x00\x00\x00\x06\x14\x38\x90\x60\x41\x83\x07\x11\x26\x54\xB8"
"\x90\x61\x43\x87\x0F\x21\x46\x94\x38\x91\x62\x45\x8B\x17\x31\x66\xD4\xB8\x91\x63\x47\x8F"
"\x1F\x41\x86\xE4\x68\xC2\x91\x2D\x93\x27\xCB\x4C\x10\xB9\x92\x65\x4B\x97\x2F\x61\xC6\x94"
"\x39\x93\x66\x4D\x9B\x37\x71\xE6\xD4\xB9\x93\x67\x4F\x9F\x35\xBD\xFC\x13\x3A\x74\xA8\x36"
"\x11\x34\x6B\x9C\x54\x6A\x6B\xC8\x4F\xA7\x4F\x37\x4E\xD8\xB4\xD4\x96\x14\xA8\x57\xB1\x66"
"\xD5\xBA\x95\x6B\x57\xAF\x5F\x67\xCA\x99\x37\xF4\x94\x4A\x00\x13\xCC\x5C\x79\x29\xC2\x1C"
"\x51\xB7\xFF\x18\xD1\x64\xF4\xF6\x9F\x33\xB3\x20\x87\x50\xB5\x95\x6A\x42\x19\xBD\x8E\xEE"
"\x82\x15\x1C\x70\xEE\xDB\x79\x4D\x07\x27\x56\xBC\x98\x71\x63\xC7\x8F\x21\x13\x36\x9C\x72"
"\x96\xD0\x5A\x35\x5A\x06\x1D\x3A\x4B\x87\x95\xB6\x42\xED\xCA\x64\x6B\x18\x71\x48\xCD\x6E"
"\xCD\x89\x28\xEC\x36\x74\x64\xAD\x43\xC6\xD2\x6D\xED\x9A\x76\x6D\xDB\xB7\x71\xE7\xD6\x7D"
"\x9A\x2E\xD1\x59\x99\x89\x7A\x39\xEB\x6C\xE8\xEC\x97\xBC\x87\xC6\x5D\x89\x5C\x68\xEA\xD5"
"\x44\x8D\xEB\xD6\x39\x81\x78\x6F\xB8\xD2\xB1\x67\xD7\xBE\x9D\x7B\x77\x90\xD4\xAD\xBB\x15"
"\xCE\x92\xF7\xAC\x09\x35\x3E\xD7\x0D\xEC\xB2\x32\xEB\xF5\x1F\x99\xFF\x73\x2E\xFB\xBD\x77"
"\x98\xED\xAD\x1F\xB6\xBF\x9F\x7F\x7F\xFF\xFF\x23\x83\x2D\xBC\xE2\xEA\xF3\x68\x34\xEB\x94"
"\x83\xE9\xC0\xA1\xF4\x23\x8F\xAE\xF9\xDE\x8A\x0E\x40\xD3\xDE\x92\x03\xBF\xE6\x8E\x9A\x50"
"\xC3\x0D\x39\xEC\xD0\x43\x96\xC4\x12\x4A\x8E\x09\x4E\x79\x2B\xB5\xE3\xAC\x33\x4A\x26\xE6"
"\x7E\x03\xCE\x44\xD5\xE8\xFB\xD0\xC0\xF4\x84\x8A\x0B\x3C\xDF\x64\xCC\x51\xC7\x1D\x79\xDC"
"\x11\x2D\xB5\x00\x2A\x43\x9B\xA1\x2E\x8B\x89\x24\xAA\x52\x9A\x09\x90\xA5\xF8\x72\xC9\x04"
"\x33\xA0\x8C\x32\xAD\xF3\xA4\x8C\x12\xC8\x1E\x2F\x5A\x52\x29\x47\x02\x12\x21\x95\xA5\x30"
"\xC3\x52\xCC\x31\x45\xBA\xA2\x24\xA5\x52\x31\xA3\xC0\x98\x74\x30\x83\x13\xBD\xE0\x3C\x49"
"\x90\x2B\xD6\xB4\xA8\xCD\x37\xE3\x84\x73\xCE\x3A\x07\x9B\xE0\x4B\xBD\x38\xA1\x93\xCC\x41"
"\x23\xEA\x6B\xA9\x32\x08\xC5\x2E\xBE\x01\x19\x95\x2F\x43\x88\x16\x6D\x70\xA0\xE7\x36\x2B"
"\x68\x41\xF1\x12\x75\x2C\x44\xEB\xCA\x2A\xE8\x42\xD0\xF8\x2C\xB4\xC4\x46\x07\x3C\x47\x0E"
"\x8D\x48\x24\xB5\xD4\x53\x2B\xA2\x74\xA8\x13\x17\x8A\xB4\xB4\x87\x2E\x35\x8C\x55\x82\x04"
"\xC4\x94\xC2\xDE\x24\x14\x69\x51\xF5\x60\xFA\xB5\xD7\x5D\x63\xEC\x68\x02\x47\x62\x23\x2A"
"\xC1\x81\x72\x0D\x6E\x39\xEB\x86\x05\x49\xD8\x50\x23\x72\x55\xA8\x16\x0F\xBA\xF1\xAD\xF1"
"\x36\xFA\x54\xD5\x01\x61\x85\xA8\xD6\xA1\xB8\x0D\x48\x5B\xA2\xC2\x0D\xA8\x59\xA2\x24\xCD"
"\x34\xB1\x5F\x71\x1C\x88\xB9\x76\x31\x5A\xF7\x5B\x5E\xA9\x55\xC8\xDE\x7B\x23\xCC\xD7\x20"
"\x6B\xAF\x5D\xE8\x5C\x76\x67\x75\x68\x5C\xB7\xE8\x05\xC8\xDB\x68\x33\xF2\x96\xC1\x82\x57"
"\x72\x58\xA8\x84\x45\x92\xF8\x1F\x8A\x43\xB2\x18\xE3\x8A\xE4\x40\xD0\xA0\x85\xFD\xA5\x48"
"\x63\x88\x2B\xCE\x8F\x64\x8B\x0E\xDE\x18\x80\x45\x19\x96\xE8\x60\x7E\x5F\x9C\x48\xE2\x65"
"\x01\x4A\x19\x62\x80\x5B\x76\x37\xAB\x81\x7B\x6B\x97\x67\x6C\x33\xDA\x17\x66\xB7\x80\x96"
"\x48\xE8\xA1\x2B\x9D\x08\xE0\x8B\x4F\x16\x68\x69\x95\x11\x7A\x39\x5E\x81\xE6\x6D\x3A\x23"
"\xA9\xAF\x73\x09\x6B\x9A\x45\xDA\x7A\x2D\x1A\xDF\xE2\xFA\xA2\xA3\xC5\xAE\x7A\x25\xAF\xB5"
"\x06\xDB\x2D\xB1\x2F\x02\x98\xED\xE1\x7A\x2B\x37\x23\x78\x91\x76\x54\x69\x7C\xE5\xF5\x78"
"\x20\x89\x8B\xD6\xF9\xAB\x5A\x6B\x31\x03\x59\x5D\x01\x32\x1B\xD5\xEA\xEA\xEE\xED\x6D\x81"
"\x11\x4F\x3C\xEC\xBB\xAD\xEB\x7B\x20\xA9\xA1\x46\xC8\x04\x1D\x30\xCF\x3C\x18\xF7\x04\xFA"
"\xF9\xD9\xF0\xD2\xF5\x15\xDC\x47\x3F\xB7\x2E\x74\x62\x7B\x3B\xFD\xA2\x99\x09\xF2\xBC\xF4"
"\xD4\x49\x17\x1D\xF4\xD8\x31\x3A\x58\x75\x00\x84\xCE\x19\x22\x9E\x1D\xC7\x70\x22\xA1\x43"
"\xB7\xB8\x68\xDE\xFF\x91\xDB\x6F\xAF\xD6\x85\xF5\xD3\x04\xC7\x5D\x5C\xA2\x45\xB5\xC9\x93"
"\xAA\x64\xD1\xA5\xBD\x21\xE8\xA5\x5F\x8A\xFA\x57\xAD\x5F\x68\x69\xA6\x11\xFA\xBE\x72\x87"
"\x90\x2B\xDA\xF0\xEF\x1A\x8F\xBB\x25\xE2\x9D\x65\x89\x7D\x72\xD7\x4F\x9F\x2E\xE3\xC7\xB6"
"\xA5\x8C\xE5\x09\x72\x75\x7C\x8B\xDE\x17\x8A\x7E\x8F\xFA\x57\x3C\x8F\xB8\xED\x63\xEA\xE3"
"\xC8\xD1\x1C\x77\xBB\x85\xBC\xAC\x5C\xEC\x4B\x17\xF0\xBA\x77\xBC\xD7\x50\x4F\x79\x6B\x93"
"\x0C\x6A\x22\x28\x33\xD2\x3C\x64\x02\x0E\xFB\xDF\x42\xBC\xB5\x3F\x73\x79\x50\x22\xDF\x03"
"\x96\xA5\xD4\x46\xB0\x8A\x5C\x0E\x73\x48\x18\x52\xFB\x6A\xA6\x36\xE7\xD5\x6B\x7B\x74\x91"
"\x9C\x47\x10\x98\xB4\x95\xE4\x30\x60\x2C\xE1\xE1\x3F\x6E\x88\x11\xFC\x09\xA4\x79\x3E\xAC"
"\xE1\x5B\x82\x78\xC0\x23\x12\x6D\x46\x0F\xA2\x5D\xEE\x42\xD6\x10\x6B\xE9\x47\x68\x33\x5C"
"\x9D\xE2\x04\x92\xC3\x72\xB1\x2C\x8A\x8C\x61\x61\xE6\x4C\x30\x90\x2F\x66\x2E\x73\x5D\xA4"
"\xC8\x04\xC0\x98\xAD\x34\x8E\x8D\x82\x19\x1A\xE2\xBE\xAC\x48\x2B\x19\x46\xA4\x88\x74\x9C"
"\xA3\xB8\xEE\x08\x11\x13\x0A\xD0\x53\x03\x12\x21\x0A\x7B\x86\x28\xA7\xC5\x4C\x24\x7B\xB4"
"\xDB\x4A\x0C\xA9\xC0\x8D\x24\x32\x83\x1A\x61\xE4\x47\x86\x78\xC1\xEA\xB1\xE4\x91\x88\x6C"
"\x94\x22\x29\x42\xC0\xBD\x19\x30\x2A\xF2\x03\x56\x15\x5F\x37\xB5\x95\x0D\x68\x59\xAC\x9B"
"\x88\x17\xB6\x91\x4A\x55\xA6\x52\x18\xEB\xD9\xC4\x2A\x55\x79\xAB\x9A\x39\x03\x96\xAA\xB4"
"\xDA\x42\xAE\xF0\xA6\x54\x0E\x28\x70\xB5\x60\xD4\x3C\x00\x53\x91\x09\xD4\xA2\x96\xAD\x04"
"\x00\x12\x6A\xB1\xBD\x79\x74\xEA\x2C\x65\xF0\x64\x91\x28\x92\x3C\x37\x5A\x10\x00\x20\xE3"
"\xC8\xB8\xB8\x55\x83\x64\x92\x12\x6E\x4C\xB4\xE3\xB6\x00\x60\x48\x67\x08\xD2\x75\x7A\x64"
"\x94\x84\x78\xF8\x47\x82\x48\xAD\x16\x77\x81\xE3\x4A\x02\x58\x23\x78\x7A\x92\x2E\x71\x14"
"\x26\x3D\x1F\x27\x92\x78\x66\xAD\x23\x91\xC4\x5D\x0D\xED\x79\x4F\x52\x05\x74\x22\xFB\x24"
"\x68\x43\x6C\x47\x3A\x28\x76\x64\x51\xCA\x01\xA5\x48\x20\x18\x10\x8B\x81\x0A\x20\xBC\x53"
"\xE7\xE4\x52\xE8\x33\x4F\x9A\x0F\x6F\x05\xC5\x67\xE2\x74\x97\x2D\xF9\xCD\x83\x13\xE7\x00"
"\x1D\x1D\x7C\x19\x9E\x8B\x66\xB1\x8D\x0A\xB3\x60\x7C\x3E\x18\xCD\x1A\x8E\xE7\x87\xD7\x29"
"\xE7\x43\xF6\x25\x1C\x43\xCA\xF3\xA6\x0E\x31\xA4\xF1\x26\x3A\xB1\x5B\x26\x04\x6B\xD8\xB2"
"\xA6\xEC\x1A\x15\x52\x8A\xD0\x0D\x3A\x66\x7C\x08\x53\x09\x84\xD4\x73\x3A\x55\x21\xFE\x3C"
"\xAA\x54\x07\xA4\xD4\x53\xAA\x4A\xAB\x3E\xC5\xA2\x44\x39\xD9\x2D\xBA\x34\xE8\xA1\x21\xB1"
"\x28\x62\xB0\x76\xC8\x84\x56\x44\x62\xE5\x8A\xA8\x24\xA9\xE9\xD1\xDE\xF5\x26\x89\x0A\xD9"
"\xE7\xD0\x30\x89\x10\x69\xBA\x54\x59\x3D\x0D\xDA\x4C\xBB\xC9\x28\x1B\xC9\xAF\xAE\x07\xC9"
"\x69\x38\xBF\xE5\x05\xBF\x32\xA4\x92\x00\xF9\xE1\x4A\x05\x32\xC6\x8E\x4D\x12\xA6\x2C\x09"
"\xAA\x0A\x33\xA6\x2A\xC8\x3A\xE4\xB2\x0F\x2B\x19\xA9\x36\x9B\x90\x48\x56\xD6\xB2\x9A\x1D"
"\xAA\x45\x3A\x2B\xD4\x26\x12\x52\x68\x85\x75\x59\x0A\x5B\x53\xD6\x90\x68\xF2\x87\xE3\x59"
"\x94\x6B\x13\x72\xDB\x41\x72\xF2\xAC\x02\x9D\xEB\xFC\xE4\xFA\xDB\x7A\xFE\xAE\xA5\xD5\x5C"
"\xDB\xF9\x36\x72\xD8\x9A\xDA\x94\xB0\x46\x03\xAC\xFE\xB6\x61\x52\x24\x2E\xD6\x7B\x03\x35"
"\xD7\x47\x3D\x7B\x35\x1A\x1D\x86\x67\x5D\x7D\xED\xB7\x0E\x2A\x47\xF0\x86\x24\xAD\x71\x5D"
"\xAD\x75\xFB\x49\xCD\xEE\x52\x55\xBC\xAA\x0A\xAF\xC1\x52\xA8\x37\x86\x7E\xD5\x61\xA1\x0D"
"\xDF\x57\xFF\x49\x97\x4D\x90\x91\xBF\x3A\x60\x6F\xDE\x6C\x08\x10\x43\xB6\x48\x93\x32\x75"
"\x22\x58\xF1\xFB\xD6\xE0\x0A\x57\x94\x1C\xC4\xAE\xE3\xBC\x1B\x43\xB7\x68\x03\xA5\x6F\x49"
"\x85\xDA\x70\x1B\x91\xC3\xEA\xAF\x0C\xFD\xF5\x6F\x60\x75\x88\xD3\xE7\xE6\x93\x39\xCE\x30"
"\x41\x73\xAB\x45\x2A\x58\x41\x15\x7C\x1A\x4E\xA5\x33\x6C\x21\x08\x28\x39\x02\x61\x43\x40"
"\x2E\x48\x00\x06\x08\x4F\xE6\x35\x93\xBD\xD1\xF1\x81\x3F\x92\xE3\x1D\x37\xB2\x55\x3E\x1E"
"\x72\x7A\x95\x25\xE0\x0D\x52\xD2\xC8\x40\x1E\x60\x93\x09\xC9\x11\xDE\xA5\xA6\xB5\x00\x3C"
"\xB2\x63\x97\x18\x9E\xF7\x02\xB2\x5F\xC6\x9D\x6A\x6F\x7D\x5B\x63\x09\x77\x54\xB7\xBE\x65"
"\xA5\x49\x64\x6C\x06\x3A\xBC\xD0\x44\x48\xC8\x5C\x19\x8E\x18\x61\x10\x33\xD8\x77\x12\xE9"
"\xEC\x3C\xD8\xCC\xBD\x8F\x6C\x38\x9F\x06\xA1\xAE\xBE\x46\x4C\x4D\x7B\x99\x18\xC5\xE6\xB4"
"\xEE\x3E\x21\xFB\x43\x73\x10\x01\xC3\xEE\x1B\x32\xC0\x62\x1A\xE6\xEA\x41\xFA\x23\x53\x86"
"\x11\x70\xAD\xEC\x44\x4A\x73\x04\x7F\xE3\xCA\x30\xFF\x1E\x1D\xD6\x4E\x6A\x5A\xD4\x1A\x69"
"\x68\x7D\x4F\xAB\xE1\x23\x02\x6D\xB9\x49\x6E\xD8\x58\x87\x50\x5E\xA6\x1D\x4C\xCE\x93\xFA"
"\x2A\xBC\x1A\xD4\xD6\x1D\x1E\x91\x66\x0E\x93\x33\xF1\x84\x41\x07\x1D\xE0\x2E\xBE\xCE\x10"
"\x84\x7F\x2D\x4D\x5C\x46\x9D\x03\xA0\x78\x09\xB4\xAB\xFD\x5C\x68\x11\x83\xD3\x55\x0E\xDD"
"\x1E\xA1\x91\x58\x42\xD3\xB2\xB8\xC5\x10\xF9\x21\x23\xF4\x97\x6A\x8B\x54\xB9\xCA\x38\x5C"
"\x75\x7E\xB3\x6D\xEE\x00\x97\xBB\x23\xE4\x3E\x37\xA7\x2D\xE8\x2A\x1E\xD3\x70\xDD\xEF\x6E"
"\xF7\xB9\xD9\x2D\x65\x4F\xCE\xC3\xDE\x1C\xD9\x34\x96\xF9\xB5\xE5\x82\x40\x7A\x5E\x9C\x98"
"\x69\xBE\x0D\xDC\x65\x13\x0A\x67\xAD\x10\xE5\xF5\x26\xBB\x5C\xA8\x8D\x42\x9C\x73\x70\xD5"
"\xF3\xEF\xF2\x8C\x30\x47\x78\x2B\x35\x13\xB8\x42\x95\xA0\x84\x84\x71\x3F\x3B\x39\x08\xF9"
"\x73\x42\xF8\xEC\x96\xFD\xEA\x60\x73\x44\x3B\xF9\x7D\x55\x15\x8C\xF8\xC2\xDA\x68\x19\x47"
"\x18\x20\xDE\x59\x03\x90\xFF\x77\xE0\xEA\x03\xB3\xBF\x7D\xBE\x6F\x71\x3F\x84\xD2\x3F\x5F"
"\x64\xD0\x69\x2E\x56\x65\xED\x2B\x18\x20\x97\x52\x98\x32\x52\x74\xA1\x3F\x19\xB8\x46\xDF"
"\x08\xB7\xED\x7B\x90\x86\x03\xFC\x5E\x02\xC7\xD5\xAA\x5D\x85\x6D\xA2\xFD\x5B\xD2\xDC\xEB"
"\xDF\x6F\x10\x2E\xCC\x8F\x3B\x7D\x70\x6F\x59\x79\xE6\x7C\xED\x54\xDE\x15\x2D\xEE\xBB\xC5"
"\xA0\x45\x4C\xB0\x76\x29\x0D\x3B\x3E\x8C\x18\x55\xCF\x22\x8D\x72\x92\xCB\x53\xA4\xE9\xF6"
"\xF6\xE0\x07\xA4\x58\x69\x7B\x35\x71\xF3\x90\xAE\x98\x2B\x82\x39\xBD\x9B\x41\xE4\x5E\xAE"
"\xDE\xC0\xBC\xCE\xE5\xBB\x23\x76\xB8\xD7\x4C\x21\xAC\x0A\xAC\x91\x86\x87\x5E\xBB\x40\x26"
"\xFD\x45\x90\x50\x25\x24\x70\x9C\x0E\x59\xFE\x87\x8A\x2E\x32\x7A\xFC\x8A\xFE\xF3\x19\x3A"
"\x7D\x46\xF6\xF9\xE9\xA7\xD2\x95\x59\xAE\x9F\x3D\xCA\x52\xA8\x0D\x9B\xFF\x46\xDE\x57\x6E"
"\x5B\xDC\x78\x08\x21\x70\x5E\xA4\x06\x36\xFF\xED\xAF\x27\x2E\x90\xBA\x5B\xBC\xCE\xC6\x92"
"\x9F\x33\x5A\xAE\xD2\xA1\xF7\x9E\xDA\x7D\x2E\xC8\xCB\x0D\x8B\xF8\xC8\xCD\x19\x88\xDA\xA6"
"\x8B\x1C\x1E\x5C\x23\x54\xC3\x67\xB8\xC8\x99\x37\xF9\x78\xCF\xF5\x8A\x9B\x3A\xFE\xE8\x9E"
"\xFF\xDC\xEA\xBF\xD0\xAB\xE7\x3F\xCE\x3C\xCF\xED\xFC\x78\xA8\xD6\xA8\x86\xFF\x8A\x85\xFE"
"\x02\x4C\xFE\x9A\x8A\xFD\x7E\x69\xFB\x38\x4B\xD4\x84\x66\x1E\x6A\x69\x95\x00\x41\xE9\x1A"
"\x45\x38\x96\x4B\x00\xB9\x0F\x89\xA0\x0A\xFD\x9C\x6C\xA9\x7C\x0F\xA4\xE4\x2E\xFA\x10\xEC"
"\xFE\xAC\xE5\xFD\x20\x85\x2E\x84\xE1\x03\xCB\xCF\xB9\xBA\xCF\xBC\x5A\x67\xF1\x1A\x22\xE5"
"\x18\x65\x13\x54\x02\xFC\xFE\x25\x6E\xA0\x2A\x35\xD6\xCF\xFA\xFA\xA5\x56\x32\xAF\x8F\x30"
"\x8D\xFC\xBA\xED\xD5\x82\xD0\xEA\xAE\xA8\x08\xA7\x8E\x02\x09\xC7\x08\x0F\xA7\x5F\x6A\xEB"
"\x08\x97\x4F\x08\xB3\x8E\x20\x74\xAD\xA2\x92\x90\x07\x07\x44\xF7\xE0\xAB\x03\xED\x0F\xDA"
"\x42\xC9\x74\x8E\x42\xD6\xF8\xE9\x22\x78\x47\x1B\xD2\x2F\x05\x0B\x70\x22\xC4\x10\x69\xA0"
"\xEF\x00\x47\x30\x01\xA9\xEF\x90\x3C\x0F\x89\x26\x8B\x28\x36\xC1\x0C\xD2\xC7\x04\x59\xAA"
"\x05\x89\x22\x18\xCC\x02\x73\xCC\x40\x10\xEC\x87\xFC\xB4\x10\x01\xFD\x87\xF3\x88\x42\xF8"
"\xF2\xC9\x06\x7B\x0E\xB8\x2E\x2B\x2E\x76\x90\x23\x2A\x8B\x52\x30\x50\xF3\x26\x29\x0E\x57"
"\xB0\xF4\xA2\x0C\x11\xBD\x49\x13\x37\x4F\xC9\xDC\xB0\x76\x6A\xCF\xEE\x3A\x71\xBE\xC0\x09"
"\x2D\xAA\xA4\xED\x4A\xAE\x22\xB6\x8E\x13\x1B\x0C\xF8\x3A\x10\x60\x0A\xF1\x7A\xFC\x88\x01"
"\xA5\xC8\x71\x7E\x30\x06\x55\xB0\x35\x52\x2B\xF0\x1E\x22\xB5\x9C\x01\x3D\xD0\xAB\xC8\xE8"
"\xEC\xFE\x1C\x62\xEE\x28\x0E\x0E\x41\xF1\x13\x8F\xAE\xC6\x28\xA5\x45\x2E\x25\xD1\x00\x8B"
"\xDB\x06\xCB\xF0\xA6\x0D\x53\xAA\xCD\x5E\x4E\x84\x11\xF3\x47\x7D\x72\x28\x34\x22\x91\xF6"
"\x7A\x10\x6C\x7C\xD1\xD0\x90\x46\x0F\x13\x62\xA7\xC0\xD0\x91\x12\x07\x1D\x61\xEE\x1C\x89"
"\xEC\xBB\x4A\x91\x0A\x5D\x30\xC5\xEA\xC6\x1D\x0F\x42\x1D\x61\xA7\xD2\x3E\x6A\x16\x19\x07"
"\x17\x5D\x22\x9E\x12\x24\x07\xE3\x11\xFE\x1A\xE5\x37\xEE\xCC\x16\x07\xE2\xAE\xD8\x30\x04"
"\x43\xD1\xF2\x94\xD1\x15\xAB\x4F\x23\xF6\x85\xF8\xBC\x29\x1A\x15\xF2\xB0\xC4\xB0\x1A\xE7"
"\x51\x17\xF9\xB0\xE4\xBC\x85\x23\x5F\x91\xB1\x0C\x68\xA2\xC6\x23\x1C\xA3\x6E\x83\x3E\xA5"
"\xE9\xA4\xE4\x4A\xCE\x28\xFD\x12\x0F\xF7\x60\x32\x3C\xCA\xF1\x1F\x13\xA7\x26\xED\x6A\x26"
"\xAD\x03\x27\x19\x0F\xB3\xBE\x2F\xFB\x0E\xF1\x25\x1D\x87\x27\x4D\x4E\x27\x4B\xCD\x00\xB9"
"\x90\x22\x55\x90\x9B\x5C\x62\x8F\x24\xE5\x87\xFC\x51\xEB\x66\xCE\x59\xC4\x89\xE7\xA6\x0C"
"\xEA\xBA\x70\x28\xDE\xCE\xC3\xD6\x48\xE2\x1E\x72\xFA\x96\xF1\x12\x95\xD0\x77\x9E\x71\xCC"
"\x54\x4B\xD5\x96\x6F\xA7\x44\x32\xC4\x1C\x42\x06\x4B\xCE\x5E\xB8\x0B\x06\x49\x12\xD3\x5E"
"\xC6\xA8\x92\x4E\x29\xB3\x6D\x5D\xE6\xC1\x0A\x1A\xA7\x12\x5B\x6D\xFC\xE8\x2D\x71\xA2\x32"
"\x03\xEB\x66\x30\xF7\x50\x30\xEF\xCD\x1A\x07\xA2\xF9\x98\x11\x2D\x11\x33\x30\x0B\x13\x7D"
"\x7E\x6F\x2C\x87\x26\x17\x69\x71\x74\xAE\x4B\xB0\x90\x6C\x76\xB2\xB2\xF3\x58\x31\x85\x8A"
"\x46\xB6\xB0\x70\x1E\xC1\x52\x22\xE5\x10\xFF\xF2\xA9\x2C\x01\x00\x23\xE5\x11\x86\x00\xC1"
"\xF5\x20\x70\x02\xB9\x11\xA3\x3E\x92\xF0\x5C\xC5\x3C\xE4\xB2\xBA\x82\x70\x8A\x4A\x03\x25"
"\xA1\xF0\x61\x06\x06\x37\x23\xD2\xCE\x7A\x67\x0A\x21\x12\x69\x8C\x33\xB5\x6A\x51\x88\x8A"
"\x53\x21\x11\x82\xE3\xBA\xE7\x35\xBD\x8F\x38\x1D\x27\x39\x9B\x13\xC7\x8E\x52\x14\x7B\xC7"
"\x32\x19\x22\xAD\x8A\xC6\x84\x8C\x13\xC0\xC2\xA3\x45\xFA\x67\x0A\x0F\xA6\x68\x36\xA5\x1E"
"\x47\x4D\x31\x4B\xB3\x04\x0B\xB2\x21\x78\x06\xF4\x2E\x72\xBB\x14\xB2\x8E\x02\xA2\x4D\x42"
"\x2E\x73\xD6\x29\x8F\xDA\xCB\x0B\x11\x8A\x3F\x7B\x92\x70\x3C\x4D\xFA\xEE\x12\x23\xFA\x2E"
"\x2B\x85\xC1\x16\xA8\x67\x1E\x98\x82\x22\xD6\x90\x29\x3F\x73\xAE\x7E\xF0\x41\xB5\x2C\xF6"
"\xA6\x72\xBC\x90\xD2\x3F\x01\xA2\x06\x46\x6A\x02\x23\x74\x3B\x2D\x54\x42\xB1\x33\x08\x25"
"\xB1\x67\xE0\x44\x18\xEE\xF1\x3D\x13\xA2\x7F\x68\x86\x6E\x2A\xD1\x12\x77\x33\xAB\xFC\x8F"
"\x78\x60\xCC\x19\x5C\x4F\x1B\xDC\xAC\x85\xA0\x84\x0E\xBE\x44\x18\xB6\xC1\x19\x54\x74\x21"
"\x45\x90\xAF\x48\x30\x29\x2B\x82\xB4\x5C\x11\x1A\xE9\x53\x83\x10\x46\x96\x04\x26\x84\x9C"
"\x33\x84\x9C\xD4\xAE\xA0\xD4\xFC\xA2\x10\x84\x0A\x14\xD4\x62\x66\xB9\x88\x72\x00\xC7\x2A"
"\x4E\xE8\xA9\x12\x23\x05\x4C\x3B\x6A\xA9\x4C\x14\x4E\xC2\x94\xE7\xC6\x14\x4D\xCB\x54\x4B"
"\x1B\x13\x00\xD2\xB3\x28\xB0\x72\xAB\xBE\x94\x4D\xD3\xF0\x79\xCE\x54\x2F\xD2\x34\xC8\xB2"
"\xF3\x37\x35\xD4\x10\xBF\x05\x1F\x1B\xB1\x67\x0A\xA6\xA8\x20\x89\x33\x01\xF5\x4F\xBD\xB2"
"\x18\x2F\x6E\x51\x49\x33\x0D\xDD\x53\x1C\xE7\x4F\x35\xF5\xD2\x39\x23\x25\x02\x31\x75\x1B"
"\xDA\x74\xF7\xC6\x2A\x53\x23\x70\x53\x6F\x91\x44\xAB\x2A\x4B\x8F\x14\xD3\xB8\x54\x64\x26"
"\xB3\x4B\x32\xCA\x39\xDF\x50\x51\x57\x73\x55\x51\x2B\x55\xCD\xD2\x27\x99\x74\x3A\x89\x08"
"\x56\x0D\x54\x54\x87\x49\xBF\xFC\xEF\x38\x57\x11\x46\xCF\x12\x55\x3D\x73\x3F\x49\x35\x25"
"\x45\xF5\xAF\x8A\xB5\x33\x55\x45\x50\xBF\x0E\x5A\xDE\xC3\x24\xF9\x14\x30\xAD\x90\x26\x8D"
"\x95\x51\x4F\xD3\xC1\xBE\x12\x52\x8D\x14\x72\x08\x67\x94\xDC\xA2\x16\xD6\xEC\x4D\xE1\xD3"
"\x28\x55\xA5\x4B\x33\xB3\x18\xCD\xD5\x34\xF9\x88\x21\x7C\x53\x0D\xD5\x26\xB6\x96\x32\x5D"
"\x1F\xD0\x6A\xF8\xA6\x22\xE6\xF5\x39\xEB\x8F\x05\x97\xAC\x80\x1E\xF2\xF0\x92\x95\x48\x3B"
"\xB2\x35\xA3\x8A\x40\xDD\xAE\x4A\xE6\xB4\x2D\x8F\x48\x65\xEA\x35\xE1\x20\x8F\x5F\x15\x93"
"\x1D\x8F\x15\x23\x70\xA6\x40\xFE\x52\x5C\x05\x36\x60\x9F\x86\x55\x05\x6F\x27\x6D\x6D\x1F"
"\xB5\xD3\x5A\x05\x15\x19\x09\xB6\x48\x37\xD1\x5E\x6B\x28\x34\x55\x70\x30\x2B\xF6\x20\x47"
"\x8E\xCE\xA2\x92\xEC\x46\x75\x5F\x2D\xC2\x5A\xCA\xC5\xC3\x90\xA0\x2F\x2B\xCF\x4A\x8D\x51"
"\x3C\x2D\x76\x2E\x23\xCE\x20\x16\x85\x59\x27\x16\x21\x82\x36\x48\x3B\xF6\x67\x0B\xA2\x68"
"\x8F\xEF\x4A\x01\x56\xBE\xCC\x71\x67\xBD\xB4\x64\x89\x0E\x54\xA3\xB6\x67\x89\x91\x69\x31"
"\x82\x78\xDE\x66\x65\x1B\xD5\x4F\x61\xE8\x30\x91\x76\x3D\x65\x56\x59\x33\x31\x57\xFD\xC8"
"\x42\x60\x26\x64\x87\xD4\x57\x4F\x28\x2C\xBB\x96\xAD\xC6\x56\x5D\x69\xB5\xE6\x84\x8B\x99"
"\xEC\xD5\xF9\x90\xC6\x6E\xED\x11\x6B\xF1\x35\x6E\xF5\x75\x24\x85\x74\x38\x8F\x91\x9E\x9C"
"\x87\x81\x16\x4C\x3D\x6F\xB5\x4F\x73\x52\x56\x55\x55\x71\x57\x94\x70\x89\x2A\xBE\xD2\x55"
"\x5D\x4E\x16\x08\x21\x14\x5B\x87\x15\x58\x83\xD2\x51\x11\xB7\x71\x23\x76\x69\xF9\xB6\x65"
"\xFD\x36\x51\x55\xCC\x68\x89\xD6\x63\x03\x37\x73\x81\xEE\x4E\x0D\x37\xB9\xF0\x56\x1B\x92"
"\x44\x2A\x96\x12\x02\x9D\xA1\x49\x24\x42\x64\x5B\x95\xA2\xE2\x90\x59\xAB\x96\x2D\x03\x42"
"\x3A\x7B\x43\x1B\x34\xD6\x5C\x54\x11\x69\x70\x14\x55\x8A\x77\x68\x8E\xF7\x6A\xBB\x35\x66"
"\x1B\x16\x6E\x9F\x37\xDA\x04\xD7\x23\x47\x77\x64\xA1\x76\x21\xEE\x55\xB4\xA8\x16\x7B\x13"
"\x76\xA8\x24\x46\xCE\xB2\xB7\x6F\xC3\x16\x22\xAA\x94\x1E\x35\xD3\x31\xA3\xD7\x72\xAF\x17"
"\xD0\xFE\x35\x77\x75\xB7\x19\x43\x57\x82\x74\xE3\x49\xF6\xCE\x20\x52\x0F\xE4\xAE\x40\x3F"
"\x3F\x64\xF2\xA2\xE4\x60\x2F\x22\xEF\x9C\x2E\x80\x55\x0F\x24\x00\x58\x80\x0D\x38\x67\x39"
"\x64\xF2\x5C\x52\x7E\x07\xE5\x7E\x0D\xD8\x0C\xFC\x97\x81\x25\x78\x82\x29\xB8\x82\x2D\xF8"
"\x82\x31\x38\x83\x35\x78\x83\x39\xB8\x83\x3D\xF8\x83\x41\x38\x84\x45\x78\x84\x49\xB8\x84"
"\x4D\xF8\x84\x51\x38\x85\x55\x78\x85\x59\xB8\x85\x5D\xF8\x85\x61\x38\x86\x65\x78\x86\x69"
"\xB8\x86\x6D\xF8\x86\x71\x38\x87\x75\x78\x87\x79\xB8\x87\x7D\xF8\x87\x81\x38\x88\x85\x78"
"\x88\x89\xB8\x88\x8D\xF8\x88\x91\x38\x89\x95\x78\x89\x99\xB8\x89\x9D\xF8\x89\xA1\x38\x8A"
"\xA5\x78\x8A\xA9\xB8\x8A\xAD\xF8\x8A\xB1\x38\x8B\xB5\x78\x8B\xB9\xB8\x8B\xBD\xF8\x8B\xC1"
"\x38\x8C\xC5\x78\x8C\xC9\xB8\x8C\xCD\xF8\x8C\xD1\x38\x8D\xD5\x78\x8D\xD9\xB8\x8D\xDD\xF8"
"\x8D\xE1\x38\x8E\xE5\x78\x8E\xE9\xB8\x8E\xED\xF8\x8E\xF1\x38\x8F\xF5\x78\x8F\xF9\xB8\x8F"
"\xFD\xF8\x8F\x01\x39\x90\x05\x79\x90\x09\xB9\x90\x0D\xF9\x90\x11\x39\x91\x15\x79\x91\x19"
"\xB9\x91\x1D\xF9\x91\x21\x39\x92\x25\x79\x92\x29\xB9\x92\x2D\xF9\x92\x31\x39\x93\x35\x79"
"\x93\x39\xB9\x93\x3D\xF9\x93\x41\x39\x94\x45\x79\x94\x49\xB9\x94\x4D\xF9\x94\x51\x39\x95"
"\x55\x79\x95\xC1\x58\x0A\xA8\x82\x06\x63\xE2\x58\xFE\xA2\x57\xBF\xEF\x4C\x96\xC2\x2A\xF2"
"\x58\x96\xA9\x62\x78\x59\xB9\x27\xFC\x82\x2A\x52\x21\x82\x57\xF9\x60\xB8\x93\x7A\x9B\xB7"
"\x44\x1F\x16\x80\x6C\x59\x29\x52\xE2\x4F\x96\x82\x97\x35\x44\x4B\x96\x62\x4A\xA5\xA5\x5F"
"\x7B\x59\x30\x70\xF7\x9A\xA7\xB5\x7D\xA9\x2E\x60\xE1\x2D\x7D\x47\x53\x59\x0E\x66\x72\x3B"
"\x64\x5C\x78\xF7\x17\xA5\x56\x9B\x91\xA7\x86\xCE\x79\x93\xBF\xA7\x9D\xC7\x35\x9D\xE7\xB0"
"\x73\x9B\x30\x6C\xC6\x99\x81\x69\xD6\x25\x0E\x4B\x9D\x07\x23\x9F\xF9\x99\x6C\x7D\xD7\xD9"
"\xE2\x17\x99\xA7\x57\x6C\xC5\x39\x85\xC8\xB9\x43\x66\x13\x74\x03\xFA\x9F\x77\x26\x37\x57"
"\x39\x38\xAD\x60\x7B\x12\x3A\x54\x01\xF7\x50\xE7\x36\x9C\x93\xE3\x9E\x19\x58\x1B\x4D\xF7"
"\x70\xAF\xD5\xA1\xB3\xC2\xA3\x1D\xFA\x53\x42\x83\x52\xE0\xF9\x71\xAD\xB6\x23\x7C\x50\x9F"
"\x3C\x89\x11\x38\x1A\x9F\x07\x3A\x31\xBF\x56\xA4\xB3\xC2\x55\x2A\x5A\x93\x93\x02\x4C\x02"
"\x62\x99\x6D\xC1\x43\x43\xA2\x06\x9C\xD9\x24\x70\xF9\x38\x60\xC9\x98\x42\x82\x7F\xA1\xA4"
"\x06\x3C\xCE\xE9\xC2\x48\x82\x83\x13\x26\x18\x01\x96\x4E\xC1\xA6\xB7\x42\x97\x4F\x82\x4B"
"\xAC\x7A\xAB\xD5\x05\x96\x80\x94\x89\x0D\x85\x99\x6F\x22\xF5\xF0\x24\x7B\xF6\x42\x4D\xB8"
"\x1A\x26\x52\x6F\xA8\xE3\x84\x0E\xE8\x44\x04\x20\x61\x0E\x20\x63\xAD\xCD\xDA\xAD\x69\x59"
"\x20\xE8\x3A\x7B\xEC\xBA\x23\xF2\x5A\x7A\xF6\x9A\x23\xFA\x3A\x4F\xFE\x7A\x23\x02\xBB\xAD"
"\x05\xC5\x22\x7E\x79\x97\xBD\x63\x5A\xD8\x63\x5F\xCB\x57\xD9\xAA\xD7\x7D\xCB\x96\x83\x92"
"\x77\x0C\xC1\x16\x7E\x34\x42\x9B\xEA\x46\x1B\x84\x79\x6A\x61\xC6\xD8\xEE\x5A\x1F\xDD\xE2"
"\x1C\x1C\xE1\xA9\x7B\xCC\x9A\x3B\x87\x9E\xCC\x55\x16\x55\xFA\x73\x17\x17\xB5\xBD\x35\xB2"
"\x19\x82\x24\x1E\xEF\x92\x3E\xFA\x20\x34\xBB\x6E\xAA\x9A\x7F\x1C\xA1\xB6\x3F\xFB\xBF\x72"
"\x9B\x5F\x60\x17\x23\x82\xFB\x5E\x86\x9B\xF9\x52\x4A\xB8\x05\xC9\x22\x8A\xFB\x5B\x8E\x9B"
"\xB9\x93\xDB\xB8\x97\x5B\x67\x6B\x7A\xB6\x00\xF2\x9B\xB9\xB9\x9E\x2F\x31\x3E\x6F\x7B\x9B"
"\x6D\x95\x36\x5D\x3B\x21\xEA\xF0\xBB\x7D\xF5\x45\x03\x22\x4E\x87\x66\x0A\x45\xFB\xE6\xAA"
"\x15\x69\xBC\xCE\x66\x4E\xF7\x4E\xFF\xB3\x7D\xB9\x08\xB2\xF9\xF6\x65\x32\x6F\xBD\x43\x9A"
"\x61\x0B\x93\xBD\x18\x13\xC2\xD8\x8B\x6B\x89\x62\xB7\xF9\x1B\x66\x08\xDC\xBE\x87\xE6\xC0"
"\xFF\x36\xC1\x45\x37\x6F\x4F\x7B\xA6\xE1\xD7\xBD\xE7\x99\x71\x95\x28\xE2\xC6\xA5\x12\x87"
"\xF6\x20\x94\x16\x7D\xD5\xF3\xC6\x4A\x75\xAE\x30\xDC\x71\x14\x9C\x5B\xEB\xC6\xEB\x6E\xCF"
"\xBB\x8F\x39\x40\x5D\x95\x78\xC8\x19\x60\x4E\x47\x62\x78\x57\xBF\xF7\xFB\x62\x1B\xD2\x5D"
"\x41\x9C\xAA\x28\xD4\x71\x23\xB7\x77\x26\x37\xC7\xC3\x5B\x21\x7C\x1C\xC2\xA3\xE6\x42\x49"
"\x25\x5D\x61\xD6\xBA\x13\xA7\x98\x63\x1B\x75\x51\xE7\x57\xE3\xC3\x30\x5F\xB5\x7D\x17\x96"
"\x3A\x6D\x75\xA1\x77\xFC\xB7\x12\x5A\xC6\xE9\xD9\xA2\xEB\x26\xB4\x5A\xF1\xB2\x07\x96\xC6"
"\x67\x5C\xFF\x40\xFA\x57\x49\x97\x9C\x83\x3C\xA5\xB5\x7C\xA5\xD3\xF1\xF9\xA8\x6A\xCD\xC5"
"\xF2\x69\x53\x94\xC4\xE7\x9C\xBA\xE1\x91\xCE\xEF\x7C\x6F\x61\x86\xB4\x4D\x1B\xCF\x03\xCE"
"\xA0\x75\x5C\x62\x63\x54\xC8\xB1\x54\x75\x3D\x17\x9C\x63\xD0\x7E\xFC\xC9\x6D\x87\x70\x66"
"\x19\xCC\x30\xE1\x7C\x22\xED\xBC\x32\x99\x57\x51\xAB\xF0\xC1\x11\xF7\xD2\xCD\xF4\x2E\x89"
"\x07\xD2\xF3\xDC\x4D\x79\xBC\xCC\x6B\x9C\x73\x6F\xF2\x76\xC9\x95\x63\x49\xBD\x6E\xCC\x95"
"\x21\x63\x32\xD5\x91\x66\xB5\x41\x14\xD3\x29\x1D\x2F\xB3\xB0\xB4\x1A\xF6\xB1\x3F\x7C\x7C"
"\x0B\x67\x7B\xD1\xD9\x3F\xED\x93\x0C\x3D\x69\x79\xB3\xA5\x34\xF5\xBC\xC4\x1D\xBD\x77\x04"
"\xF0\xCB\x95\xB5\x12\x95\x9D\xCC\xA1\x37\xE2\x5C\xBC\xBB\x9B\x36\x50\xA5\xFD\xD0\x47\x9B"
"\x13\x40\x4E\x10\x50\x94\xC2\xAF\x1C\xD9\x9D\xEA\x65\xCE\x01\xDB\xAB\x84\x0E\xB6\xDD\xD0"
"\x17\x28\xBE\xC2\x1D\xE4\xC8\xDD\x69\xB7\x90\x2E\xD2\x7D\xDC\xCB\x9D\xBC\x81\x1C\xDD\xC5"
"\x5D\x4A\xD6\x9D\xDB\xA5\xB2\x37\xDE\xDD\xDE\xE3\x7D\xCB\xF3\x51\x44\xFD\xBC\xEB\x22\x7C"
"\x1D\xA3\xC2\xA7\x6B\x68\x1E\x12\xD4\x24\x0E\x3E\xE1\x6D\x57\xCC\x31\xC6\x94\x62\xD5\x3F"
"\xE5\xAD\xDA\x13\x97\xCD\x3B\x13\x03\x79\xB3\x20\xE0\x2C\x5F\x27\x1D\x63\xC6\x3B\xCE\x8B"
"\xDD\xCC\xA7\x7D\x73\x2B\x5D\xE4\xD9\x76\x5D\x61\x71\xB8\x5A\x57\x28\xE9\x42\x6F\x43\xC2"
"\xD9\x7B\xF7\xA2\xD9\x97\x65\xA1\xB3\xC1\x0B\x5A\x5D\x67\x11\xE6\x49\x51\xE6\xF5\xAA\xFF"
"\xFE\x1D\xB6\x37\x56\xD7\x19\xBD\x87\xFC\x55\xE8\x71\x7E\xD2\x61\x66\xB3\x8E\xDC\xD1\x86"
"\x51\x26\x85\x2B\xC6\x39\x7E\x56\xDF\xB6\x56\x09\x0F\x50\x8B\xB9\x22\xBB\xF3\x5D\xFF\x2B"
"\xE3\x0B\x42\xC1\x3A\xFE\x64\x92\xCD\x41\x47\x91\x72\xE5\x5B\xCC\x1F\xC8\xE7\x51\xF3\x45"
"\xA6\x9C\xE5\x2D\x3E\xED\x11\xD7\x0B\xB2\xCC\x1F\x97\x0B\x21\xE5\xD9\x20\xE5\x5D\x59\x67"
"\xB1\xA1\x7A\x1E\xE8\xE3\xFB\xEE\xD3\x8E\x21\xF4\x3E\xFC\xF8\x5E\xC3\x29\xFC\xEF\x75\x33"
"\xD6\x43\x9E\xE4\x5D\x82\xDB\xCC\xFB\x5C\xE7\x8A\x77\xBD\x7E\xD7\x07\xBF\x21\xAC\xCA\xE8"
"\xF1\xD4\x1A\x27\x40\x10\x23\xD0\xB7\xDF\xF7\xEB\xA5\xB7\xEE\x7D\x36\xA3\xDD\x37\xEB\x42"
"\x4F\xD3\x8F\xDD\xFB\xDA\xF5\xD9\x4B\x17\xD8\xCB\x5E\x01\xBF\x3B\x87\xE4\x7E\x29\xE9\xBE"
"\xED\xFB\x9E\x9E\xCF\xF3\xF2\xEF\xFE\xF6\x23\x22\xF0\x0D\x42\xF7\x4F\xD0\xDC\xA5\x9E\xE8"
"\x39\x35\xF7\x41\x13\xE9\x7F\x1B\xE9\x73\x9A\x7C\x4D\x0B\xD0\xDB\x51\xDA\x59\x3C\x75\x09"
"\xBD\xD0\x9D\xFC\xC7\x77\xDF\x0D\x81\x97\xAB\xB6\xFE\x5F\x53\x9F\xCB\xB3\x4B\x7D\xBB\xDF"
"\xC6\x59\xAB\xDF\x58\x3F\xFC\x27\x1F\x8F\x30\xD4\x6B\xDB\x16\xCC\x1B\xFD\xF7\x6D\x95\x87"
"\x62\x9F\x54\x66\x1F\xE4\xAB\x1F\xF8\xA3\x3C\x99\x63\x85\xC2\x7D\x7F\xF8\x6D\xBF\xF8\xE7"
"\x9F\xF8\xCB\x9F\x20\xBC\xFC\x0B\x28\x30\x20\x23\x00\x06\x0F\x22\x14\x61\x6E\xA0\xC0\x59"
"\x08\x1F\x42\x7C\xC8\x88\xA1\x40\x2F\x11\x0D\xCA\xA1\x18\xD0\x9C\x88\x8B\x1E\x0F\x4E\xD4"
"\x68\xF1\x23\xC9\x92\x1E\x15\x6A\x4C\xF9\xAF\xA0\xC9\x96\x00\x26\x38\x53\x29\x53\x25\x47"
"\x97\x1E\x43\x52\x74\x88\x70\xC8\x3C\x8D\x35\x6D\x7E\x9C\xC5\x90\x25\x4C\x8A\xCE\x26\x00"
"\x35\x09\x30\xA7\x41\x9C\x33\x19\x1E\x4D\x2A\x51\xE3\xBC\x21\x1E\x85\x52\xAC\x2A\x15\xA1"
"\x53\x81\x5A\x2F\x62\x65\xF8\x75\xEB\xC1\xA5\x14\x59\x86\x1D\x38\x96\x2C\x44\xB3\x43\x0D"
"\xA6\xF5\x6A\x95\xAD\x47\xB7\x33\xA3\xD2\x05\xE9\xB3\x63\x5B\xAA\x73\xC9\xDA\x15\xC8\xF2"
"\x20\xCA\x99\x3A\xA5\xF2\x7C\x1A\xD0\x61\xDC\x7F\x3F\xD9\x06\x26\xF8\xB1\x30\xC3\xC3\x40"
"\x23\xAF\x9C\xBC\x90\xA9\x54\xCC\x83\x23\x52\x1E\x68\xD9\xA6\x67\xCD\x1A\x47\xBB\x2C\x7D"
"\x72\x73\xE5\xAD\x5D\x2B\x7A\x2C\x4A\xF1\x31\xD0\xD7\x01\x47\xE6\xAD\x9D\x12\x50\xCC\xD9"
"\x7C\x73\xBF\xEC\xAD\x58\x31\xED\xAD\xA1\x05\xD2\xB6\x9D\x19\x38\x80\xB8\x2C\x5F\xAF\x65"
"\x1E\xD9\x61\xE2\xE1\x03\xF1\x92\xB5\x1D\x1D\x61\xE3\x7F\xDB\x75\x67\xFD\x0B\xB1\x7B\xF1"
"\xAD\xB2\x19\x72\xAC\xDE\x9A\xF9\xC1\xF3\x03\xD3\xF7\xE4\xCC\xBE\xBD\x70\x99\xDF\xC9\xAA"
"\x1F\x88\x9B\xAB\x5F\xBA\xAA\x0D\x8A\xA0\x8D\x62\xA8\xB9\x94\x9F\x4C\x8C\xF9\x96\xD7\x7F"
"\xA0\xB1\x26\xDA\x56\x0B\x42\x74\xDC\x62\x0F\xA6\xF4\x59\x84\x0D\x36\x44\xA1\x46\x16\x3E"
"\x24\xE1\x3F\x04\x2A\x55\xA1\x69\xF2\x81\x47\xD1\x7E\xE3\xF5\x27\x95\x72\x72\xE8\xD0\xA2"
"\x8B\x2F\xEA\x60\xC2\x7C\xC1\xED\xA5\xDC\x89\xEC\x19\xF8\xE1\x41\x39\x82\x48\x57\x77\xFF"
"\xE0\xE6\x9E\x5C\xEC\x39\x07\x80\x84\x3D\xFA\x77\x1A\x00\xCA\x3D\x85\x1D\x50\x39\xAA\xB4"
"\x5F\x77\xF7\xB9\xA4\x9D\x78\x0F\x91\xF7\x5B\x92\x1B\x4E\x79\xA5\x74\x15\x76\x39\xE3\x4E"
"\xF1\xC9\xC4\x61\x5E\xCA\x69\x63\x8B\x9A\x6B\x9E\x93\x92\x30\x6A\x96\xA1\xE1\x59\xF4\x41"
"\x45\xA6\x83\x5B\x41\xA9\x64\x63\xE5\x25\x05\x61\x87\x18\x4E\xD8\x99\x88\xAB\x29\x29\xE8"
"\x86\x23\xAE\xD7\xE7\xA0\x17\x79\x88\xE4\x47\x7E\x26\x04\xA8\x8E\x2A\xA6\x74\x23\x77\x29"
"\x26\xC5\xE4\x4C\x7C\xB2\x05\x25\x75\x76\x66\x28\xE6\x92\x87\x1A\x14\x99\x99\x0A\xA6\x74"
"\x18\x94\x4E\xE6\x55\xE4\x6B\x9C\xA2\xCA\xD4\x8F\x69\xAA\x29\x0C\xA8\xFF\xB0\x5A\xE0\xAD"
"\x51\x5E\x1A\x1E\x5D\x56\x32\x2A\x69\xAE\xE6\xD5\xE7\xD5\xAE\x8E\x9A\x67\x06\x1D\x92\xCE"
"\xB3\xAB\x36\x74\x5C\x81\x94\xA8\x9A\xE2\x2A\xED\x7C\x80\xEC\x6A\x9D\x60\x72\xBE\x45\xE3"
"\x75\x35\x48\x8A\x2C\xA1\x03\x36\x97\xE0\x96\x73\x8E\x9B\xE8\x65\x8B\x32\x58\xA8\xA2\xA4"
"\x06\xEB\xEE\xBA\xF0\xB6\x4B\x22\x69\xEC\x5E\x28\xAF\x4D\x36\x06\x85\x69\x89\xDA\x3A\xA6"
"\x65\x6E\xFC\x0A\x19\x10\x95\x3E\xFA\x0A\x97\x48\x62\x16\x1C\x70\x53\xF8\xB6\x3A\x54\x8E"
"\x05\xD5\x60\x86\xC5\x17\x5B\x0B\xD8\x69\x0D\x5B\x26\xE1\xB0\x26\xE5\xB9\xF0\x41\x61\x4A"
"\x55\x43\x2A\xB6\x08\x98\x95\x23\x17\xB3\x9C\x4A\xB6\xA7\x72\x3B\xD3\xC1\xF8\x65\xFB\x14"
"\xAC\x79\x35\x6C\xB0\x97\xCC\x0D\x91\x32\xC0\xDD\xBE\x8B\x6E\x5C\x47\x35\x4A\x56\xCE\xB2"
"\x9A\x0B\x19\xC4\x91\xEA\x9B\xDA\xD2\x84\x85\x1B\xF3\xB6\xE9\xDE\x19\x34\xD0\xF5\xAA\x7B"
"\x2F\xBD\xF9\xDA\x5B\x65\xA5\xFD\x26\x9C\xE9\xCF\x1B\x09\x4C\x97\x87\x3F\x29\x07\x33\x5B"
"\x05\xFF\xC4\x76\xD9\xC0\x11\x5C\x2C\xD9\xF3\x21\xC1\xB2\x19\x48\xEC\x29\x82\x90\x6A\x3B"
"\x9D\x53\xC3\x9F\x79\x9C\xB1\x4D\x21\x9B\xD8\xAB\x58\x3B\x83\x5C\xF3\xCF\x37\x27\x75\x74"
"\xD6\x3C\x2B\x2E\x13\xE3\x6B\xCB\xAD\x1F\xC3\xA7\x8C\xBD\x75\xDF\x73\x62\xFE\x5E\x47\x45"
"\x6B\x4C\x6E\xDE\xB1\xA2\x1B\x6F\xD7\x2D\x41\x0A\x75\xD3\xA8\x3F\x0D\x60\xD4\x86\x96\x8E"
"\x75\xD5\xF3\xC6\xCE\xF5\xE3\x2D\xF1\x7B\x95\xBF\xFB\x66\x3E\xB9\xD6\xF2\xAD\x2A\x78\x6E"
"\x39\xE2\x15\xB8\xA8\x9E\x02\x80\xBC\xA8\x65\x2D\x6C\x97\xEF\x25\x4D\xD7\xB0\x39\x48\xE8"
"\x80\x04\x27\x6D\x1A\x25\x7C\x4B\x84\x33\x24\xE5\xEE\x9B\x67\x7E\x35\x70\x98\x1D\x7E\x7C"
"\xE4\x34\xBD\x0D\xF7\xA6\xE9\x1B\x5D\x79\xE6\x7C\xD7\x55\x61\x57\xE6\xD4\xE0\xFA\xEA\x2E"
"\x39\x9E\xE1\xE8\xE7\x8A\xFF\xE7\xFD\xD0\xB7\xCE\x48\xAF\xB3\xDA\x40\xD4\x06\x3A\x02\x4E"
"\xCD\x74\xB7\x0B\x91\xE6\x98\x76\x3A\x93\xE4\x0E\x2C\xDF\xC3\x5D\xEF\xD8\x27\x95\x1F\x05"
"\xA9\x72\x33\x83\x5D\x01\x99\xF7\xC0\xDC\x48\x4F\x04\x11\x14\x55\xC1\x88\x86\x21\x4B\x71"
"\x50\x7F\x99\xFB\x58\x49\x86\xE0\x8C\x6D\x64\xEB\x1C\xDB\x98\xE1\x36\xBC\x17\xB6\x7F\x85"
"\xCF\x3B\x72\x60\x98\xFB\x66\x37\x1F\xEE\xA1\xCF\x7C\x4F\x11\x17\xEF\x72\xD8\x3F\xD6\x29"
"\x66\x2C\x07\x34\x4F\xE7\x0E\x54\x2E\xF4\x58\x10\x89\xB5\xF3\xDF\x07\x49\x92\x3A\xFB\x55"
"\xF1\x51\x01\x5C\xE2\xEF\x8E\xA8\xBA\x2C\xC6\xAF\x81\x5F\x5C\x60\x49\x46\x88\xA2\x1B\x16"
"\x31\x2B\x34\x5C\xE3\x1A\x9D\x11\x45\x9B\x9C\x4D\x4B\xCA\x21\x22\x49\xA8\x05\xB0\x0D\xD2"
"\x8E\x21\xBC\xD1\x08\x0B\xC7\xB7\xB0\xAE\xF4\xB1\x8B\x19\xB2\x63\x4A\x02\x59\xC6\x09\x2A"
"\x0C\x8D\x5E\xCB\xE1\x3C\x9C\x21\x08\xED\xF9\xD1\x3E\x88\x03\xCE\x8B\xCA\xA0\x38\x73\x58"
"\xC1\x45\x32\xE2\xE1\x70\x50\x28\x15\x0F\xCD\xA3\x16\x76\xB3\x98\x06\x57\x66\x86\xFA\xA5"
"\x30\x25\x6B\xE1\xE2\x56\x6A\xC0\x89\x19\x62\xAF\x35\xFB\x53\x9A\x18\xB1\x48\x46\x2B\x6E"
"\x71\x80\x79\xEC\x20\xD5\x42\x85\x40\xC9\xF4\x32\x50\xBF\x5C\x8E\x02\x7D\xB8\xC8\xC2\xE9"
"\x4E\x91\x14\x14\xD9\xF2\xA6\x92\xC3\xE7\x7D\x84\x90\xD6\xC1\x23\x1C\x25\xA5\x12\xF8\x99"
"\x0D\x50\x0E\x39\x8E\x27\x7F\xF9\xA9\xB1\x19\xB2\x8E\x88\x7C\x62\xF9\xD8\x02\xAC\x66\x9A"
"\xC4\x71\x74\xDC\x0A\x8C\x7A\xF8\x8F\x53\xBC\x68\x93\x33\x92\x66\xB5\x22\x89\xCC\x33\x96"
"\x33\x74\x33\x39\x11\x2B\xB3\x89\x34\x28\x92\xCE\x8B\xB6\x34\xA6\x14\x05\x2A\xC0\xFF\xE1"
"\xB2\x96\x07\x05\xE3\x45\xAE\xB8\xD0\x5B\x6A\x51\xA1\xFD\x84\xE0\xD7\x2E\x12\x42\xD7\x54"
"\x14\x9D\x06\xC9\x9F\x62\xBA\xB9\x4C\x23\x0E\x69\x3E\x3F\x1A\xA7\xFA\xCA\x17\x97\x60\xD8"
"\xED\x0A\xB4\x5C\x0F\x3D\xAF\x03\xC9\x63\xAA\x65\x92\x24\x93\x4A\x8B\x36\x41\x95\x32\xC0"
"\x08\x46\x1A\xF5\xE0\x5E\x9A\x09\xC4\x94\x40\x53\x57\xDA\xC2\x26\x45\x93\x86\x25\x92\x32"
"\x50\x26\x3B\xA4\x22\x44\x93\x72\x24\x72\x22\xE7\x8D\x00\x94\xA8\x2E\x05\x99\x40\xD9\xF9"
"\x72\x97\x57\xB5\x1D\x41\x93\x6A\xD0\x89\x4E\x75\x8A\x0E\x6C\xEA\x45\xCC\xD8\x1E\x9B\xF6"
"\x94\x52\xCC\xD4\xE8\x4F\x0D\x73\x26\x90\xC6\x74\x46\xE4\xCB\x9E\x4F\x6F\xF5\x4D\xAF\x58"
"\xA1\x3E\xE1\x6C\xA8\xBB\xE4\x90\x2D\x67\x20\x21\x30\x7B\xBD\x09\x22\x2F\x8A\x98\xF3\xF1"
"\x6A\xA7\x39\x23\x2A\xCD\x2A\x38\x9F\x9C\x9D\x63\x57\xD4\x24\x49\x96\x24\xA8\x4C\xAB\x1E"
"\x11\xAC\xC6\xD1\x26\x54\xE7\xC6\x3F\x5E\x16\x33\xAB\x98\x25\x26\x56\x85\xA9\x55\x60\x86"
"\xD6\xB4\xA3\x35\x60\x55\xC1\x07\xDA\xD2\x4E\x4A\x6C\x70\xAD\xA7\x5A\xEF\xA9\xD1\x91\x6A"
"\x6B\xB2\x65\x9D\xAD\xCE\x66\xC4\xD1\xDB\xA0\x33\x6F\x42\x9A\x85\x7B\x06\x0B\x11\x1E\x21"
"\x64\x02\x65\x58\x93\x2D\x52\x51\x06\x6B\xE5\x54\x9E\xD9\x41\x24\x94\x82\x8A\x90\xB9\x3E"
"\xC5\xA3\xEC\x31\xEB\x0F\x11\x9B\x56\xE6\x28\x87\x23\xCA\x31\xAE\x65\x01\x1A\x91\x99\x4A"
"\xED\xB5\x63\x42\xE8\x27\x39\x3B\x4B\x7D\x1A\x54\x79\xC3\x54\x9B\x7C\x4F\x4B\xDA\xE3\x1E"
"\x2B\xBD\xF7\x7D\x48\x7D\x57\xFB\x91\xFE\xC2\xD4\x88\x8C\x85\x08\x77\xC5\xE4\xA1\xB1\x0D"
"\x38\x22\xCB\x55\x53\x2C\x07\xF2\x26\x06\x6B\xE4\xC1\x6A\x4A\x05\x2A\xE7\x43\x48\xEB\x9E"
"\xB6\x20\x06\x7A\x93\x9D\xE6\x61\x8B\x49\x92\x44\x42\x18\xDE\xEE\xF7\x26\xE0\xD7\x54\xC1"
"\xF7\x67\xDA\x05\x6F\x46\x85\x38\xB6\x11\x7B\x24\x4F\x16\x39\x70\x82\xCF\xDB\x62\xC3\xC5"
"\xB5\x53\xD9\xEA\xD1\x1C\xE7\xF3\xD4\xF7\xE2\x69\x57\x2C\xEC\xF1\x61\xF9\xF8\x52\x22\x27"
"\x25\x78\x84\x65\x6F\x8C\x85\x7C\x64\x14\x17\x99\xAE\xBB\x65\xF2\x94\x41\xAA\x5B\x67\xDA"
"\xB6\x99\x98\xF1\x30\x73\x99\xEB\x3E\xF2\x5A\x54\x6E\x6D\x93\xDB\x95\x83\x3C\xC4\x66\xBA"
"\x2D\x79\xDE\x5D\x71\x44\x1A\xA6\x0D\x9C\xC2\x88\x65\x8E\x58\xD3\x0C\xDD\xC8\x62\xB8\xD6"
"\x58\x2F\xE1\x63\xF3\xC0\x6E\xEC\xDB\x51\xD6\x22\x25\x9B\x48\xE9\x4B\x1B\xE7\xBE\xC3\x6C"
"\x19\xC4\x45\x8D\x70\x97\x67\xA8\x4A\x45\xB7\x30\x5B\x5C\xEE\x32\xCA\xAE\xE9\x63\xF7\x1A"
"\x75\xB3\xAA\x94\x30\x73\x7D\x26\x56\x93\x1C\x78\x1E\x9C\x5E\x93\xA7\x0D\x8A\x28\xB1\x8C"
"\x5A\x4D\xA5\x56\xAF\x4B\x42\x9D\xEA\x4A\x07\xF0\xD4\x6A\x79\xF5\xAA\xB7\x1A\xE0\xF0\xE5"
"\x59\xCF\x39\xCC\x75\x22\x3F\xFD\xD0\x1C\xFB\x13\x2A\xD2\x32\xDE\x4E\x71\x0B\xDC\xE5\x45"
"\x66\x24\x6D\xE5\x33\x81\xE1\x0A\xE3\x88\xB4\x34\x88\xE6\xA9\xE9\x4D\x73\xFA\xA2\x9D\xEA"
"\xBA\x7B\xD8\xE6\xCF\x5A\xE7\x09\x54\x2D\xFD\x08\xCC\xD7\x85\x6B\x99\x1F\xF2\xDB\x24\x42"
"\x1A\x28\x3F\xCE\xB4\x54\xCE\xFD\x94\x72\x7B\xCB\xCA\xE9\x6E\xB3\x3B\x73\x3B\x6F\x88\xB8"
"\x5B\x66\xF7\x36\x77\xBD\xA7\xB9\x6F\x6E\x33\x72\xA9\xD3\x15\x70\x63\x2F\xDB\x6B\xB2\x46"
"\x1A\x78\x76\xDD\x36\x76\xC5\xDD\x12\x62\x2F\x9B\x2C\x07\xD6\xD6\xB3\x9B\x0D\x52\x66\x2F"
"\x39\x9F\xDB\xAE\xB2\xB6\x37\x3E\xAA\x6E\xE3\x28\x5B\xFC\xB4\x26\xAF\x7F\x9D\x39\x78\xE3"
"\x38\x87\x0E\x0F\x26\x82\xCC\xFB\xAB\xD9\xAE\x3C\xDA\x2A\x89\x39\xCC\x0B\x2D\x4E\xB8\xD2"
"\x1C\xE7\x36\xCF\xF8\xCF\xCE\xE1\x8C\xE7\xBE\x95\xE0\x18\x35\x72\x44\xD9\x2D\x5B\xA0\xD9"
"\xA6\xE4\xEA\xB6\x26\x6A\xC5\x64\x9B\xFD\x58\x1B\x09\x7A\x45\x82\x7F\xBC\x2B\xED\x3E\x0B"
"\x3D\xE8\x1A\xF7\x38\x96\x3B\xBE\xF1\x02\xE3\xEC\xCB\xC2\x4B\xB4\x39\xE5\x4D\x97\x26\x5E"
"\x7C\x46\xEB\x76\x39\x5B\x26\xAE\x2D\x8C\x33\x35\x87\x70\x1F\xAB\xDC\xDB\xCE\xF4\xB7\xDB"
"\x1D\xAE\x73\x7F\x18\xC8\x9B\x29\x73\x5F\x93\x64\xB1\x21\xB6\xE6\xDE\x53\xEE\x9D\xBF\x74"
"\xA7\xF0\x17\x54\x09\xCA\x13\xDE\xD4\xE2\xEE\x1C\x7A\x56\xFF\xAE\xD6\xC7\x36\x0F\x81\x57"
"\x3E\xA4\x5C\xB7\x78\x96\x77\x0A\xF6\x97\x4F\x30\x67\x2B\x07\x00\xDA\x2D\xFF\x6F\xFC\xE2"
"\xD9\xC0\x98\x66\xBB\x8E\xB3\x5E\x70\x5C\xE7\xA5\xAD\x96\xA6\x8B\xEC\x63\x9D\x38\xD7\x1F"
"\xDD\xEB\x9E\x07\x69\xAE\xA1\xB4\xC1\x70\x47\x3E\x36\x62\xE6\x4B\x9A\xB7\x9D\xA7\xD1\x53"
"\xD6\xE0\x74\x12\x08\xF2\x37\x7A\x8A\xC9\xFF\x43\x86\xCE\x48\x45\xF0\x17\xAD\xAD\x73\xD4"
"\x22\x4E\x24\x56\xFE\xD7\xFD\xAC\xD1\xCF\xBF\x5E\xA0\x79\x52\xBA\x1C\x1A\x3C\x1C\xE9\x53"
"\x38\xF6\xD0\x67\x88\x36\x2A\x7C\xE9\x7F\x7A\x8E\x39\x13\x78\xFE\xD8\xDA\x0F\x9C\xF9\xAF"
"\xFF\x1F\xF6\x07\x21\xFD\x7F\xB6\x7F\x9C\xF5\x1F\xC0\xFC\x1F\x5D\xE0\x5F\xFD\xB9\x5F\x6D"
"\xE9\xDE\xF7\xF1\xDE\xE6\x31\x60\x03\x3A\x20\x73\x5C\x01\xCB\xA8\x14\x7B\x98\x40\x04\x8E"
"\xD2\xDD\xB8\xC8\x03\x6A\xE0\x06\x72\x60\x07\x76\xE0\x04\x58\xE0\x05\x6A\xD2\xF2\x54\x4C"
"\xFD\x54\xE0\x05\xA2\xA0\x0E\xA0\xD3\xDA\xC5\xDF\x7C\x9C\x20\x0A\x8E\x92\x0A\x8A\xC9\x0B"
"\xC2\x20\xCB\xC8\xE0\x8C\xD0\x60\x0D\x5A\xCC\x0D\xBA\x60\x08\xEA\xA0\x19\xF0\x20\x05\x5A"
"\x20\x5A\x89\x05\x1D\x5C\x4C\x10\x92\x45\xC5\x5C\xA0\x74\x79\x60\x13\x3A\xE1\x13\x42\x61"
"\x14\x4A\xE1\x14\x52\x61\x15\x5A\xE1\x15\x32\x07\x0B\x46\x15\x16\x72\x61\x17\x32\x1C\xE5"
"\x79\x61\x18\x8A\xE1\x18\x92\x61\x19\x9A\xE1\x19\xA2\x61\x1A\x72\x9D\x16\x7A\x96\x1A\xBA"
"\xA1\x1A\xFA\xDE\x9A\x00\xC2\x1B\xD2\x61\x1D\xDA\xE1\x1D\xE2\x61\x1E\xEA\xE1\x1E\xCA\x9A"
"\x8E\x00\x19\x1F\x02\xA2\x07\xBA\x5D\x6C\x05\x62\x21\x1A\xE2\x21\x22\x62\x22\x2A\xE2\x22"
"\x72\xD5\x84\xFC\x21\x23\x42\xE2\xB4\xB8\x55\x24\x52\x62\x25\x5A\xE2\x25\x62\x62\x26\xAE"
"\xE0\xEA\xB5\xA0\x26\x7A\xA2\x54\x94\x1E\xC2\x7D\xE2\x28\x92\x62\x29\x9A\xE2\x29\x9E\x21"
"\x1B\x3A\x0C\x2A\xB2\xE2\x43\x9C\x18\x95\xB5\x62\x2C\xCA\xE2\x2C\xD2\x62\x2D\xCA\x9F\x0F"
"\x5A\x0C\xD5\xD5\x0D\xA1\xD9\x22\x2B\x9A\x40\xDD\x5C\x41\x8B\x30\x61\x2F\x12\x63\x31\x1A"
"\xE3\x31\x22\x63\x32\x2A\xE3\x32\x32\x63\x33\x3A\xE3\x33\x42\x63\x34\x4A\xE3\x34\x52\x63"
"\x35\x5A\xE3\x35\x62\x63\x36\x6A\xE3\x36\x72\x63\x37\x7A\xE3\x37\x82\x63\x38\x8A\xE3\x38"
"\x92\x63\x39\x9A\xE3\x39\xA2\x63\x3A\xAA\xE3\x3A\xB2\x63\x3B\xBA\xE3\x3B\xC2\x63\x3C\xCA"
"\xE3\x3C\xD2\x63\x3D\xDA\xE3\x3D\xE2\x63\x3E\xEA\xE3\x3E\xF2\x63\x3F\xFA\xE3\x3F\x02\x64"
"\x40\x0A\xE4\x40\x12\x64\x41\x1A\xE4\x41\x22\x64\x42\x2A\xE4\x42\x32\x64\x43\x3A\xE4\x43"
"\x42\x64\x44\x4A\xE4\x44\x52\x64\x45\x5A\xE4\x45\x62\x64\x46\x6A\xE4\x46\x72\x64\x47\x7A"
"\xE4\x47\x82\x64\x48\x8A\xE4\x48\x92\x64\x49\x9A\xE4\x49\xA2\x64\x4A\xAA\xE4\x4A\xB2\x64"
"\x4B\xBA\xE4\x4B\xC2\x64\x4C\xCA\xE4\x4C\xD2\x64\x4D\xDA\xE4\x4D\xE2\x64\x4E\xEA\xE4\x4E"
"\xF2\x64\x4F\xFA\xE4\x4F\x02\x65\x50\x0A\xE5\x50\x12\x65\x51\x1A\xE5\x51\x22\x25\x44\xD6"
"\x80\xCF\xBC\xD9\x41\x44\x60\xF5\x85\xE1\x82\x75\x99\x23\x28\x17\xA5\xD9\x02\x55\x36\x93"
"\x08\x9C\x4C\x97\x1D\xE0\x1E\x0E\x81\x55\xA6\x9F\xA8\x48\x81\x55\x62\xE5\xB6\x2D\xA5\x40"
"\x34\xA5\x41\x3C\x65\x52\xB2\x25\x37\x82\x0B\x45\x9C\x82\x89\x19\x8C\xF6\xD1\xA1\x6D\x1C"
"\x85\x5D\x42\x65\x52\x74\x47\xF3\x79\x61\x77\xAC\x93\xA1\x71\x1F\x7B\xBC\x25\x43\xC4\x65"
"\x46\x78\x07\x5D\xB6\x65\x62\x4E\xE3\x6F\x35\xDE\x14\xE2\x25\x5E\x22\x9B\x4A\xFC\xA5\x19"
"\x8A\x98\x54\xB5\x9E\xA9\xC9\x5F\xBF\x1D\x9E\x62\x72\x66\x34\x62\x97\x68\xA9\xE1\x63\x12"
"\x9D\x98\x10\x8E\xE2\x79\xA1\xA9\x14\x9B\x94\xA1\xD3\x67\xAA\x56\x67\xBA\x66\x32\x1A\x5B"
"\x6F\xD5\xA1\x68\xAA\x26\x7B\xE4\x4F\xC5\x75\x61\x63\xF0\x65\x49\x1C\x47\x63\xB6\x44\x6C"
"\x6E\xE6\x6B\x0A\x67\x32\xD6\x40\xA0\x7D\x88\x89\xDD\x8A\xD2\x51\x21\x6D\x0A\x9B\xD3\x89"
"\x45\x5E\x89\x62\x19\x1A\x88\x6F\xBA\xD6\x7E\x89\x49\x71\x2E\x06\x72\x02\xDE\x70\x72\xE7"
"\x2C\xAE\xE5\x4B\x34\xD1\xE5\xE1\xA1\x12\xA6\x14\x00\x90\xA7\x04\x92\x26\xA8\xCC\x18\x86"
"\x28\xA7\x15\xBE\x46\x7B\xDA\xC4\xD0\xE4\x25\x59\x7C\xE7\xFC\x79\x05\xE6\x75\x67\x7E\x0E"
"\xE7\x04\xCC\x19\x73\x09\x5C\x0D\x74\x59\x58\xDE\x61\x7F\xAE\xC9\x26\xCC\xA7\xD9\xBC\xD0"
"\x1A\x9D\x9E\x7E\x32\xE8\x37\xD6\xCD\x56\x5A\x25\x73\x41\xCB\x81\x96\xC4\x83\x46\x68\x97"
"\x4D\x68\x83\x6A\x28\x48\x5A\xE8\x85\x72\xC2\xDD\xC4\x23\x76\xD6\x1F\x62\xB2\x85\x88\xFA"
"\x1F\x89\xE6\x9E\xE5\xA4\x16\x21\xA6\x51\x02\xD2\x1D\x68\x7E\x54\xCF\xD5\x42\x57\xA6\x28"
"\x6C\xAC\xE8\x64\xF2\x5D\xE7\x8D\x51\x57\x1D\xD2\x04\x79\x88\xC3\xFD\x5D\x40\x60\x1F\x8D"
"\xE2\x90\x8D\xC2\x16\x8E\x7E\x9C\x32\xFD\x28\x85\xFE\xD7\xCB\x6C\x9F\x8E\x26\x69\x74\x76"
"\x5D\x6E\xCD\x28\xD6\xFD\xCC\x36\x38\xC2\x30\xD2\x45\x71\x9A\x9F\x62\x8C\x5E\x81\x2D\xE9"
"\x96\x1A\xE7\x34\xC5\x25\xE8\x19\x51\x63\x2A\x97\x66\xB2\x1E\x16\xD6\x9E\x46\x9C\x82\xFA"
"\x19\xD1\x9B\x0E\x1C\x94\x9A\x5C\x6B\xC6\xA8\x8A\x1E\xE9\xD0\xE5\x50\x99\xCE\xA9\x8B\xEE"
"\x28\x8C\x5A\x1F\x9E\x36\xA2\x9D\x06\x2A\x41\x85\x29\x02\x66\x0E\x9F\xEA\xA9\x9F\x0E\x14"
"\xA0\xF6\xE8\xEA\x1C\x2A\x91\x14\x12\x93\x42\x9B\xF7\x81\xD2\x82\xE6\x68\xA2\x66\xDE\xCF"
"\x28\xEA\xDA\x84\xA2\x75\x7C\xA9\xF7\xD5\x29\x6D\x99\x59\xFD\x59\x26\xC7\x85\x4F\xE3\xF5"
"\x8C\x63\x79\xE1\x20\x76\x52\xDE\xA5\xDD\xA2\x0A\x6A\xDC\x39\xEA\xCD\xD1\xA9\x66\x45\x13"
"\x5C\x21\x69\xA6\xCE\xEA\x8B\x12\xEA\xA3\x32\xEA\xA8\x22\x29\x93\x6C\x47\xA4\x16\xE9\xD8"
"\xEC\x6A\x94\xF6\xEA\x9F\xFE\xAA\xAD\x2A\x92\xB1\xE6\x06\xF9\x98\x26\xE7\xF9\x29\x92\x21"
"\x2A\x82\x99\x69\xF8\x34\x1F\x70\xCE\x1C\xA5\x82\xA9\xB0\x30\xA9\xAB\xCA\x44\xCE\x9D\x29"
"\xA6\xAA\x59\xF8\xE0\x66\x03\x06\xA9\xD1\xDD\x29\xBA\x9E\xEA\x94\x1A\xE9\xA0\xB2\xE8\xAD"
"\x1D\x5B\x9E\x5E\x6B\xE6\x14\x1E\xD8\xE1\x2A\xCF\x2D\x6B\xA3\x36\x6B\xAE\x76\x2B\xAD\x06"
"\x04\x90\xCE\x56\xBE\x8A\xAA\xB0\xCA\x6A\x73\xFA\x2A\xA9\x82\xD0\xA1\x79\x1B\xC8\x55\xD7"
"\xBB\x52\xEB\xC9\x99\xAB\xB2\x66\x4E\xB2\x02\x00\x6B\x8E\xAB\xB7\x8A\x2A\xB4\xB6\x28\xBE"
"\xF6\x69\xAA\x62\x6A\xBE\xB1\xEB\x14\x92\xAC\x4C\xEC\xDD\xC9\x26\x56\x8D\xD6\xAB\xBC\x0E"
"\xEB\xC1\xEE\x2B\xAA\x86\xCF\xAE\xEA\x6B\x6B\xB5\x6B\xCB\x0A\xEC\xBC\xDE\xEC\xAC\x7A\xEC"
"\xCE\xFE\x0C\xCD\xC2\xAC\xCD\x16\x6A\x02\xF6\x6C\xC8\x6A\xDE\x9D\x75\xDE\x8F\x28\xDD\xBA"
"\xB2\xDA\xC7\x52\x2C\x5B\x70\x6B\xC0\x1A\x2D\xCE\x32\x2B\xC3\xDA\x84\xCA\x4A\x29\xC0\x31"
"\x12\xA6\xB6\xE9\x9A\x56\xE1\x81\x9D\xC3\x87\xDA\x0D\x1D\x08\xC3\xEC\x39\x95\x35\x85\xED"
"\x28\x91\xAD\xD9\x1E\x2B\x90\x04\x93\xCE\x0E\xAD\xDB\xDE\x68\xC2\xB2\x2A\xCB\xCA\xAD\xBD"
"\xDA\xAD\x27\xC5\x6C\xA5\x4A\x8E\x96\x14\x2D\xB0\x3E\x93\xC4\x66\x5B\xBF\x22\xEC\xBD\x76"
"\xE2\xA8\xEE\xE6\xA8\x5A\xE7\xA6\xE2\x2C\x66\x20\x1F\xD3\x32\x1F\x93\x42\x6E\xAD\x0E\x9E"
"\x11\x85\x6A\xDF\x21\x2E\x85\x82\xAD\xD8\x5A\x8C\xCB\x4C\x2A\xDD\xFE\x0C\xBC\x41\x6E\xBA"
"\x6E\x9E\x92\xC9\xEC\xBF\x36\xD9\x68\xF2\x2D\x43\xAD\x6E\xB0\xEE\xED\xC4\xC6\x6B\xCE\xBE"
"\x2C\xE6\x5A\x12\x52\xF1\x6B\xEC\x2E\xEC\xEC\xDE\xAA\xD0\x02\x2E\xBD\xFC\xAD\xB3\xF6\x6B"
"\xED\x06\xE6\xE9\xDE\xAD\xCB\x82\xEE\x6B\xFD\x2E\x50\xFC\x08\xE9\xC2\x6E\xCB\xE6\xCC\xB4"
"\x9A\xD5\x04\x10\xA1\xC2\x1A\xAE\xA5\x9C\xA5\xEA\x3E\x89\x64\xA1\xA8\x24\x62\x6E\xF2\xA6"
"\x6E\x6D\xFA\xEB\x2A\x22\x2D\xB0\x01\xC7\x8F\x10\x97\x1D\x3A\x14\x80\x15\x54\xD3\xEE\x48"
"\x7E\x55\xEF\xDB\xEA\xAE\xEB\xF2\x2E\xF0\xE2\xEE\xC8\xD8\x2E\xF1\xEA\xED\xFC\x02\xEC\xEE"
"\xC2\x62\xF3\xE6\x93\xF7\xE2\x6F\x32\x6D\x1D\xBD\x16\xAF\xEC\x1E\xAF\xE6\x01\xF0\xED\x29"
"\x54\xD9\xAD\x95\xB5\x4E\x6D\x01\x87\xEF\xB3\x7D\x2B\x18\x56\x67\xD3\xA1\xD3\x04\x83\x6F"
"\x05\x2F\x2E\x7A\x59\x29\xF9\xE6\x06\x07\xEF\x94\xC9\xB0\xD1\x08\x93\xF0\x1C\xA6\x92\x05"
"\x1B\xF0\x09\x2F\x6E\xF8\xC6\x2F\xE1\xBE\x2E\xBC\x52\x6D\xD5\xB6\x70\xFD\xF2\xAA\x6C\xE6"
"\x2D\xFC\x82\x6E\xFE\xF6\x2F\x0C\xCB\x47\x02\xFB\xAF\x27\x9D\xD3\x0D\xCF\xAD\xE1\x26\x8A"
"\x0F\x27\x1F\xF6\x3E\xA9\xD7\x5D\x6A\x07\x2F\xAB\x61\xBD\x6F\x79\x79\xB0\x06\xC3\x67\xDC"
"\xA2\x90\x11\x8F\x9B\x18\x81\x70\xB6\x1E\xED\x07\x53\x30\x9A\x8D\x29\xC0\xE4\x9A\x43\xBD"
"\xF0\x15\x03\xDE\x18\x0F\x2E\x0D\x17\xAE\x10\xE3\x6D\xDB\x02\xF1\xFD\xB6\xAE\x0B\xEB\xEF"
"\xED\xC6\x30\x0B\x1F\x70\x48\x59\xF1\x19\xCF\xB1\xC5\x06\xA7\x1A\x1B\x2F\x11\xE7\xD8\x1D"
"\x47\x84\xB4\x2E\x4F\x04\x39\xF0\x03\x5B\x4A\xC3\x90\x6B\xB0\x06\xB1\x7D\x4D\x71\xEF\xCE"
"\x31\x20\x67\xEC\xD3\x64\x31\x03\x0F\x30\xC2\x94\xAC\x6F\xA9\xE9\x02\x87\x51\x19\xC7\x31"
"\x5F\x51\xD5\x0E\x6B\x2D\x1C\x83\x32\x1E\x43\xB0\x0C\xE7\xB0\x1C\x8B\x6E\xD0\x8E\x72\x0D"
"\xE7\xB1\x19\xB3\x32\xD1\x41\x32\xD8\x2D\xB2\xD3\xB6\x72\x27\xBF\x71\xC0\x42\x72\x72\x39"
"\xEC\x20\x57\x54\xC4\x96\x94\x8E\x7A\x48\xC9\xC9\xB2\x1B\xF7\x85\x26\x8F\x6F\xBF\x42\x72"
"\xEA\x4C\xF2\xD4\x52\xA7\xE1\xED\xB1\x02\xC2\x9E\x0A\xB3\xD6\x2A\x47\xF2\x27\xB3\xEE\x0F"
"\xE3\xF0\x13\xAF\x31\x2D\x97\x32\x2B\xA7\x32\xE6\xA6\x31\x1B\x67\xB3\xDD\x2E\x4C\x2C\x1F"
"\xEC\x2C\x13\xB0\x0E\x5F\x33\x0F\x97\x33\xB8\x32\xEE\x66\x4E\x00\x0A\x12\x29\x01\xB3\x88"
"\x0E\x28\xED\x31\xE3\xAE\x09\x54\x96\x21\xA3\x32\xA6\x3A\x94\x85\xA5\x44\x3D\xE7\x14\x12"
"\xB8\xB3\x34\x43\xF1\x16\x33\x6E\x33\xDB\xAF\x46\x0C\xE0\xF2\x88\x2B\xDB\xFA\xD7\x38\x33"
"\x72\x1F\xC2\xAD\x23\x77\x73\x38\x73\xB3\x3A\x67\xED\x2B\xB7\xF1\xF0\xDE\x72\x2D\x53\x73"
"\xCD\x86\xB4\x75\x70\x84\x39\x83\x33\x3A\xEF\xAC\x46\xF3\x28\xFD\xA2\x4F\x2E\x87\xEF\x72"
"\x40\xC9\xD2\x82\x13\xA5\xB2\xB3\x75\x98\xE6\x30\x7B\x74\x31\xC7\x8E\x09\x58\x5B\x4E\x3D"
"\xF0\xCF\x38\x9C\x32\x13\xF3\xCD\x2A\xF4\x2B\xBF\xDB\xCF\xC1\x69\x34\xCF\x17\x45\x23\xA9"
"\x18\xDB\x32\x36\x0F\x31\x1F\xA7\xB0\x54\x87\xB2\x0D\x8B\x73\x54\x5F\xF5\x36\x13\x70\x85"
"\x98\x34\x9D\x2E\x33\x4B\x5F\xB4\x2B\xEB\xF1\x35\xB9\x74\x67\x6D\xE1\xB9\x6E\xA7\x45\xEF"
"\x53\x12\xFB\x5F\xC5\x72\x74\x3F\xEB\xD7\x60\x88\xEB\xDE\x4D\xEE\xC0\x52\xA8\x50\xE7\x34"
"\x51\xBB\xB5\x4E\x67\x4E\x43\xDB\xD7\xF9\x56\x6D\x18\xE7\x12\x35\x3B\xF5\x48\x83\xB3\x58"
"\x8B\xF4\x3A\x57\xF5\x23\x33\x0B\xA6\x26\xF6\x46\x8F\xB5\x4A\x53\xAE\x1C\x33\x5E\x19\x14"
"\x34\x55\x63\xC4\xA3\x9D\x32\x56\x73\xB3\x2A\x59\x36\x12\x67\xEF\xA2\xC4\xB4\x16\x7B\x29"
"\x4D\xD7\xF4\x53\xA4\x25\x25\x2B\xF2\x50\x93\x31\xD0\xCC\x75\x1D\x83\xEA\x5D\x4B\x32\x6B"
"\x3B\x72\x51\xC7\x5B\xDD\x0E\xD3\xC8\x19\x73\x20\x0F\xB6\x62\xF3\xD4\x57\x3D\x35\x0F\x4B"
"\x36\xEA\x06\x30\x67\x13\xB0\x33\x58\x65\xD9\x7E\xDB\x66\x6B\x75\x4A\x4B\x74\x46\xEF\xE5"
"\x65\xB7\xED\xE2\x08\xEE\x5B\x1B\x77\x4A\x47\x37\x68\xC7\xE7\xE7\x1A\xC4\x68\xAB\xF6\x70"
"\x30\xAF\x51\xC7\xF6\x77\xA3\x31\x4A\x7B\x15\x68\xBD\xB6\x1F\x6B\x4B\x50\xCF\x76\x5E\x0F"
"\xAD\x6D\x57\x73\x0E\xED\x2A\x66\xE8\x76\x5A\x7B\x32\x27\x13\x76\x6F\x43\xF6\x63\xAF\xF4"
"\xFE\xCA\xAF\x61\x83\x14\xC1\x1E\x76\x70\x2F\x76\x58\x13\x38\x29\x7B\xC1\x43\x5B\xED\x56"
"\x03\x0C\xD0\x0E\x38\x80\x77\x8F\x82\xAF\x9C\x20\xB7\xEF\x6E\x53\xF6\x24\xFE\xB2\x7C\x93"
"\x77\x1E\x9B\x77\x58\xB9\xF6\xDD\xA1\x31\x58\x03\xB5\x6C\x63\x31\x6D\xB3\x34\x7C\x8F\x35"
"\x49\x57\x77\x7C\x13\xAD\xA4\x08\xB6\x35\x43\x76\x61\xFB\xB6\x75\x37\x37\x15\x3F\x37\x83"
"\x0F\x15\x3F\x5F\xB7\x8D\xEF\xB8\x45\x5B\x04\x3D\x09\x78\xAC\x6A\x73\x1F\xDF\x30\x90\x53"
"\x68\xCE\x8C\x86\x77\x3F\xF0\x3C\x38\x9A\x89\x13\xAF\x8A\xE9\xF8\x47\xC3\xDB\x7F\xA4\xB7"
"\xDD\x32\x39\x09\x77\xA9\x5D\xC7\xF5\x41\x5B\x35\x13\x77\x39\x73\xD4\x40\x26\x83\x73\x42"
"\x65\x59\x30\x6F\xF9\x8D\xAF\xAF\xAD\xE5\x2E\x73\x13\x79\x56\xB7\x79\x67\xAF\xB7\xE4\xAA"
"\xF2\x8C\x47\x36\x9A\xDB\xF8\x43\x07\xB9\x86\x47\xF9\x9B\xA7\xB3\xE2\x66\xF0\xF6\xE4\x9F"
"\x85\x0B\x77\xA9\x40\x99\x97\xCF\xF1\x2B\x42\x76\x9D\x9F\xEE\x94\xB7\x0E\x7D\xB3\xF9\xC2"
"\xB2\x77\x89\xBB\x77\x6D\xEF\x35\x49\xE8\x00\x2E\xDA\x8D\x23\xEC\xCA\x8B\x97\xB9\x8B\x9F"
"\x79\x8F\x93\x39\x70\x43\xB8\x28\xD3\x39\x7F\x4F\xF6\x93\x5B\x87\x5F\x67\xB4\x9D\xFB\x38"
"\xAB\x83\xF5\x48\x68\x6C\x9E\x27\x2A\xC7\x3E\x78\xA9\x57\x54\xAC\x53\x68\xD7\xDA\x5E\x71"
"\x3F\x6F\x86\x13\xEE\x3E\x63\xB6\x37\xFB\x73\xA3\x1F\xEC\xAB\xAF\x68\xA4\x7F\xDA\x57\xDF"
"\x2B\x8A\x0F\xCE\xA6\xEB\x57\x7D\x63\xE6\x7D\x8B\x3A\x9D\xCB\xF8\x7E\xCF\xB9\xB5\xD7\x3A"
"\xB6\x9F\x5C\x59\xEE\xF9\x54\xBB\xB9\xB7\xAF\xFA\x6D\x4B\x2D\x39\x2B\xC6\x29\x68\xE9\xB7"
"\xAF\xF9\x13\xFF\x96\xC3\xE9\xBA\xA0\x17\x38\x6E\x38\xAE\x69\x2B\xBA\x94\x3B\xF6\x39\x3B"
"\xF9\x15\x39\xFA\x90\x43\x3A\x89\x27\xBB\x93\xC3\xB5\x03\x2A\xB9\x7D\x41\x3B\xFB\x7A\x38"
"\xC1\x63\xB4\x14\x33\xF5\xA3\xA7\x7B\xB0\x1F\xFC\xCE\x0E\x5A\x0D\x5E\xC1\xB9\x33\x3C\x62"
"\x5F\x7B\x7F\x53\x36\x6E\x00\x91\xAC\xC7\x6B\xBC\xBF\xF3\x70\x57\xB4\xB1\x77\xF7\xF9\xB0"
"\x7B\xA0\xDB\xF7\x47\xDF\x6D\xAF\x77\xFC\xBF\x33\xBC\xB2\x6F\xB2\x40\xE5\x7B\xB0\x27\x73"
"\x7B\x57\xF2\x86\x33\xBB\x50\x95\x3C\x5F\xF3\xAC\xA7\x1B\xF4\xF7\xC6\x78\x00\xA9\xEF\x79"
"\xA3\xF1\xCF\x17\x7C\xD0\xBB\x2F\xC3\xCB\xD5\xC1\x0A\x7D\xA8\x13\x6E\xD2\xFB\xB7\xA0\xC6"
"\xA6\xC6\x3B\xAF\xFB\x4C\xEB\xCB\xA3\x9E\xAD\xAF\xD5\xD3\xE7\x3A\xC9\x47\xBB\xC9\xEF\x87"
"\xE9\x6E\xF8\x45\xB3\x7C\x71\xCB\x2B\x8C\xE1\x7B\xB1\x37\x3D\x0D\xC7\xBC\xA4\x7B\x2D\xCD"
"\x57\xFA\x65\x6E\x3D\xCE\xC7\xAE\x99\x47\x19\xF5\xFA\x2F\x92\x7A\x7D\xDD\xEB\x17\x60\xE3"
"\xBD\x0A\xEB\x3D\x0F\xCF\x70\x1E\x1F\xFD\xC6\x10\x6F\x53\xA7\x0A\x24\x15\xB2\x73\x57\xAD"
"\x4B\x3D\x3A\x66\xE0\x26\x66\xF4\x7D\x81\xFF\x7D\xF1\x0E\xE2\xC8\xCF\x56\xAE\x99\xD1\x3D"
"\x93\xF6\xA1\x6B\xB6\xBE\x1B\x44\x19\xD4\xDA\x82\x03\xBA\x76\xB3\x38\xE1\x82\xBC\xBC\x52"
"\x7E\x06\xFB\x32\x5B\x7F\x79\x5E\x64\x60\xDC\x72\x7A\x8B\xBB\x7B\xE2\x8B\x9A\x55\x7E\xFE"
"\x0A\x57\x2E\x55\xD0\x1A\x44\xDB\x7C\x56\xD0\xBE\xEE\x87\x3E\x55\xF4\xFE\xAE\x73\xBD\xF1"
"\x49\x5A\xF0\xC7\x7E\xC8\xAB\x92\xF1\xDF\xFC\xA0\x17\x78\xE4\x2A\x3C\xE6\x87\x9F\x5A\x28"
"\xFF\xDB\x33\x3F\x29\x3B\x3F\x3A\x05\xBC\xBE\xA7\xFE\x4F\x03\x0C\x8C\xD5\xB5\xED\x93\x44"
"\x9E\x9C\x03\xA5\xCD\x90\xC8\x29\x7C\xF8\x3A\x9C\xAB\x31\x97\x72\x8B\x3E\x33\xB7\xFD\x6F"
"\x0B\x84\x0C\xD1\x50\xA7\xAD\xAC\x7D\xCD\x83\x11\x9A\x81\x20\xC0\xDA\xF2\xEB\xF2\x6C\xC1"
"\x1B\xD6\xFE\x03\x18\x70\xDE\x10\x00\x05\x0D\x1E\x44\x88\x50\x84\xB9\x80\x0D\x1D\x3E\x84"
"\x38\x30\xE1\xC4\x89\x0B\x21\x5E\xC4\xF8\x4F\x22\x45\x8E\x05\x19\x5D\xF4\xD2\x51\xE4\xC8"
"\x84\x16\x33\x9E\x14\x48\x90\x64\x49\x86\x28\x51\x6E\x5C\x79\xF0\x23\xC4\x90\x07\x4D\x5E"
"\x74\x36\x21\x26\xC2\x99\x0F\x6B\x1E\x1C\x32\x2F\xA2\xCA\x9D\x36\x5B\xBA\xCC\x08\xB3\x68"
"\x4F\x87\x3F\x0B\xDE\x84\x98\xB3\xE8\x54\x00\x41\x21\x32\xA2\x2A\x13\x64\xC2\x59\x17\xB1"
"\x66\xF5\x88\x14\xE5\x2C\xB0\x4C\xC5\x3E\x54\x5A\x74\x82\xB3\xB3\x19\x9D\xEE\x34\x1B\xF0"
"\xAD\x41\xA8\x01\xA5\x52\x5D\xDB\x16\x22\x59\xB0\x14\xE3\x6A\x24\xDA\xF7\xA0\x17\xBD\x43"
"\xB3\x5A\x2D\x0C\xF0\x2B\xD5\xBF\x85\xEF\x32\x4E\xFC\xF0\xF1\xD4\xAE\x91\xED\xEA\xCC\x5A"
"\xD9\xF2\xBF\xC9\x70\xB7\x0A\xDE\xA9\xD9\x72\xE7\xD0\x9B\x01\x92\x5E\xD9\x78\x2E\x61\x8C"
"\xA8\x49\xAA\x9E\x28\xBA\x21\x5F\xB0\xB2\x13\xBB\x1E\x09\x1B\x21\x6B\x9C\x98\x41\x77\x44"
"\xEC\x70\x71\x56\xDD\x46\x0D\x97\x35\x0D\x70\x6E\xCC\xC6\x6D\x87\x43\x4E\xBE\xFC\xF5\x67"
"\x96\x51\x7D\x4F\x6D\x2E\x56\x7A\xDF\xBF\x69\x41\xF3\x1E\x7D\x7D\x67\xDE\xC8\xCF\x77\xD6"
"\x4D\xBC\x9D\x24\xFA\xC2\xEA\x47\x06\x8F\xEC\x5E\x24\xFC\xF4\xC8\x69\xFE\x8E\x49\xBF\x7D"
"\x5F\xFD\x7A\xE5\x73\x2C\xCE\x20\xF2\xAC\x23\x8E\x3A\xA0\x84\xBA\x0F\xAC\xFE\xDA\xFA\xCF"
"\x2F\x03\x0B\x1A\x50\x32\xF1\xF0\x43\xA8\x3F\xF3\x96\x7A\x30\xAC\xBD\xB8\x4B\x8E\x36\xE8"
"\x2C\xF3\x30\x2B\xF6\xFC\x2B\x30\xC1\xEA\x24\x04\x6B\x44\xA4\x70\xB3\xCF\x21\xEF\x04\x03"
"\x2F\x3E\x0E\xCB\xE3\x0F\x41\x1A\x05\x5B\x50\xAC\x0B\x8B\xF2\xC2\xC6\xC2\x76\xDC\xA9\x47"
"\xCB\x80\x9C\xCE\x44\x0A\x45\x12\xF2\xC6\xBE\x92\x4C\x8C\xC8\xDC\x32\xAC\xCA\xC7\x86\x58"
"\xEC\x28\x40\xAD\x08\x04\x8B\xC9\x1F\x67\xF4\x69\xA2\x05\xA9\xFC\xCD\x42\xC1\xAC\x7C\xEA"
"\xA8\x86\x5E\x4C\xCD\xB4\x53\x26\xF4\x2C\xB2\x79\x00\xC1\x4F\xCB\xFA\x3E\x6C\x8A\x22\xF6"
"\xC0\x04\x4E\x4A\xB1\xB4\x11\xE1\x48\x83\xBA\x0B\xEC\xB7\x18\xB7\x14\xCC\x36\x1D\x05\x9B"
"\xE0\x14\x3D\x5D\xD2\xA6\x06\xFC\x12\x5D\x14\xA5\x46\xF1\xAB\xA1\x96\xC2\x26\xFD\xAD\xD2"
"\x4B\x1D\xE5\xB2\x4E\x3F\x47\xD2\x54\x2F\x4C\x41\x0B\xB5\xAD\x51\x4B\xEC\x32\xB6\xDE\x50"
"\xF5\xF4\xC4\x54\xC1\x2A\xF5\xAC\x53\xE9\x6C\x48\x3A\x43\x39\x63\xD3\x4F\x31\x3B\xAD\x95"
"\xA2\x41\x4F\xCB\xF5\xC9\xC4\xB6\xE1\x84\x53\x5E\x91\x3A\xC7\x99\x32\x82\xA5\x2A\x56\xA4"
"\xB6\xD9\xC6\x96\x54\xE8\x30\x81\xD5\x5E\x2B\x32\xF3\x32\x44\x15\x3D\x6B\x1E\x47\x98\x3D"
"\x16\x30\x5D\x6D\x71\x06\x5A\x51\x91\xC0\x0F\x90\x48\x01\x3A\xC7\x2B\xFC\x4C\xB8\xC2\x0C"
"\x79\xE7\xA5\xB7\x5E\x1D\x3E\x2D\x08\xDE\x7A\xF7\xA5\xF7\x5E\x7C\x4D\xE0\x37\x60\x7F\x3F"
"\x05\x38\xE0\x7D\x07\xC6\x37\xE1\x98\x0A\x36\xB8\xDF\x84\x19\x6E\x58\x5E\x84\x15\xA6\xB8"
"\x62\xD0\x20\x8E\x78\x62\x8B\x37\xE6\xB8\x63\x8F\x3F\xFE\x58\x07\x83\x75\x20\xB9\x5A\x90"
"\x3F\xD6\x37\xE2\x2B\xC0\x3D\xF9\xC8\x09\x48\xD6\x01\x89\x80\x91\x60\x79\x2A\x99\xEB\x45"
"\xA2\x5A\xF6\x9C\x6C\xB9\x67\x9F\x7F\x06\x3A\x68\xA1\x87\x26\xBA\x68\xA3\x8F\x46\x3A\x69"
"\xA5\x97\x66\xBA\x69\xA5\x77\x76\x3A\x6A\xA9\xA7\xA6\xBA\x6A\xAB\xAF\xC6\x3A\x6B\xAD\xB7"
"\xE6\xBA\xEB\xA3\xA1\xF6\x3A\x6C\xB1\xC7\x26\xBB\x6C\xB3\xCF\x46\x3B\x6D\xB5\xD7\xAE\x18"
"\x6C\xB6\xDF\x86\x3B\x6E\xB9\xE7\xA6\xBB\x6E\xBB\xEF\x5E\xDB\x6D\xBC\xF7\xE6\xBB\x6F\xBF"
"\xFF\x06\x3C\x70\xC1\xE7\xD6\x7B\x70\xC3\x0F\x47\x3C\x71\xC5\x17\x67\xBC\x71\x91\x0A\x77"
"\x3C\x72\xC9\x27\xA7\xBC\x72\xCB\x2F\x2F\x7A\x82\x78\xF7\x35\x16\x73\xCF\x3F\x07\x3D\x74"
"\xD1\x47\x27\xBD\x74\xD3\x4F\x47\x3D\x75\xD5\x57\x67\xBD\x75\xD7\x5F\x87\x3D\x76\xD9\x67"
"\xA7\xBD\x76\xDB\x6F\xC7\x3D\x77\xDD\x77\xE7\xBD\x77\xDF\x7F\x07\x3E\x78\xE1\x87\x27\xBE"
"\x78\xE3\x8F\x47\x3E\x79\xE5\x97\x67\xBE\x79\xE7\x9F\x87\x3E\x7A\xE9\xA7\xA7\xBE\x7A\xEB"
"\xAF\xC7\x3E\x7B\xED\xB7\xE7\xBE\x7B\xEF\xBF\x07\x3F\x7C\xF1\xC7\x27\xBF\x7C\xF3\xCF\x47"
"\x3F\x7D\xF5\xD7\x67\xBF\x7D\xF7\xDF\x87\x3F\x7E\xF9\xE7\xA7\xBF\x7E\xFB\xEF\xC7\x3F\x7F"
"\xFD\xF7\xE7\xBF\x7F\xFF\xFF\x07\x60\x00\x05\x38\x40\x02\x16\xD0\x80\x07\x44\x60\x02\x15"
"\xB8\x40\x06\x36\xD0\x81\x0F\x84\x60\x04\x25\x38\x41\x0A\x56\xD0\x82\x17\xC4\x60\x06\x35"
"\xB8\x41\x0E\x76\xD0\x83\x1F\x04\x61\x08\x45\x38\x42\x12\x96\xF0\x7F\x13\x48\x85\x2D\x54"
"\xB8\x42\x5B\xC0\xC9\x84\x2F\x84\x21\x01\x7F\x85\xA6\x18\xD6\xD0\x86\xF4\x33\x14\xCF\x6E"
"\xB8\x43\x1E\x9E\x0F\x3D\x78\xEA\x61\x10\x85\xD8\xBD\x41\xD1\x70\x88\x96\xB3\x4D\x88\x8E"
"\xB8\xC4\xA0\xD9\x46\x87\x4C\x74\x5C\x5C\x94\x08\x45\x2A\x7E\xAC\x2E\x40\xC4\xDB\x10\x58"
"\xB8\xC2\x54\x4C\xA0\x0C\x5B\x54\xE1\xB7\x0A\x58\x03\x30\xAA\x30\x50\x9F\x1A\xD4\x13\xAB"
"\xB8\x46\x3F\x49\x01\x8C\x9D\xCB\x5A\xA2\xA0\x35\x47\x68\xB9\x30\x4E\x10\x31\x87\x08\xFE"
"\x82\xC5\x98\xC8\x8C\x13\x65\x5C\x21\x27\xCC\x60\xB2\xEA\xED\xB1\x66\x4B\x7A\x15\x1B\x15"
"\xA6\x39\x33\xA4\x10\x90\xB6\x10\xC4\xCA\x30\xA7\x39\x3A\x38\xD2\x16\x74\x98\xD7\x15\x48"
"\x76\xC8\xA9\x00\xCC\x92\x5B\x8C\x64\xF2\xF4\xC3\x47\x24\xE1\x51\x8F\x58\xFA\x0D\xA4\xBA"
"\x25\x46\xE9\xA1\xC7\x88\x59\xF1\x22\x5B\xC4\xF2\xCA\x9D\x54\xAA\x5D\x6D\x21\xE5\x41\x6E"
"\x85\x91\x79\xD4\x02\x5D\xA9\x94\xA5\x5E\x72\x79\x20\xD3\x34\xA8\x23\xB6\x14\x26\x27\x8F"
"\x56\x83\x60\x22\x45\x1B\x65\xA0\x5C\x0D\xB4\xD1\x96\x6D\x08\xA3\x4F\xA4\x9A\xE6\x4B\x58"
"\x09\x9A\x08\x05\x64\x8A\x7E\xCA\x0E\x52\xD4\x58\xB4\xB8\xD0\x32\x26\xBF\xCA\xA3\x21\xF1"
"\x23\x82\x6C\x26\x53\x7A\xBF\x1A\xE7\x4A\x86\xD0\xCE\x59\x9E\x11\x2F\xA7\x88\xCC\x30\x0B"
"\xB2\xCB\x93\xD4\x42\x99\x14\xE9\xA6\x58\xF4\x59\x90\x1C\x69\xA7\x2F\x89\xCA\xE7\x3F\x89"
"\x26\xA7\x43\x45\x8E\xA1\x2E\xC9\x23\x68\x0A\xFA\x90\x6F\x4E\x25\xA0\xFF\xA8\x28\x85\xC2"
"\xE9\x92\x78\x0E\x2D\xA0\x1D\xE5\x08\x3A\x4F\x89\x22\x6E\x36\x53\x2F\x20\xFD\x9D\x6D\x06"
"\x4A\x91\x89\x5E\xC4\x9C\x23\xE1\x27\x4A\x06\x1A\xD3\x8C\x64\x74\x25\x17\x75\xC9\x4A\x5B"
"\x8A\x12\x63\xAA\x2A\xA1\x56\x53\x91\x4B\x7A\xCA\xB7\x9D\x9A\x52\x30\x41\x75\x57\x49\x37"
"\x54\xB1\x8D\xA2\x04\xA5\x41\xA3\xCF\x4A\x07\x63\x4A\x75\x4A\x74\x5D\x10\xBD\xA6\xF3\xEA"
"\xF2\xD2\x98\xE0\xF4\x25\xF6\xE4\xD1\x66\x66\x6A\x99\xA1\x26\xC4\xAB\x27\xD1\xE9\x55\x91"
"\x52\x56\x83\xFC\xEA\x2C\x52\xED\x59\x53\x33\x02\xD7\xB8\xD1\x14\x23\x11\x45\xA4\x3B\x11"
"\x65\x52\x80\xD8\xF4\x37\x72\xCD\xC8\x53\x83\x66\x16\xAE\x8A\x04\x63\xF2\x5A\x59\x0D\xF8"
"\x75\x05\xFC\x00\x16\x23\x6C\xED\xDD\xA0\xFC\x3A\x95\xA2\xA2\x05\xAC\xA5\x09\x4F\x6D\x40"
"\xB4\xD7\xDB\x28\x94\x98\x9B\x81\x2C\x00\xEC\x3A\x57\xCF\x02\xED\xAC\x58\x65\x1C\x52\x33"
"\x82\x57\xCD\xEA\xA5\xB0\x00\xE5\x2B\x46\x2D\xE6\xD8\xA4\x5A\xAD\x9B\x82\x6D\xA2\x4B\x6B"
"\x81\x49\x33\xD0\x41\x18\x18\xC1\x6D\xEE\x00\xB1\xC5\x2E\x7E\x8A\xB6\x67\xBA\xEC\x4A\x54"
"\x8B\xD6\xD2\x8A\x36\xB3\x60\x39\x6D\x6B\x9A\x1B\xA5\x62\x8A\x28\x5B\x7A\x9D\xDA\x88\xCE"
"\x91\x8A\x79\x39\x82\x9E\xAD\x4A\xDC\x82\xB4\xC1\x89\x3F\xAA\x70\x8E\x0D\x61\x2D\x5E\x62"
"\xFB\x0F\x47\xC4\xEC\xBB\x72\x51\x2A\x45\x67\x6B\x9A\xE0\xFE\x4C\xB1\xF4\x92\xA4\x6D\x63"
"\xEB\x9D\xC6\x4C\x36\x71\x26\x80\x59\x80\x05\x6C\x32\x00\x4F\x17\x68\xB7\x9A\x85\x81\x49"
"\xD2\x9F\x79\x40\x53\x68\x72\xB8\x48\x7A\x2D\x1A\x5B\xBA\xFE\x55\xBA\x87\x59\x54\x83\xCF"
"\xD6\x1F\x09\x3B\xD7\x48\x88\xEB\x8F\x7F\x39\x2B\x5F\x82\x2E\x2A\xB4\x02\x8A\xAD\x88\x5B"
"\x04\x5E\x9F\xBD\x2C\xC0\x4C\x93\x02\x1D\xE9\xB8\x09\x8A\x9C\x42\xC6\x73\x4C\x6E\x47\x2E"
"\xDA\xE1\x10\x83\x25\xC6\x37\xDE\x06\x8D\x27\x62\x63\x20\xE7\x98\x23\x3F\xBE\xB1\x90\x13"
"\x42\xE4\x1B\x1B\x19\x54\x96\x12\xCB\x36\x84\xA2\xE2\x84\x20\x59\xC6\x4A\x46\x08\x93\x65"
"\xEC\x64\x9F\xBA\x88\xCB\x30\xAA\x6D\xD0\x76\x9C\x55\xF5\xA2\xD2\x67\x6E\xFD\x47\x87\xCF"
"\x19\xE6\x8D\x69\xD1\x8E\x08\x91\x83\x2D\xBE\x2C\xCF\x45\x4D\xD1\xAD\x90\x15\x41\xB9\x80"
"\xFC\x16\x2D\xCF\xF8\x53\x22\xB0\xC5\x26\xD8\xA4\x45\x39\x7C\x87\xCD\x09\xBB\x28\x6D\xFA"
"\x73\x62\x08\xA5\x38\x21\x5E\x00\x72\x90\xAD\x05\xDF\x8A\x4D\xA0\x16\x37\x16\x86\x4E\x90"
"\x50\x8B\x45\x3D\x13\x47\x7A\x8E\xF4\x29\xA0\x1B\xDB\x0E\xDF\xA9\xB4\x17\x25\x0D\x7B\xA8"
"\x7C\x90\x31\xBB\x6A\x4A\xA5\x65\x4F\xA9\xAF\x8B\x2B\x18\xA9\x35\xB0\xA3\x36\xAA\x42\x66"
"\xAD\x4F\x43\xA9\x19\x8D\x87\xFE\x59\xAF\xC9\x3C\x61\x33\xB7\x6C\x41\xAF\xDD\x0D\xB0\x15"
"\x96\xA4\xB9\xCC\xC4\x1C\x70\xC4\x51\x9D\x27\x72\xE7\x15\xBF\xDA\x20\x1C\x1E\x76\x7C\x3B"
"\x63\x12\xDC\xBA\xB5\xBE\x23\x49\xF4\xB5\x4D\x1C\x5F\x87\x84\x28\xD6\xD9\x4E\xD3\x87\xF1"
"\x15\xD0\x79\x70\xE2\x96\xB7\x56\xD0\x55\x57\x7D\xA5\x44\x16\xC4\xDB\x7D\x31\x54\xAA\x67"
"\x2D\x58\x32\xDD\xBB\xDA\x94\x9E\xEA\x55\xA2\x6D\x99\x79\x84\xB6\xDF\xCA\x26\x89\xB0\x37"
"\xE6\xEF\xA1\xE5\x7B\xBA\xA8\x56\xF0\x51\x67\xAD\x1C\x30\x0B\x9C\x63\x10\x4E\x89\x80\xF0"
"\x19\x10\x5F\x53\xA5\xC7\x8F\x86\xD2\x4D\xD7\xFB\x93\x5B\x7D\x5B\x97\x0D\xE1\x13\x5D\xE8"
"\xB9\xA6\x2C\x21\xDC\x65\x8E\x2E\xB1\xBA\x89\x4D\xE2\x3F\xB9\x5C\x24\x64\xFA\x54\x74\xDD"
"\x12\xEF\x9A\xF6\x45\xD5\x5C\x39\x4E\x56\x44\x9A\x10\xFD\x20\xDB\x38\x34\x37\x88\xA1\x8C"
"\x2E\x6E\x8B\x9F\xDC\xB2\x85\xDA\x8C\x60\x7F\x8E\x10\xA5\xCF\x99\xEA\x41\xA7\x18\xC3\xC5"
"\x0C\x73\x5C\x93\xB4\x65\x5E\x0D\xAE\xD6\x29\x16\x97\x88\x06\xB4\xC2\x1F\x4F\xB6\xCC\xF3"
"\xB3\xA8\x88\xBA\xB5\xC2\x35\x77\xC8\xB3\x01\x60\xF6\xD2\xFA\x1B\xC0\x9B\xCB\x24\x21\x0F"
"\xCA\xF5\x45\x93\x7B\x36\x9F\x75\xC8\x40\x71\xEE\x27\x9D\x5F\xD8\xE3\xF2\x86\xFA\xD3\x51"
"\x5C\x6C\xB5\x50\xB8\x73\xD2\x5C\x2A\xBE\xB1\x0E\xF1\xBD\x9B\xD9\xD4\x3E\x9F\x38\x52\x96"
"\x9E\xF4\xC9\x53\xB8\xB9\x8D\x99\x15\xBE\xC4\xDE\xE2\x4D\x60\xBD\xCC\x0F\xD1\x06\x6F\x0F"
"\xB6\xB1\x5D\xCE\x1B\xE4\x4D\xA7\xD8\x04\x0C\xC5\xA7\xA9\x5B\x35\xF2\x01\xAF\x37\x65\xBC"
"\x82\x53\x46\x27\x04\xE3\x2E\x0A\x89\xC2\xA9\xE2\xD6\x79\xA8\xF5\x1C\x85\xAE\x3C\x89\x91"
"\xF0\x5E\x8A\x8F\xB8\xDC\x4E\xCF\x7D\x9B\x1E\x22\x07\x01\x57\x5F\xEF\xB0\x5C\xAF\xE6\xAD"
"\xCE\x74\x8C\xB8\x9E\xFB\xC2\x01\x7C\x43\x82\x5B\xD9\xC0\x2B\x78\x57\x31\x7F\x48\x70\x01"
"\x85\x7B\x16\x53\x36\xC3\xC2\x60\xE1\x6F\x43\xBE\x76\xD8\x9F\x7F\xF8\x85\xD9\xC6\x36\x5B"
"\x0E\x7B\x8E\xA1\x39\x22\xBD\x2F\x3C\x87\x60\xB9\x84\x69\x0E\xBA\x1A\x3D\x44\xF3\x3C\xFB"
"\xE3\x39\xAF\x6B\xAB\xF9\x53\xAE\x59\x33\x07\x4E\xB8\x08\xEF\xF3\x95\xAD\x58\x3F\xA1\x8B"
"\xBA\xE4\x7B\x3E\x34\xEB\xB8\xAE\xE2\x3A\xB7\xA2\x40\x00\x38\x2E\x80\xE8\x40\x92\x08\x40"
"\x07\xCC\x93\x9E\xD3\x40\x6B\xD3\x10\x2F\xCB\x14\x28\x3B\x8B\x01\x74\x3E\x16\x14\x41\xD3"
"\xA3\x0A\xBD\x11\xBE\xFD\x4B\x24\xAF\x62\x34\xCA\x6B\x41\xE4\xAA\x91\xC4\x98\x07\xE4\xD3"
"\x41\xF0\xFB\x18\xFF\x73\x88\xD0\x3B\x3D\xBD\x28\x41\x0C\x8C\x30\x74\xBB\x3F\xFE\xA3\x98"
"\x9F\x73\x2B\x22\x5C\x40\xB4\xA0\xA3\x93\xE8\x3D\x24\x8C\x3B\x28\xC4\x30\x81\xA3\xB6\x22"
"\x9C\x93\x25\xFC\x3B\x34\xEB\xBD\xB9\x83\xB9\x8B\xDA\xBC\x1F\x3C\x8B\x26\x14\x09\x9C\xDA"
"\x2D\x7F\x99\x80\xD2\x53\xBB\x98\xA8\x3D\x31\x04\x88\x8D\x08\xB7\xDF\x30\x01\x6E\x99\x25"
"\xFD\xCB\x2B\x17\x44\xC3\xDB\x93\x3C\x92\xDA\xC3\x40\x6C\x95\xB3\xDA\xC2\xE3\x38\xC4\xD6"
"\x1A\xC3\x28\x4C\x3F\x90\xE1\x42\xBB\x80\x36\x32\xC4\xA5\x88\x0B\x3F\x20\xBC\x23\x29\xA4"
"\x18\x31\x09\xC3\x14\xC9\x3C\x83\x9A\xC1\x93\x30\x39\x00\xA0\xC2\x45\xE9\x36\xD3\xD0\xA7"
"\x70\xF3\xBF\x5A\xA8\xC4\xF1\x80\xB9\xC6\x50\xBF\xC4\x70\x43\x1D\xE3\xBA\xEF\xBB\x16\x50"
"\x24\xC4\x1B\xDC\x37\xF4\x6B\xBF\xC3\x4B\x0C\x25\x9C\x0A\xB0\xE9\x3B\x41\x39\x8E\xA2\xDB"
"\xBE\xD7\x4B\x15\x76\xD2\x42\xD0\x20\xC6\x71\x93\xB8\x9F\x72\xC2\x48\x3C\x42\xE7\xF0\x3B"
"\x12\xA1\x10\x15\x39\xC3\x06\xE4\xC4\xAC\xB3\x40\x1B\x2C\x8A\xD1\xDA\x39\xDB\x93\x29\x4C"
"\x1C\x44\x09\x51\x40\x48\x74\x93\x64\x3C\xC7\x0D\x3C\x89\x35\xC4\x29\x73\x61\x3C\xEC\xA0"
"\x45\x2F\x14\xB9\x5D\x2C\x46\x5D\x44\xBA\x7F\x4B\xB3\x3E\xF9\x8B\x5A\x4C\xC1\xC8\x00\xC8"
"\x2A\x31\xAA\x7F\xB4\xC7\xF3\xE8\xC5\x1A\x64\xC0\x69\xAC\x93\x1A\x08\xC5\xE6\x1B\x93\x82"
"\xCC\x35\xC1\x80\xBC\x47\x0C\xAB\x6E\xF4\x46\x06\x19\xC5\xB6\x08\x41\x56\xCB\xBE\x52\x04"
"\x80\x03\x64\xAA\xAD\xC8\x41\x60\x24\x2B\xFC\xB0\xAB\x6D\xDC\x27\x53\xBA\x43\x3C\x6C\x88"
"\x73\xA8\x26\x15\x62\x3E\x71\xB1\xC4\xBE\x0A\x49\x94\x18\x48\x84\x38\x41\x88\x0C\x17\xD4"
"\x5A\x41\x6F\x22\x3A\x68\xD4\xC7\xE7\x23\xC7\xA6\x68\x44\xEC\xA3\xAF\x30\x31\xB1\xA3\x8C"
"\x48\x09\xB9\xA8\xFA\xBA\xB3\x9D\x3A\xC3\x45\x63\xCA\xBE\x40\x82\x54\x90\x32\x6B\x64\x48"
"\xF1\x93\x44\x26\x3C\xC8\x37\x74\x84\x47\x5A\x21\x61\x88\x94\x0A\x6B\xBD\x5F\xC3\xC8\xB1"
"\x1B\x0A\x1F\x14\x3A\x5B\x1B\x47\x67\x7C\xC8\x8E\x84\x3E\xF4\xAA\x01\xB6\x44\x44\xAE\x04"
"\x3A\xC5\x9B\xB9\xE7\xD3\xA2\x15\x5A\xAF\xA7\xDA\x49\xB9\x54\x48\x2C\x8C\x34\x68\x71\x86"
"\xAF\x7C\xC3\x5B\xF4\xC5\x5C\xB4\xAE\x5D\xCC\x8C\xBD\x60\x8F\xDE\xEB\x0F\xD2\x70\xC8\x89"
"\x2C\xC4\x72\x8B\xCC\x23\x41\x46\x64\x34\xC6\xA8\x70\xCB\x7F\xD8\x46\x43\x99\x85\xCC\xEC"
"\x98\x96\x0C\x12\x9B\xFB\x98\x39\x44\x4D\xA5\xB4\x4C\x7E\x04\x16\xB4\xA4\xC6\xD4\x8C\x2D"
"\x3E\x41\xBB\xAC\xA8\x48\x8C\xD8\x86\x91\xD3\xA8\xA4\x60\xC7\x89\xF8\xBD\x33\x09\x89\x8D"
"\x13\x44\x43\xE3\xC4\x0B\xDC\xCB\xBF\xD3\x49\xC5\x84\x45\xAD\x04\x8D\xC1\x7B\x39\x7C\x14"
"\xCA\xC6\xDC\x47\x97\x9C\x87\x54\x98\x47\x0C\xD1\xCB\xB4\x8B\xBE\xA9\x98\x21\xEB\x5C\xC8"
"\x8D\xFC\x07\x46\xF8\x0B\xC1\x9C\xC4\xF0\xCC\xC7\x8A\x73\x11\xEF\x2C\x3F\x8F\x31\xCD\x35"
"\x4B\xCB\x93\x69\xCF\x9C\x23\x35\xC4\x2C\xA5\x27\x14\xBD\xD5\x84\xCD\x3A\xE9\xB5\x57\x9C"
"\x8A\xEA\x23\x19\x6E\xDC\xCE\xE3\x7C\xCF\xE5\x94\x90\xF8\xE4\x4E\x60\x33\xCE\xC6\x73\x4C"
"\x87\x43\xCA\x36\xA4\xCF\x9B\x43\x41\x60\x82\xCE\x3A\x7C\x40\xC7\xAC\x49\xE0\xFA\x8D\x92"
"\xCC\x44\xC5\x90\x50\x71\xCA\xCF\x80\xD0\x06\xE6\xDB\xC6\x49\xC4\x8A\xF3\xFC\x49\x78\x2B"
"\xCD\x5D\xAB\x3B\xFC\xEC\x18\xBB\x44\xC0\xD6\x74\x3F\x97\xEA\xCD\xFA\x8C\xCD\x8E\x79\x28"
"\xAC\x48\xD0\x8C\x0C\x50\xEC\xE4\xCD\x6C\x64\xBE\x9C\x48\x47\x75\xC4\x4B\x9E\x00\x47\x13"
"\x54\x4E\x0F\x5B\xCF\x0B\x3D\x09\xB9\x74\x4E\x0A\x61\x4A\x13\x1D\xC6\x59\x13\xCC\xC1\x7C"
"\xC7\x19\xE5\xBC\x87\xF0\xB5\x20\xA5\x15\x5E\xB2\x52\x6C\x41\x8A\x9C\x0C\xA9\x77\x44\x3E"
"\x28\x75\xCD\xEC\xDC\x98\xCB\x13\xD2\x80\x00\xC9\x6B\x24\xC1\x07\xED\xBA\x2E\xC4\xBC\xC7"
"\x5A\x36\x16\xC5\x8F\xFE\x10\xB5\x4F\xB4\x18\x3C\xBD\x42\xD2\xCA\x46\x29\xBD\x49\x0A\x5D"
"\x89\x03\xCC\x51\x0F\x5C\xD0\xEB\x04\x37\x47\x53\xC3\x2E\x6D\xD2\x47\x51\x4E\x32\x45\x48"
"\x0B\xE5\xC5\x9C\x8A\x38\x0D\xC5\x45\x35\x5D\xA7\x87\x7C\xCD\x4F\x19\xAD\x29\xF5\x3F\x98"
"\x70\xD4\x48\x2D\x47\x2B\xF2\xD3\xAD\xB4\x54\xA2\x69\xB5\x4A\x9B\xCF\x37\xAD\xD1\x0F\x2D"
"\x55\x8E\xF9\x39\x2D\x4D\x18\x3D\x55\x52\x40\x2D\x0A\x31\xE9\x0E\x46\x13\xD4\x22\x3D\xD4"
"\x42\xFD\xCE\x7B\x24\x31\x10\x6C\xCE\x08\x65\x53\xD9\xAA\x90\xE8\x04\x55\xA2\x44\x49\x8E"
"\x4A\x56\xB5\x93\x45\x0A\xB1\xAB\x35\xB5\x37\x97\x58\x43\xED\xCC\xCE\x4F\xA5\x8A\x67\xA5"
"\x90\x92\x19\x09\x60\xFD\xC2\x5E\x45\x08\x6D\x05\x0B\x70\x0D\xC8\x24\xA5\x0A\x71\xE5\x88"
"\xC9\x6C\xAE\xB3\xEC\xC4\x45\x01\x13\x73\xBD\x50\x20\x5D\x14\x51\x7B\x17\x1D\xB8\xBE\xBC"
"\xDC\xD1\x40\x75\xD0\x23\xA1\xB6\x41\x3D\xCD\x62\x63\x8F\xA5\x63\x4A\x17\x25\x54\x9A\xBB"
"\x15\x46\x5B\xD4\x0E\x45\xD6\x4A\xE5\xC9\x63\x45\xCE\x3A\x55\x2B\x30\x75\x90\x8B\x80\xBF"
"\x2D\x9A\x49\xD0\xA4\x90\x89\x82\x58\x23\x0D\x55\x87\xBD\x88\x4D\xA0\x17\x3A\x98\x49\x95"
"\xA4\xAE\xD5\x72\xD3\x8E\x18\x14\x98\x34\xCC\xB1\xEC\xBE\x3D\x7D\x49\x16\x02\x35\x29\xD1"
"\x27\xFA\x40\xD9\xDC\x1C\xCB\xB2\x2C\x2D\x99\x9D\x23\x67\xA8\xD9\x55\x31\xC9\x93\xEC\x59"
"\x87\x38\x07\x97\x9D\x23\x98\x9D\x2E\x61\x33\xD0\x28\x05\xDA\x94\x95\x49\x19\x8D\x46\xB4"
"\x50\xCF\x84\xB5\xB0\xA7\xA3\x54\xFA\x8B\x88\x89\xB5\x05\xB2\x64\xDA\x0B\xE5\x8B\x09\x98"
"\x17\x18\x24\x57\x05\xA5\x39\x74\xED\xC9\xB3\x40\xA9\x27\x35\x56\xA4\x9D\xCE\x13\x85\xDA"
"\xBB\x14\xC2\x2E\x5D\x3C\x15\x24\x40\xA7\x3A\x92\xE5\xE2\xD2\xE7\x84\x5B\xE2\xF4\xD9\x59"
"\x5D\x91\x9B\xFD\x4C\x0C\xED\x56\x25\x89\x51\xD0\x6A\x50\x69\xA4\x0A\xE1\x44\x2E\x81\x1D"
"\x4A\xAF\x4C\xBC\xF4\xE3\x3D\x3F\x31\xDC\x94\x40\xDC\xF5\xC0\xD4\x93\xC8\xD8\x3D\x9C\x28"
"\xEF\x6B\xC4\x82\x1D\xDB\x86\x12\x50\x9B\x2C\x56\x5A\x7D\x9C\x51\xA5\x10\x24\x54\x49\xBA"
"\xE5\xD3\xD1\x6D\x46\x85\x29\xA8\x69\x45\x88\xCA\x24\xDC\x4D\x94\x53\xD8\xAD\xC7\xCD\x95"
"\xD4\xBF\x2D\x8C\xCD\x23\x3F\x33\xDD\x89\xDC\x05\xDD\x88\x7D\xDD\xF1\xB0\x0D\x89\x60\x46"
"\x38\xED\xD3\xC8\x08\x41\xB7\x6A\x3B\x9E\x75\xD6\xA7\x43\x8F\x94\x7B\xCC\xCD\x1A\x5C\xE4"
"\x9C\xA8\xD0\x6A\x44\x34\xDD\xD2\x93\x8A\x5E\xA0\xFC\xDC\x7B\x1D\x89\xA3\x65\x58\xE2\x6D"
"\xAC\xEA\x9A\xDB\xCC\xCB\x58\x5F\x9D\x40\xCD\xEC\x5B\x61\x2D\x0A\x15\x29\x5F\x65\x6C\x92"
"\xA6\xED\x2C\xDB\xD5\x0B\x0A\xE4\xDD\x86\xFD\x59\x8B\x7C\xD4\xDF\x2D\x8A\xC7\xFD\x89\x08"
"\x61\x5D\x5D\x6B\x5B\xB5\xB5\xD8\x95\x1C\x50\xB0\xCD\x43\xA2\x80\x8F\xB4\x5A\x47\x55\xD5"
"\xDE\x82\x2A\xDF\xA3\x6C\xD6\x49\xC3\x5E\xAD\x0D\xCA\xDE\xE5\x08\xEF\xBD\x5E\xCF\x3D\x92"
"\xC7\x65\xCE\x23\x69\x8E\x29\x0D\xD3\xD8\x5D\xDE\xC8\x90\x57\xE3\x5A\x59\xD4\xD5\x5F\xEE"
"\x4C\xDF\xAF\xDD\xDD\x15\xA6\xC1\xFB\x7D\xAB\xE9\xAA\xDF\x5F\x3C\x27\x17\xD6\x16\x2E\x79"
"\x0E\xD9\xCB\x43\x91\x2D\x93\xDB\x35\x58\xE5\x65\x30\xB7\x3D\xBA\x59\x41\x8C\x04\xFB\x0E"
"\x1B\x2E\x38\xB5\xE5\x8B\x1C\x81\x47\xC5\x3C\x37\x09\xEE\x60\x02\x5D\x5B\x6B\x95\x5C\x48"
"\x65\x59\x80\x3B\x12\x39\x78\xB7\x3D\xF9\xA5\x4F\x59\x10\x1E\xF6\x52\x18\x05\xCF\x97\xB0"
"\x42\x5D\x89\x14\x91\xD5\x22\x68\x49\xDF\x21\xA4\x10\x67\x41\x09\x68\x11\x06\x40\x8C\x89"
"\x1A\x48\x85\x72\x59\x63\x39\x2E\x0A\x3A\xB6\xE3\x55\x32\xB0\x19\x66\xCC\x66\xF1\x5A\x97"
"\x80\x63\x3C\x2E\x0A\x39\xD8\x86\x12\xCE\xB2\x6D\x00\xE3\xB9\xAB\xE3\xAC\x5C\x11\xFE\xA4"
"\x33\xD3\xBB\x95\xB7\x23\xA8\x6A\x62\x13\x48\x43\x64\x8A\x0C\x64\x94\x70\x45\xF0\x5C\xE2"
"\x48\x11\xC6\x81\x5D\xDB\x08\xA6\xC7\x0C\xA4\xE0\xED\xA5\x61\x3B\x14\x5D\x14\xF6\xD6\x54"
"\xC2\xBB\x88\xA1\x19\x1D\x65\xE1\xAD\xE1\x5A\xC6\x3A\xAC\x80\xA9\x57\x3F\x71\x3B\x73\xE4"
"\x08\x1D\xF8\x4D\x80\xA8\x05\xC4\xE2\xE5\x83\x10\x19\x79\x71\x04\x1B\x39\x05\x77\x25\x18"
"\x98\x09\x98\x2B\xC8\xE5\x79\x25\x99\x66\x7E\xE6\xAC\x29\xE6\x7D\x41\x02\x65\x16\x1B\x00"
"\xD3\x81\x57\x9E\x97\x2E\xBE\x9C\x6A\x6E\x18\x8D\x59\xA4\x6D\xAE\x97\x61\x66\x1E\x17\x23"
"\x19\x3A\x88\x14\x68\x15\xB3\x00\x53\x67\x3A\x55\x1C\x74\xD6\x81\x77\x2E\xE0\xCE\x1C\xD2"
"\x36\x93\x92\x79\x10\x34\x45\xE2\xE7\xC1\x69\xAA\xF6\x55\x9A\x7F\x2E\xD9\xC4\x11\x68\x8E"
"\x91\x22\x8F\xA9\xCD\x7E\x56\xE8\xBD\x69\x2A\x76\x1E\x2C\x65\x0D\x9D\x86\xEE\x98\x24\xF2"
"\x18\x3A\x56\x21\xF9\x6B\xD3\x85\xD6\x68\xBC\xD9\x28\x4A\x26\xA7\x8D\x05\x9D\x8E\x36\x67"
"\x8E\x90\x67\x6C\x36\xE8\x8C\xDB\xE8\x94\x9E\x9B\x70\x02\xE8\xA5\x61\xE9\x81\x56\x9C\x97"
"\x66\x9B\x00\x43\x82\x60\xFA\x5F\x95\xC6\xE9\xA9\xC9\x0E\x7F\x3A\x9B\x9D\x1E\x69\xBE\xF1"
"\x69\xB6\x41\x33\x8F\xCE\xE9\xA2\x4E\x1A\xC5\x4A\x21\x61\x98\xA3\x38\x9E\x66\xAF\x41\xEA"
"\xAB\x5D\x6A\x47\x68\xEA\xCB\x79\x6A\xA5\x1E\xE4\xA9\x1E\x1B\xE2\x13\x62\xA3\xE6\xEA\xAE"
"\xF6\x9B\xBE\xDC\xA2\x65\xF1\xEA\xB1\x26\xEB\xB2\x36\xEB\xB3\x46\xEB\xB4\x56\xEB\xB5\x66"
"\xEB\xB6\x76\xEB\xB7\x86\xEB\xB8\x96\xEB\xB9\xA6\xEB\xBA\xB6\xEB\xBB\xC6\xEB\xBC\xD6\xEB"
"\xBD\xE6\xEB\xBE\xF6\xEB\xBF\x06\xEC\xC0\x16\xEC\xC1\x26\xEC\xC2\x36\xEC\xC3\x46\xEC\xC4"
"\x56\xEC\xC5\x66\xEC\xC6\x76\xEC\xC7\x86\xEC\xC8\x96\xEC\xC9\xA6\xEC\xCA\xB6\xEC\xCB\xC6"
"\xEC\xCC\xD6\xEC\xCD\xE6\xEC\xCE\xF6\xEC\xCF\x06\xED\xD0\x16\xED\xD1\x26\xED\xD2\x36\xED"
"\xD3\x46\xED\xD4\x56\xED\xD5\x66\xED\xD6\x8E\x9A\xE1\xDA\xA2\x32\x46\x6B\x8B\x26\xAE\x1A"
"\xA0\x6D\x16\x2A\x2E\xD7\x96\x6B\x59\x35\xEB\xCD\xD4\x93\x96\xD6\xED\x8D\x1E\x11\xE0\x66"
"\x23\xDF\xC6\x52\x98\x0E\xEE\x9C\xE6\x27\x10\xA6\x22\xE3\x06\xDF\xE4\x5E\xEB\x8D\x5A\xE4"
"\x23\x72\x6E\xF4\x42\x6E\xE8\xD6\x68\xFA\x10\xCF\xE1\xEC\x6D\x3D\x19\x08\xFD\x20\x6E\xEC"
"\xAE\xA2\x6E\xE2\x0B\xD9\x20\xEA\x21\xE2\x5A\x7E\x99\x80\xF4\xAE\x97\xFC\xCA\xEC\x1A\x28"
"\x2F\x16\x72\xB0\xBB\xFE\x22\x16\xDA\xE7\xB9\xDB\x84\xB0\x16\xEF\xA9\x01\x6B\xFB\xFE\xE9"
"\x0B\xFE\xA4\x15\x9A\xEF\x84\x71\xA3\x2D\xBA\x6F\x85\xB9\xCD\x51\x89\x97\x61\x9E\x80\xB0"
"\x04\xA3\x65\x09\x70\x33\x32\x61\xE5\xAD\x1E\xCD\x89\x6F\x41\xEA\x66\x98\xF9\xEF\xFD\x4E"
"\x1E\x76\xDB\x6A\x7C\x3D\xEE\x29\x5C\x65\x2F\xD6\x93\x35\xC1\x38\x4F\x73\xD2\xD8\x62\x04"
"\xD2\x2C\x5E\xBF\xA5\x1E\x84\x42\x0A\xE6\x56\x9B\x11\x34\xC2\xA9\x29\xCF\x80\x38\x07\xA9"
"\x0E\x56\x0B\x2E\x53\xCE\xE5\x51\xC0\x75\x1A\x1A\xBF\x67\xA7\xA9\x4A\x8B\xD1\x0F\x19\x17"
"\x09\x43\x99\xEE\x2B\xE5\x71\x29\x26\xD9\x14\xBF\x0A\x16\x97\xDD\x4D\xD0\x01\x2B\xB0\x91"
"\xF3\x26\xC8\x10\x07\x9D\x13\x44\x72\xB4\x11\xF2\x56\x95\x9A\x1B\xAF\x71\x28\x5E\x72\xB8"
"\x1B\x12\x28\x26\x5B\xAA\xF9\x72\x0E\x9D\x9A\x22\x9F\xAF\xE7\x6E\x9B\xEB\xEA\x72\x00\x15"
"\x63\xBC\x5D\x52\xBB\x15\x0E\x29\xB7\x67\x8B\x1D\x10\x2C\x07\x90\x3A\xA7\x1C\xDA\x9A\x73"
"\xB3\x59\xF3\xF0\xAC\x1A\x31\x1F\xF3\x52\xE6\xDE\x1D\x3F\xF3\x0C\x4E\x73\x9D\x4E\xCA\x36"
"\x3F\xD2\x8D\x09\xA8\x32\x27\x52\xEE\x26\xF1\x3B\x27\xBC\xEC\xD3\x44\x46\x8D\xF2\x59\xE3"
"\x61\xF0\x10\xB4\xE0\xF0\x73\xDF\xB5\x6E\xD0\x31\x5D\x0D\x8E\xE9\x48\xB7\xF1\x05\x26\xF3"
"\x37\x6F\x74\x45\x07\xF2\xA6\x29\x74\x87\x5E\xA4\x49\xC7\xE7\xB5\x7D\xD1\x44\xDF\xF4\xC0"
"\xB3\x72\x5E\x27\x15\x59\x4A\x30\x39\xD0\x13\x90\x7C\x4A\x3D\x87\x4B\x14\xED\x18\x83\x04"
"\x9D\xDC\x1D\xF4\xB2\xA9\xF5\x43\x8F\x75\x59\xFF\x63\x7C\x89\x76\x47\xF7\xF1\x20\x67\xF5"
"\xA8\x71\xF3\x8D\x31\x8B\xF0\x1E\xD7\x4C\x8D\xDB\x53\x8F\x91\x9B\x46\x88\x05\x87\x10\xE1"
"\x3C\x87\x01\xA7\x10\x6E\x96\x97\xBA\x74\xF7\x41\x9A\x70\x43\x55\x18\x66\xFF\x1C\xB7\xD2"
"\x06\x24\xB8\x99\xDE\x5A\x21\x47\x68\x9C\x6B\x6F\xF5\x14\x2E\x92\x45\x6F\xCA\x69\x97\xBE"
"\x59\x67\x1A\x80\xE7\x76\x5C\xA7\x74\xAB\x9E\x23\x4B\x2F\x88\xFA\x66\x21\x48\x26\x95\x00"
"\x37\x96\x38\x63\x21\x42\x6E\x1C\xF8\x7E\xF0\x96\xB1\x77\x8B\xD1\x66\xFF\x84\x19\xAC\x76"
"\x19\x01\xD3\x65\x5D\x8D\x22\xF5\x3D\x9B\x5F\xE6\x38\xE4\x3E\x58\x46\x4F\xE5\xDD\x6C\x72"
"\x48\x9F\xF9\x9C\xB3\x3E\x4F\xA7\xB9\x92\x26\xF9\x54\xBA\x79\x4A\xEF\x79\x8B\x29\x69\x7A"
"\xE5\x98\xA0\xDF\x79\x6E\xFA\xF9\x4A\x3B\xFA\x93\xD6\x72\x04\xDF\xE4\xB9\xA2\x78\x70\xBB"
"\x34\x19\xCB\x34\x00\xD8\xB4\x4E\x63\x77\xEA\xFC\x70\x9D\x8C\x7A\x19\xCB\xE4\xAA\x00\x35"
"\x3A\xEA\xBD\xAB\x2C\x4C\x20\x3B\xCC\x9E\x84\x78\x4B\x03\xB2\xAE\x1F\x82\xAF\x7F\x78\x54"
"\x05\x74\x08\xAD\xF9\x1F\xAF\xF6\x79\x8F\x79\x8B\xC9\xB3\xB4\x0F\xDF\xB8\xA7\x8A\x2B\x08"
"\x4B\xAB\x7E\x47\x19\xCC\x5E\x76\x71\x86\x2D\x16\x40\x4C\xE4\x7B\xA8\xDE\x86\xBF\x37\xFC"
"\xBE\x97\x47\x5E\x02\xFC\xBE\x38\x7C\xBF\x4F\x8A\xC7\x07\x8B\xC8\x6F\x7C\x97\xA2\xFC\xAC"
"\xB0\xFC\xC4\x9F\xFC\xC5\x47\x7C\xC5\x6F\x63\xAC\x2C\x4C\xB6\xBB\x6E\x92\x78\x28\xB9\x65"
"\x60\x8D\x70\x37\xD4\x47\xCF\x4E\x97\xCF\x09\x25\x78\xD8\x52\x5C\xD7\x3C\xFB\x46\x3D\x5B"
"\x4D\x7D\xFB\x2C\x8F\x7D\xDA\x87\xF5\xBA\x8F\x73\x2B\x3E\xF8\xB9\x5F\x37\x4E\x8F\xB0\xA7"
"\xB7\xC5\x00\x1E\xE3\xD5\x32\xFE\xC4\x64\xC2\xE5\x3F\xFE\xB6\x90\xBB\xE4\xBF\x2B\xE7\x27"
"\x69\xE2\xC7\x23\xEA\x97\x7D\xE8\xC7\xFE\x89\xB0\xB4\xD9\x4D\x18\x3F\xA6\x5E\xEB\x7F\x4B"
"\xAC\xBF\x75\xD8\xF7\xFD\xEA\x2F\x8C\xF6\x7D\x79\x4F\xAE\xE0\xDD\x7F\x5E\x38\x67\x0E\x95"
"\xE7\xFD\x91\xD4\xFB\xDF\xC0\xE0\x74\x73\xFF\xD4\xAF\xDD\xC0\x17\x0B\x80\xDE\x49\x71\x07"
"\x00\x30\xA0\xC0\x81\x03\x27\x38\xFB\x87\x30\xA1\xC2\x85\x0A\x9D\x4D\x20\x08\x31\x22\x40"
"\x83\x0C\x2B\x32\x74\x28\x31\xA3\x40\x8A\x16\x3B\xFE\xC3\xA8\x51\x23\x47\x8F\x15\x41\x86"
"\x94\x38\x92\xE4\x42\x93\x27\x09\xA6\x54\xB9\xD0\x9C\x88\x96\x34\x05\xCE\x82\xD9\x91\x65"
"\xCD\x97\x38\x13\xEA\xAC\x09\xD0\x4B\xC5\x79\x43\x80\xEE\x3C\xC8\x70\x16\xC1\x21\xF3\x2A"
"\x7A\x31\x1A\x90\x51\xCF\x98\x33\xA1\x02\x94\xEA\xD4\xEA\xD1\x8A\x4A\x07\x32\xCD\xAA\xB5"
"\xE5\x4D\x86\x32\xAD\x62\x65\xF8\x34\xEC\xC9\xB3\x0B\xD3\xAA\xD5\xC8\x56\xA1\xDB\xB7\x50"
"\x45\x98\xE3\x4A\x17\x40\xDC\x84\x73\xF3\x46\xE4\x89\xB3\xEF\xD6\xA9\x0B\x19\xA9\x05\x0C"
"\x53\x30\x50\xC4\x2A\x15\x0F\x26\xFC\xCF\x31\x4D\xC6\x24\x25\xB7\xA4\xEC\xD1\xF2\x49\xCC"
"\x1D\x35\xC3\x85\xAC\xB0\xAC\x5F\x81\x76\x41\x27\x24\x6A\x95\xB3\x47\xD4\x50\x4D\x98\x31"
"\xB3\x69\xA8\xA3\xD7\xB4\xAF\xF8\x05\xDC\x55\xE0\x57\xB4\xA9\x91\x42\x16\x6D\xD6\xA2\x1C"
"\x1D\xC4\x8B\x1B\xD7\x61\xE2\x2D\xEE\xA5\x4D\x79\x8F\x2E\xE8\x7B\xE5\x43\xA8\x7B\x11\x7A"
"\x7E\x5B\x3D\xF2\x73\x88\xD9\x87\x1F\x3F\x9E\x7C\x7B\xC0\xD2\x49\xF3\x76\xFF\x0E\x3E\xAF"
"\x6A\xBC\xBD\x4D\x23\xFC\xF9\x98\x70\xEE\xF6\xA0\xE7\x43\x5D\x5F\x3E\x2C\xFE\x85\xF6\x8D"
"\xEE\x57\xD8\xDF\x62\xD1\x4D\x15\x60\x4B\xE4\x99\x06\xDC\x73\xBB\x2D\x34\x8F\x30\xB6\x3C"
"\xF8\x60\x73\xCE\xF9\x37\x20\x64\xD7\x41\x24\xD4\x54\xF0\xDD\x57\xE1\x3F\xFD\x2D\x28\x97"
"\x55\x07\x32\xB8\x4D\x89\x26\x9E\xB8\x8D\x33\x55\x05\x07\x5A\x82\x1C\xB2\xA7\x9B\x84\x21"
"\x8A\x07\x40\x19\x32\x16\xA6\x55\x76\x17\x86\xA5\x23\x8D\x02\x65\xA7\x92\x8B\xA3\x8D\x98"
"\x50\x81\x46\x01\x49\x92\x90\x2F\xFE\x73\x4E\x89\x0F\x72\x42\x5B\x6C\x25\x4D\x47\xA1\x45"
"\xF3\x6C\xE3\xA0\x2D\x1D\x7E\x44\xE5\x92\x4D\x6E\xF3\x64\x94\x16\x6D\x78\x19\x52\x5F\x86"
"\xF9\x9A\x94\x17\x75\x59\x25\x93\x4E\xDA\x02\x65\x9A\x63\xB2\x29\x20\x42\x67\xC2\x29\xE6"
"\x94\xFA\x99\xF9\x66\x9C\xB0\xCD\xB9\xA7\x9D\x7D\xE6\xB9\xA6\x55\x20\xFE\xB6\xE2\x73\x19"
"\x4E\x18\xD0\xA2\x6D\xD1\xC7\x50\x2D\x74\xE8\x30\x91\x9A\x8F\x42\xE5\x28\x4C\x64\xD6\x99"
"\x5F\x8C\x60\x19\x75\x28\x42\x46\xFA\x85\xA4\x47\x4A\xC6\x57\x24\x73\x9F\x8E\x36\xC1\x29"
"\x1E\x6D\xFA\xD9\xAA\x34\x96\xDA\xD1\xA9\x34\xD1\x6A\x91\xAD\xCA\xA5\x02\x61\xAF\x80\x98"
"\x87\x60\xA2\x3E\x02\x34\x96\x74\x90\x02\x48\x50\xB1\xA1\x09\x2B\x9E\xB2\x3E\xD1\xB9\x9D"
"\xB3\xEF\x41\xFB\x9C\xB4\x5C\x0E\x4B\xAC\x9E\xD8\x5A\x0B\x2B\x5D\xDC\x52\x1B\x52\xA6\x45"
"\xB2\x59\x9D\xAE\x61\x89\x6B\x9D\xAA\x8C\xA2\x2A\xAA\xBA\x97\x1A\x85\xEE\xAB\xE0\x72\xCA"
"\x9F\xBB\x33\x82\x7A\x63\xBA\xD8\xE2\x5A\x91\xB9\x21\x2D\xE7\x55\xBE\xDA\x3D\x57\x83\x36"
"\xAB\x15\x95\xA3\x45\x3B\x26\xDC\x22\xB3\x40\xF1\x4B\x96\xC3\xD8\x92\x1A\xEC\xC4\x01\x7D"
"\x7B\x6C\xAA\x03\x95\x2B\xF1\x68\x18\x6F\xAB\xED\xB0\x1F\x8B\x1C\xB2\x8F\x23\x9B\x5C\x72"
"\x4D\xF1\x0A\xC6\x31\x8D\x2B\xDB\xCB\x57\xC6\xED\x06\x2C\x2B\x4D\xF1\xE6\x34\x2F\xBB\x1E"
"\xC2\xAC\x2F\xBE\x15\x69\x83\x04\x7A\xC8\x01\xDB\xF0\x61\x1D\x7E\x28\xF0\xC2\x27\xC9\x21"
"\xF0\x69\x08\x33\xBC\xAE\x78\x10\x53\xA5\xD6\xD4\xCB\x5A\x3C\x6B\xC5\xB7\x5D\x41\x5B\xD7"
"\xAF\x75\xD8\xED\x5F\x47\x13\xD4\xB2\x72\x5C\x7B\x4D\x1B\xD8\x39\x5F\x76\x36\xDA\x66\xA8"
"\x4D\xD7\x04\x6D\xA3\x0D\xB7\xD9\x6E\x7F\x9D\x72\x6A\x73\x7B\x5D\xF7\x61\x7B\x77\xDD\x37"
"\x50\x2F\x6F\xDC\x6F\xC7\x6A\x0D\xEE\x69\xD4\x65\xC2\x18\x50\xA8\x03\xC3\x4B\x58\xD8\x9B"
"\x8D\x4D\xB3\xE2\x27\x11\x89\x53\x2D\x35\x54\xAD\xB5\x56\x00\x27\xFE\xAE\x72\xB5\x90\xA4"
"\xCD\xE6\x9C\xD7\xBC\x9D\xD5\x09\xF9\x1B\x2B\xA2\x3E\x8A\xE0\x0C\x8A\x25\x9E\x42\xB4\xEB"
"\x74\x15\x0C\x9A\xE4\x2E\x51\xFE\x63\xE1\x6A\xE1\x0E\x99\xEE\x11\x01\x1F\xF9\xDA\x1A\x11"
"\xAF\xA1\xF1\x19\x21\xDF\x93\xF0\x10\x31\x8F\x93\xF3\x04\x41\xAF\xA9\xF2\x04\x21\x1E\x95"
"\xEF\xE2\x61\x0F\x90\xE3\x4A\x07\xF4\x79\xE3\x49\x5B\xE5\xDA\x9F\x0C\xCD\x33\x5B\xD7\xB6"
"\xA9\xC7\xBB\xF8\xA8\x4F\x6E\x1A\x6B\x2C\x9E\x2F\x3B\x8A\x2A\x1A\xCD\x78\xF7\xE3\xD3\xE5"
"\xB8\x42\xA7\x58\x9F\x91\x1E\xED\xAB\x73\xF3\x23\x51\xFD\x4C\x74\x3F\x1A\x61\x6E\x67\x74"
"\xC9\xCE\x95\x0E\x58\xA2\x04\x1E\xAE\x69\x2A\x91\xDE\x44\xDA\x77\x15\xED\x59\xC5\x0B\x14"
"\x24\x89\x05\x1B\xD5\x41\x79\x9D\x2B\x84\x38\x1B\xA1\x69\x3E\x18\x14\x12\x02\x4A\x2B\x1C"
"\x3C\x21\x00\x05\xC2\x3D\xBD\x68\x50\x51\x0A\xE3\xD9\xE3\xE8\x85\xAC\xCA\x85\x0E\x53\x43"
"\x79\xDA\x76\xC2\xA7\xBF\xF7\x9D\xE4\x66\x41\x32\x5C\xEB\x76\x28\x1E\x20\x02\xC0\x7B\x0D"
"\x24\xC9\x3C\xE4\x40\x31\x21\x46\xD1\x76\x50\x43\x22\xD6\x00\x30\x01\x47\x08\x6C\x54\x35"
"\x11\x20\xB6\x16\x18\xBD\x17\x82\x0F\x83\x32\x8C\x98\x56\xC0\x58\xBD\x33\xDE\xC5\x85\x6A"
"\x74\x0F\x0A\xD1\x58\x41\x31\x8E\x67\x8D\xB9\x93\x23\x40\xE0\xE8\x41\x3B\xC6\xB0\x6C\xDB"
"\x89\x21\x13\x97\x54\x2F\x1D\xDE\x6B\x83\x3D\xF4\x91\x12\xFF\x68\x15\x6B\xE1\x84\x8B\x01"
"\xAC\x21\xB6\x0E\xB9\x3F\xAD\xD4\x60\x4B\x3E\x31\x5D\xED\xAC\xF8\x1C\x2F\xFA\x48\x93\x58"
"\x9B\x40\x19\x0C\xD6\x11\x46\xB6\x84\x93\x59\x73\xA3\x1D\x95\xC8\xC7\x23\xB9\xE7\x5A\x05"
"\x0C\x9E\x1D\xCB\xC8\xC6\x56\x16\xAF\x8A\xAE\xA4\xE5\x2C\x79\x58\xB3\x54\x8E\xC6\x8F\x91"
"\xC4\xA1\xC6\x40\x37\x48\x5C\x32\xC8\x87\xCF\x81\xA4\x14\xFF\xE5\xAA\x3A\xCA\xB2\x67\x86"
"\x24\x23\x22\xA1\xC2\x34\x92\x18\x26\x93\x8E\x1C\x16\x29\x53\x57\x4D\x8B\xD5\x60\x74\x2A"
"\x11\xE5\x5A\xB2\x49\xA3\xFF\x18\x0B\x90\x39\xEC\x9D\x19\xC9\x59\x4B\x74\xDE\xB2\x4D\xB1"
"\x64\xA7\x32\xD5\x99\x3C\x99\xC5\x53\x98\x48\xD4\xA5\x5F\x78\x79\x4C\x94\x38\xB3\x97\xF4"
"\x5C\x9D\x11\x03\xD5\x29\xF7\x59\x6E\x27\x74\xE8\x95\x41\x6D\x01\x4A\xAA\x51\x07\x9C\x49"
"\xDC\x67\x3E\xFF\x92\xCC\x8E\x68\x83\x98\x97\x0C\xA6\xD4\x18\x8A\xCD\x87\x56\xD4\x23\xDE"
"\x0C\xC9\x35\x8B\xD9\x21\x73\x58\x32\x5B\x85\x82\x67\x7F\xEC\xB9\x38\xB2\x8C\x14\x00\x27"
"\xD3\x99\x48\x07\xD2\xD2\xC9\x84\x74\xA5\x31\x4D\x69\x4C\x68\x9A\x37\x9B\x86\x06\xA7\x25"
"\x75\xE7\xEA\x78\x3A\x4E\xC8\xE5\x72\x86\xBB\x64\xE8\x33\x75\x86\x34\x8D\x4A\x04\x5D\x1D"
"\x35\xA9\x0D\xBF\xA7\xCA\x73\x46\x75\xA0\xB7\x71\x28\x55\x33\xD2\x3F\x84\xFC\xAF\x94\x57"
"\x6D\xA2\x52\x6D\xC9\x4C\x92\x45\xCF\x0A\x1B\x0D\xAB\x78\x16\xD8\x9F\x9A\xC2\x2F\xA0\x19"
"\x94\x2A\x50\xD0\x9A\xAC\x9C\x5E\x8E\x8E\xE5\xBC\x98\x5C\x43\x02\x57\x98\xDE\x55\x23\x79"
"\xB5\xC9\x5E\x33\xD2\x57\xBB\xF6\xF4\xAD\x74\xFD\xA5\x60\x83\x2A\x38\x86\xA2\x94\x2E\xF8"
"\xEC\xAA\xD8\xF2\x07\x00\x39\x60\xB4\x8B\xE7\xA3\x28\xAB\xB6\x04\x08\xE2\x98\xC1\x11\x94"
"\x84\xEA\xC3\x88\x7A\xAB\xC9\x5E\x36\x64\x13\x40\x02\x37\x1D\x0B\x91\xFE\x3D\xD1\x9A\xA2"
"\x9D\x22\x26\x47\xF3\x51\x1A\xAA\x44\x1B\x65\x78\x25\x77\x5A\x9B\x97\xC0\x02\xC0\x04\x81"
"\x43\x2A\x74\x40\x6B\xA0\xC2\xCE\x2C\x20\xBC\xFD\xAB\x44\x74\x5B\xDC\xC1\xD6\x04\xB9\xBD"
"\xA5\x09\x73\x8D\x1B\x91\xE7\x2A\xD7\xB9\xC2\x65\x20\x71\x9B\xDB\x92\x78\x4D\x13\x20\x26"
"\xA0\x43\x42\xAF\x26\x1E\xC7\xCD\x83\x0E\x5D\xF3\x2E\x6E\xF5\x69\x11\x14\x9D\xA3\x33\x5A"
"\xD1\x81\x16\xDB\xE9\x4B\x0B\x69\x65\x2C\x26\x82\x50\x2A\xBA\xF6\x5E\xB7\x52\x76\x95\xFF"
"\xD8\x6E\x7C\x13\x52\xA2\xC6\x18\x4A\x85\xB5\xFA\x67\x44\x54\xA7\xD0\xA9\xBE\xD6\xB5\xA6"
"\xF1\x2F\x50\x14\x89\x10\xF4\xD9\x56\x22\x08\xC6\x11\x3C\x3F\x62\x0B\x61\x6C\x43\x84\x17"
"\x46\x51\x09\x2F\xEC\x8C\x0C\x6F\xF8\xC3\x3E\xF5\x89\x88\x39\x5C\xE2\xF7\x9C\x98\xC4\xFF"
"\xC5\xB0\x86\x51\xDC\xE2\x10\xBF\x98\xC5\x3A\x73\xF1\x88\x57\x28\xD4\x8A\x34\x69\xBD\xA6"
"\x32\x30\x54\xB2\x0A\x13\xF9\xB5\x18\x27\xAC\x4B\x2D\x81\x71\x3C\xE4\xC0\xCC\x77\x95\x45"
"\x26\x1B\x7F\xFB\xBB\xE4\x55\x7A\x16\xC8\x45\x5C\xE6\x54\x9A\x4C\xB8\xAF\x5A\x79\x2A\x0E"
"\xA6\xEE\x50\x34\xC7\x5A\xFE\x76\x59\xA7\xE9\x4C\x71\x4F\x9A\xFA\x5B\x53\xCA\xB3\x79\xA7"
"\xA4\x64\x1A\x2F\x1C\xC6\x35\xC7\x19\xCE\x6F\xF6\x99\x7B\xB0\x5C\xE3\x39\x9B\x79\x91\x5A"
"\xA1\x72\x1E\xE5\xAC\xE4\x44\xAE\x12\xCD\xE6\x5C\xE5\x98\x47\xC9\xDF\x29\x1F\x19\xB8\xDF"
"\x64\xB2\x8F\x9D\xAC\xE5\x85\x8A\x79\xC0\x90\xCD\xA8\xA1\xC1\xCA\x66\x40\x0B\x18\xD3\x7A"
"\x56\x70\x99\x3D\xBD\x4E\x50\xCF\x53\xD2\xF0\xFD\xAC\x9A\xE9\x5C\x65\x97\x49\xD9\x73\x6E"
"\x76\xA2\x65\x5B\xE2\x67\x18\xE7\x39\xD0\x50\x81\xB0\x4A\x84\x6C\xEA\x4B\x8B\xA8\xBA\x3D"
"\x51\xB4\xA3\xB7\x4C\xE4\x47\x67\x19\xB5\x3C\x7A\xF2\xA1\x43\xE2\x38\x42\x8B\x9A\x30\xC7"
"\xC6\x2B\xAF\xEB\x9C\x64\x92\x28\x9B\x34\xCF\x8E\x63\x1B\x4B\xBD\xDC\x6A\xFF\x79\xD7\xA7"
"\xAE\x8B\xB6\x65\x9D\xED\x6E\x2F\x3B\xD8\x61\x86\x0C\xED\x58\x1D\xBF\x57\xC3\x7A\xD1\xD3"
"\x25\x73\x4E\x3A\xE4\x59\x96\xBA\xA7\xD9\x1E\x35\xB6\x09\x49\x72\x8E\xEF\xC6\xEC\xC7\xEC"
"\x4E\x70\xAE\x09\xB8\x5F\x62\x73\xBA\x27\xF4\x96\x48\xB2\x27\x56\x61\x85\x14\x3C\x23\x44"
"\xF4\x49\xBE\x3E\x28\x4E\xAD\x4E\x18\x00\x0D\x7F\xCF\xC3\x6D\x5B\xF1\x8F\x5C\xFC\x5C\x9A"
"\xDA\x38\x0B\x3B\xDE\x6E\x9B\x81\x1C\xB1\x39\x7E\x95\xC7\x05\xAD\x12\x61\xE4\x0B\xCF\x46"
"\x89\x66\x4F\x56\x0B\xD0\xA9\x9C\xC3\x11\x13\x8E\x35\x8D\x65\xEA\x91\x73\x08\xA3\xB6\x14"
"\x8F\x74\x40\x00\xA1\x61\x1E\xE3\xE4\x1C\x65\x38\x9D\xAE\x25\xA9\xEF\x86\x20\xA1\xE7\x02"
"\x07\x26\x15\xFF\x5D\x34\x52\x2F\xB8\xAC\xCC\xA6\x34\x5B\x2F\x3A\xE9\xB0\x0C\x21\xE9\x11"
"\xA6\x39\x4F\x20\xDE\xEA\xF3\x39\x63\xE9\x79\xD9\xBA\x95\xBC\x5E\x21\x14\x76\x8F\xEB\xFF"
"\x90\xF0\xD7\x6B\xCE\x76\xB7\xA7\x1D\xEE\x67\x9F\xC0\xDB\xD5\x62\x76\xD9\xD8\x7D\xEE\x78"
"\x8F\x3B\xDA\x43\x4E\x13\x40\x34\x0D\x7D\x26\xE0\x09\xCB\x5B\x73\x37\xB4\x85\x07\x7F\x57"
"\xBF\xA2\xC5\x94\x88\xB5\xE2\xFC\xED\x35\x8B\x77\xBC\x21\x15\x6F\xF9\xCC\x6B\x7E\xF3\x9C"
"\x0F\x22\xE0\x3B\x2F\x9E\xF2\xD1\x06\x09\x13\x07\xFD\x49\x44\xFF\x1A\xD2\x63\x0D\xF5\x66"
"\x50\xBD\xC5\x58\xEF\xFA\x89\xC1\xBE\xF4\xA7\xF7\x5A\xEC\xB1\x35\x7B\xAC\x21\xC1\x6B\x57"
"\xA0\xBD\xE9\xFF\x3B\xED\xDF\xAF\x35\x90\xC2\x2F\xBE\xF1\x8F\x8F\xFC\xE4\x5B\x1E\x8C\xB5"
"\x40\xC2\xDC\x1C\x01\x21\x13\x41\x59\xF9\xD4\xAF\xBE\xF5\xAF\x8F\xFD\xEC\x6B\x1F\xFB\x90"
"\xDF\xBE\x48\xC8\xE8\xFD\xF0\x8B\x7F\xFC\xE4\x8F\xB6\x4A\x16\x5E\xFE\xF4\xAB\x7F\xFD\xEC"
"\x6F\xBF\xFB\xDD\x6D\xDD\xF7\x5F\xB0\xD2\xF2\xAF\xBF\xFD\xEF\x5F\xEE\x06\xE3\x7F\xFF\xFC"
"\xEF\xBF\xFF\xFF\xDF\x50\xF4\xC7\x7E\xDD\x07\x80\x05\x68\x80\xFC\x67\x73\x16\x81\x7E\x07"
"\xC8\x80\x0D\xE8\x80\x0F\x68\x7D\x04\xB8\x7E\x12\x08\x81\x15\x68\x81\xD6\x97\x71\x1D\xB1"
"\x80\x17\xC8\x81\x1D\xE8\x81\x1F\x98\x62\xC1\xC7\x7D\xE0\x07\x82\x25\x68\x82\x57\xF4\x49"
"\xFA\x77\x82\x2B\xC8\x82\x2D\x08\x82\x93\x47\x76\xF7\x07\x83\x2E\x48\x83\x35\xE8\x17\x48"
"\xC0\x09\x1A\x76\x22\xBD\x92\x0A\xE4\x75\x05\xC4\x61\x83\x41\x28\x84\x43\x48\x84\x45\x68"
"\x84\x47\x88\x84\x49\xA8\x84\x4B\xC8\x84\x4D\xE8\x84\x4F\x08\x85\x51\x28\x85\x53\x48\x85"
"\x55\x68\x85\x57\x88\x85\x59\xA8\x85\x5B\xC8\x85\x5D\xE8\x85\x5F\x08\x86\x61\x28\x86\x63"
"\x48\x86\x65\x68\x86\x67\x88\x86\x69\xA8\x86\x6B\xC8\x86\x6D\xE8\x86\x6F\x08\x87\x71\x28"
"\x87\x73\x48\x87\x75\x68\x87\x77\x88\x87\x79\xA8\x87\x7B\xC8\x87\x7D\xE8\x87\x7F\x08\x88"
"\x81\x28\x88\x83\x48\x88\x85\x68\x88\x87\x88\x88\x89\xA8\x88\x8B\xC8\x88\x8D\xE8\x88\x8F"
"\x08\x89\x91\x28\x89\x93\x48\x89\x95\x68\x89\x97\x88\x89\x99\xA8\x89\x9B\xC8\x89\x9D\xE8"
"\x89\x9F\x08\x8A\xA1\x28\x8A\xA3\x48\x8A\xA5\x68\x8A\xA7\x88\x8A\xA9\xA8\x8A\xAB\xC8\x8A"
"\xAD\xE8\x8A\xAF\x08\x8B\xB1\x28\x8B\xB3\x48\x8B\xB5\x68\x8B\xB7\x88\x8B\xB9\xA8\x8B\xBB"
"\xC8\x8B\xBD\xE8\x8B\xBF\x08\x8C\xC1\x28\x8C\xC3\x48\x8C\xC5\x68\x8C\xC7\x88\x8C\xC9\xA8"
"\x8C\xCB\xC8\x8C\xCD\xE8\x8C\xCF\x08\x8D\xD1\x28\x8D\xD3\x48\x8D\xD5\x68\x8D\xD7\x88\x8D"
"\xD9\xA8\x8D\xDB\xC8\x8D\xDD\xE8\x8D\xDF\x08\x8E\xE1\x28\x8E\xE3\x68\x88\x43\x50\x5F\xB6"
"\x50\x74\xE4\xA8\x8E\xEB\x18\x88\x99\x22\x82\x40\x91\x77\xFF\x00\x66\x58\x64\x06\xEB\xB3"
"\x1D\x52\x70\x50\xB6\x40\x73\x99\x37\x01\x9B\x90\x8F\xBF\xE2\x23\x72\x70\x50\x8E\x30\x31"
"\xF1\x38\x8F\x13\x50\x8F\x3F\xC4\x2B\x07\x35\x04\x35\xB0\x90\x3C\xB8\x52\xE5\x07\x7D\x07"
"\x95\x8E\x8E\xE7\x90\xF9\x58\x91\xE2\x81\x8F\x06\xB5\x09\xBE\x37\x86\x13\xF0\x90\xBE\xE2"
"\x23\x35\x70\x50\xA9\x20\x6C\xEC\xA8\x1C\x74\x20\x08\xE6\x93\x10\x1B\x78\x6F\xA7\x41\x73"
"\x58\x51\x3A\x3F\x54\x21\xB8\x66\x31\xE8\x62\x93\xF7\x74\x5E\x2F\xD9\x75\x13\x20\x93\x11"
"\x19\x16\x0B\xE4\x05\xA1\x92\x93\x5A\x61\x02\xC4\x31\x37\x0F\xD9\x83\x31\xA8\x20\x27\x87"
"\x35\xD5\xA1\x76\x7C\x55\x5D\xEF\xF8\x17\x13\x69\x50\xB5\x15\x92\x10\xA2\x6E\x42\x88\x93"
"\x5B\x19\x73\x75\xE5\x17\x80\xF0\x8F\x59\x84\x91\xDD\x08\x46\xF3\x60\x0B\xF7\xC5\x94\xCF"
"\x81\x47\x08\x71\x78\x1A\x11\x2A\x2E\xE9\x2D\x15\x21\x97\x5E\xC6\x68\x6F\xD1\x96\xFF\xF0"
"\x96\x10\x21\x94\x44\xE9\x95\x21\x21\x07\xDB\x20\x74\x3D\x31\x8F\xB0\x55\x59\x8E\x07\x18"
"\xF1\x76\x12\x10\xA6\x98\x8F\xC5\x10\x8C\x20\x94\x8C\x47\x7C\xCD\x24\x80\x16\x63\x2D\x75"
"\x29\x16\x1A\x18\x2D\x5C\x01\x18\x98\x99\x3D\x83\xA6\x16\x72\x30\x98\xE7\xD7\x2C\x74\xB9"
"\x85\x79\xF9\x11\x40\x69\x74\xD2\x44\x23\xD2\x12\x95\x84\xF5\x79\x6A\x61\x6B\xAF\x79\x5B"
"\x30\xE1\x99\x7C\x59\x5D\x43\x99\x2F\x45\x19\x5A\xE9\x06\x52\x8F\xE9\x78\xA1\x42\x95\x0C"
"\xD7\x63\xBF\xF9\x98\x91\xF9\x95\x86\x15\x4E\x24\x68\x31\x98\x43\x9B\x18\x72\x30\xD5\xC2"
"\x99\x1D\x72\x9B\xB0\x64\x1A\xC1\x27\x4E\xD5\x69\x64\x85\x94\x85\x09\xF8\x0F\x5B\xC5\x3E"
"\x30\xB1\x97\x52\x39\x4C\x8E\x27\x2E\xBC\xF9\x16\x15\xA7\x9D\xBB\x23\x9E\x27\x49\x9E\x68"
"\xE1\x97\xAB\xF9\x74\x8C\x15\x9B\x86\xE9\x6F\x4D\x29\x6D\xC6\x59\x18\xC8\x89\x6E\x8D\xA7"
"\x9F\x60\x69\x9E\x87\x79\x56\xDA\xF6\x9C\x24\xC5\x1F\x9D\x29\x9F\x90\x11\x7C\xB6\xA6\x99"
"\xA3\x65\x11\xC3\x19\x84\x19\x08\xA0\x61\x01\x3C\x8C\x90\x45\xF9\xD2\x98\x1A\x21\x2E\xEB"
"\x49\x13\xD2\xC2\xA1\xB8\x59\x18\x71\x81\x9E\x56\x51\xA1\x17\xDA\x74\xCE\xE6\x14\xF1\x59"
"\x6C\xAB\x26\x9D\x0A\x31\xA2\x55\x75\xA2\x38\xD7\x10\x56\x70\x23\x1F\x8A\x45\xD4\xC9\x9F"
"\xF2\x04\xA1\x19\x41\x81\x62\xA5\x70\x28\xA3\x74\x85\x65\xA3\xD6\x32\x0B\x08\xBA\xA2\xEE"
"\x31\x6D\xDE\xD9\x92\xD4\x94\x19\x59\x28\xA1\x3F\x3A\x1A\x5C\x33\x1D\xDB\x94\x10\x13\x35"
"\x31\xCE\x52\xA0\xEF\xF9\x2C\xCB\x19\x48\x58\xEA\x91\x01\x21\xA5\x00\x41\xA5\x08\x61\xA5"
"\xC5\x34\x79\x85\x77\x37\x13\x96\x70\xC3\xE5\x17\x44\x62\xA3\xC4\x39\x99\x96\xE6\x96\x33"
"\x91\x29\x2F\x2A\xA3\xFB\x99\x9B\x92\x39\xA1\xFF\xA9\x9C\x57\x44\x24\x59\x0A\x43\xE5\x79"
"\x28\x19\x7A\x58\x00\x62\xA4\x03\x07\x13\xD3\x56\x61\x36\x8A\x47\xE3\x29\x84\xF8\x28\x0C"
"\xA3\xE9\x6A\xEE\x07\x3B\x28\xF2\x97\x65\xC7\x90\x3E\x52\x06\x1C\x39\x1D\xFD\x78\x95\x42"
"\xC8\x16\x0F\x14\x62\x10\x22\x08\xA9\x20\xA9\x73\xDA\x47\x28\x22\x0C\x5F\x1A\x11\x9B\xCA"
"\x83\xEE\x49\x13\x17\xD9\x2B\x96\x24\x90\xBD\xB2\x8F\x79\x31\x79\x35\x20\x37\x6E\x53\x79"
"\x4E\xF5\x48\xCC\x89\x2D\x1B\x39\xAB\x34\x22\xAB\x10\x22\x05\x01\x51\xAB\x10\xD2\x91\x79"
"\xB1\x7B\x68\xB3\x74\xB9\x9A\xA0\xF2\x81\x72\x0C\xA1\x0D\x2B\x99\x78\xAA\x39\xAD\x1E\xF1"
"\xA6\x34\x08\x22\xDA\xC0\x09\x94\xB4\xAD\x05\x71\x1C\x34\x72\x94\x42\x53\x1C\xBD\xEA\x17"
"\xE5\x6A\xAE\x43\x13\x7A\xEB\x4A\x1C\xE8\x9A\x17\xEA\x6A\xAE\xF0\x4A\x17\xF2\x2A\x34\xF4"
"\xEA\x1F\x94\x82\xA2\xFA\x55\x89\x9F\x33\x01\xDF\x11\x9E\xFE\x39\x2C\xF6\xFA\x1D\xF8\xAA"
"\x16\x04\x9B\x1E\xED\xBA\xAE\x06\x4B\x93\x0A\x98\xAD\x4E\x73\x45\x87\xD2\x20\x37\x62\xA7"
"\x40\x81\xB0\xC6\xC1\xB0\xFE\x07\x22\x18\xE1\x38\x10\x57\x0B\xB2\xB3\xAA\x00\x60\x5A\x02"
"\x43\x5B\x79\x31\xA6\xD1\x83\xAD\x40\x71\xB2\x9A\x92\xB2\x35\xB1\xB2\x15\xD4\xB2\xB1\x7A"
"\x5A\x2C\x6B\xB2\x33\x0B\xB3\x57\x64\x2D\x6F\x39\x01\x1F\x2B\x3B\xE7\xA6\x1B\xB1\x23\x3B"
"\x9E\xB5\xB3\xF5\xE3\xB3\x8D\x03\xB4\x28\x22\xB4\x3C\x8B\x22\x45\xDB\x3D\x47\x7B\x22\x49"
"\x4B\xB4\x4B\xE1\xB4\x26\x22\xB4\x1D\x72\x0E\xCE\x70\xAA\x64\x9A\x91\x1D\x06\x41\xA9\xB0"
"\x96\x14\x6A\xB3\x1D\x31\x0F\xE0\xF9\x16\x2F\x2B\xB6\x64\xFB\x3B\x61\x6B\x25\x68\xEB\x23"
"\x8E\xF3\x96\x39\x0B\xAB\xEA\x64\x18\xAE\x49\x7B\x66\xBB\xB6\xBE\xE7\x90\x10\x04\x41\x00"
"\xB9\x79\x08\x69\x06\x0B\x49\x90\x06\xDA\x10\x6D\x76\x3E\x9C\x90\xB5\x50\xCA\x93\x04\x97"
"\x9E\xFD\x36\x7D\x89\x8B\x13\xDA\xD9\x42\x90\x01\xB9\x8C\x1B\xAE\x10\x01\xB7\x3A\xFA\x54"
"\x98\x2B\x48\xFB\x16\x82\x99\xEB\xAB\x4E\x67\x56\xF0\xF7\xB8\xC9\xD9\x13\xDA\x10\xB7\x30"
"\xC4\x6E\x15\xCB\x70\xA9\x7B\xA9\x1A\xCA\xBA\x57\xFA\xA0\x51\x56\x9E\x16\xB3\x17\x65\x81"
"\x39\x84\x1A\xB9\x2F\xD7\xBA\x3C\xAA\xB6\xB6\xA9\x7C\x8B\xF5\x2F\x61\xD7\xA4\x7D\xC6\xB8"
"\xA1\x4B\x13\x4A\x6A\x51\x35\x81\xBC\x9C\xCB\x6F\xEE\xA1\x98\xCB\x6B\xBC\x2D\x7A\x9F\x77"
"\x0A\xA0\x47\x45\xBD\x7D\x6A\xBD\xF0\x97\x54\x31\x7A\xA3\x90\x95\xBD\xC3\x07\x1A\xF1\x16"
"\x71\xA8\x4A\xBC\x51\x67\x75\x84\x31\x9E\xCB\xEB\xA8\x5A\xEA\xA2\xBB\x0B\x69\x25\x01\x25"
"\xFA\x3A\xA0\x13\x52\xBB\xA7\xEB\x79\xE8\x6B\xBF\xE3\xDB\xB8\xC7\x07\xBC\xDF\xB7\x4A\x28"
"\xC4\xA0\xDB\x56\x6B\xFF\xFB\x4A\x01\x0C\x6E\x1D\x4A\xC0\xB2\xFB\x4E\x3E\x0A\x5E\x9D\xBB"
"\xB9\xD1\xEB\xBF\x57\xF7\xBD\xC1\xEB\xBD\xFC\x74\xBD\x6C\x7A\xBF\xC9\x0B\xBE\x9F\x36\x6B"
"\xDD\x14\x16\x06\xEC\xB0\x0A\x5C\x75\x22\xCC\x65\xF9\x37\xB8\xE5\x7B\x6B\xCE\xD0\x83\xBE"
"\x47\xB7\x63\x04\x9C\x1F\x3C\x6F\x47\x0A\x1A\x95\x2B\x12\x81\x29\x23\x4D\xA2\xC2\x74\xA0"
"\xB6\x3A\x2B\xBC\x62\xEB\xBE\xD4\xB6\x4A\xAA\x3B\x10\xA8\x69\x25\x3F\x3C\x47\x41\x6C\xC4"
"\x77\xF4\x6D\xD1\xE9\x6D\x48\x3C\x2C\x9E\xC4\x75\x3C\x5C\xC1\x3E\xD7\xBD\x12\x6C\xC1\xDA"
"\xEB\xB9\x0E\x0C\xBA\x37\xD4\xC1\x93\x8A\x6A\x49\x12\xB7\x44\x5C\x9F\xD1\xB5\xC4\x48\x16"
"\x6E\xD8\x16\xB0\xDC\xFB\x99\x53\x31\x93\x78\x47\xB1\xC4\x74\x9E\x49\xAC\xC4\xE2\x76\xC6"
"\x2A\x18\x9C\xC5\x2B\xC5\x2C\x6A\x67\x0C\x92\x25\x10\xD2\x34\xBE\x76\x3E\x7D\x1C\x21\x3B"
"\xB9\x9D\x81\x6C\x50\x7F\x7C\xBE\x2E\x2A\xC8\xB6\x80\xC8\xCD\x6B\xC8\xBD\xD2\xC8\xDB\x81"
"\x04\x6E\x86\x9D\x56\x35\x75\xE8\x65\xC5\x54\x6C\x4C\xDC\xBB\xC9\x97\xEC\x98\x15\x81\x25"
"\x7E\x4C\xC8\xEC\xA9\xC7\xF0\x28\x30\x63\x57\x1C\x48\x50\x5D\x6F\xD9\xB1\x41\x43\x1C\xAA"
"\x7C\x97\x70\x79\xCA\xAE\xAC\x03\xB0\xCC\xAF\x79\x11\x2F\xEB\xAB\x3A\x30\x97\x1A\xA7\x20"
"\x3B\x9B\x00\x11\xBE\xBC\xB4\x76\xD4\xCA\xA9\xBC\xCA\x71\x0B\xBD\x08\x41\xC3\x64\x7C\x67"
"\x71\x8B\x18\x92\xA2\xAF\xFD\x38\xCA\x03\x11\x43\x31\x94\x5D\x0C\x65\xCD\x43\x84\xCD\xD3"
"\x1C\xA8\x35\x93\xCD\xE1\xB2\xCD\x54\x2C\x11\xDB\x44\x42\xE2\x6B\xC9\x1A\x4C\xC1\x99\xCC"
"\xC9\xE7\xCC\xBC\xBE\xF5\xC0\x5C\x7C\xC1\xF1\x17\x14\xDC\xEC\xC2\x6C\x25\xCD\x54\xCC\x3D"
"\xFD\x0B\xA7\xEB\xA2\xCF\x4B\x05\x4E\xFD\x7C\x61\x90\xEB\x9B\xDE\x97\xCF\xB1\xBC\xCF\x07"
"\x0A\xC4\x2F\x8C\xB3\xBF\xF6\xB9\x02\xE5\xC9\xD0\x59\x33\x13\xAC\xA1\x46\x75\xC5\xDA\x1C"
"\xD1\x15\x0D\xCE\x17\x8D\xCF\x14\x2D\xCE\x05\x91\x5F\xD6\xA6\xB9\x5B\x5C\xB5\x53\xBC\xCE"
"\x24\xFD\xD0\xA4\x1C\xA7\x4B\x84\xD1\x11\x9C\xD2\x12\xCD\xA3\xEC\x0C\xC1\x07\x1D\x4C\x00"
"\x0D\xD1\xFC\x6C\xD0\xFE\x2C\x2B\x34\x6D\xCA\xDC\x79\x6D\xF5\x11\x7E\x05\x7D\xCB\x16\xBD"
"\x2E\x0B\xB4\xCC\x04\x21\xC6\x41\x9D\xCE\x2D\xBD\xD2\x32\xDD\xCE\x2A\xBD\xD1\x1A\xCD\xBD"
"\x8D\x75\xD2\xD4\xCC\xD1\x51\x5D\xD5\x53\x8D\xC9\x30\x51\x0B\xB6\xD5\xC9\xE8\xCC\xD2\xD5"
"\xBB\xD4\x59\x0D\xD6\x9A\x0C\xD3\xF0\x8C\xC5\xEF\x3C\xD2\xEA\x8C\xD5\x8D\xF2\xCF\x37\x1D"
"\x11\x40\x3D\xBD\xD7\x9C\xD3\x6E\x6D\x14\x8A\x44\x95\xD9\xE1\x0C\x39\x78\xB8\x7A\x69\xBF"
"\x9A\x07\xD7\x0D\x9C\x58\xB2\x42\xD4\x77\x6C\x25\x7B\x4D\xBE\x5A\xEC\xD0\x5E\xCD\xD4\x66"
"\xE5\xD2\x38\x1D\x35\x8D\xFD\xD6\x57\xAD\xD8\x8E\x8D\x44\x90\x5D\xD3\x95\x1D\xD6\x1B\x6C"
"\x11\x25\xAB\xA7\xD8\x9B\xD9\x10\xD1\xD5\x4D\x7D\xD6\x22\x1D\xD2\x89\x2D\xDA\x9A\x2D\xCF"
"\x4E\x5D\xD2\x6A\x3D\xD9\x91\x3D\x14\x28\x22\x30\x6F\x19\x2F\x0F\x64\x22\xB1\x1D\xB7\xB3"
"\x0D\xDB\x74\x5D\xC7\x6B\x1D\x57\x6E\x35\x01\x97\xBB\x7D\xB8\x7D\x22\xB6\x4D\x48\x82\x5D"
"\x5D\x45\x4D\xD5\xA6\x29\x10\x3A\x10\x51\x80\xED\xCE\xA4\xDD\x4F\x4D\x6D\xD9\xD7\x23\xD9"
"\xA7\x9D\xD1\x8F\xFD\xD9\xD4\x0D\xD5\xBC\xCD\x74\xD8\xDD\xD1\xF5\x6C\x25\x85\xD9\xD9\x18"
"\xAC\xDA\xDC\x1D\xDA\x31\x2D\xD6\x9E\x4D\xD6\x26\xDD\xDA\xA0\x5D\xD6\x69\xAD\xD4\x4F\x0D"
"\x70\x22\xD7\xCC\xC5\x3D\xDF\xD8\x61\xC6\x03\xAC\x5F\xC0\xAD\x7D\x4F\x8A\xD4\x13\x6D\xDC"
"\xCA\x8D\x35\x7B\xA4\xDB\x69\x16\xDF\x56\xBD\xDD\xED\xAD\xDD\xDE\x8D\xE0\x0C\xCE\xDD\x52"
"\xAD\xE0\xC9\xED\xE0\x11\x9E\xDE\x09\xD1\x7C\x7C\x4A\xDE\xD3\x6D\xE0\x63\xBD\xDA\x07\x6E"
"\xDE\xEF\x5D\xDA\x19\x6C\xDD\x5F\xAD\xDE\x0D\x6E\xBE\x81\x7D\xDF\x42\x7D\xE2\x71\xB3\x25"
"\xEB\xC9\xDF\x82\xEB\x4F\x04\xCD\xD0\x25\x17\x4C\x83\x7D\x45\x04\xFE\xDF\x2F\xCD\xDE\x23"
"\xBE\xD8\xF0\xAC\xE1\xDD\x3C\xE1\x3C\x4E\xD9\x16\xF5\xE3\x6C\x9D\xE0\x42\xEE\xDA\x41\x8E"
"\xDE\xA8\xBD\xBE\x28\xCD\xE1\x1F\xBE\xE3\x4B\xEE\xDE\x51\x6E\xD6\xA8\xBD\xBD\x50\xCE\xDA"
"\x48\x3E\xE5\x59\x2E\xE5\x0B\xBE\xE2\xF4\x9D\xE2\xD7\xFD\xE5\x87\x93\x2B\x7D\x0D\xE3\x87"
"\x7D\xE6\x7C\x2D\xE3\xF5\x1D\xDD\x61\x65\xE3\x03\xAE\x58\x05\xBE\x11\x20\xDE\xE6\x3E\x9E"
"\xDD\x12\x8E\xD9\xF2\x9D\xE7\x26\x4E\xE4\x77\x0E\xE4\x7B\xCE\xDD\x1B\x1E\xE3\x18\x9E\xDA"
"\x45\x3E\x7F\x5C\x5E\xE5\x49\xFD\xE4\x14\x0E\xDE\x8B\xAE\xE5\x4E\x5E\xE2\x58\xEE\xE1\x8C"
"\x3E\xCF\x6C\x4E\xE3\xF8\x6B\xDF\x63\xDE\x9F\x02\xFB\x60\x16\xB1\xAC\x85\x3A\xE8\xFD\x3D"
"\xE3\x28\xBE\x43\x6F\x7E\x93\x71\x9E\xE3\x15\x5E\xE8\x7E\x6E\xE4\x4A\x9E\xE8\x00\xEE\xEA"
"\x9E\x05\xE1\x8F\x8E\xE7\x7D\xAE\xE7\xB6\xAE\xC6\x9C\x77\xDE\xAF\xAE\xE3\x88\x0E\xDF\x8E"
"\xDE\xE5\x82\x9E\xE1\xAC\x7E\xE8\x93\x4E\xEB\x73\x4E\xE5\xB2\x3E\x26\xF9\x58\x92\x7A\xB4"
"\xEC\xCC\xCE\x83\xCE\x5E\x12\xD0\x1E\xED\xA3\xD1\x3F\x84\x2A\x6F\x1E\x01\x26\xC2\x90\xDF"
"\x18\xF8\xEC\xD4\x9E\x96\xD2\x3E\xD4\xC7\x1D\xA0\x43\x95\xEA\x9F\x0C\xEC\xBC\x3E\xE4\xD2"
"\x4D\xEC\xDD\x0D\xE8\x94\xEE\xEE\xB8\xFE\xE0\xD5\x1D\xEC\x7F\x2E\xEF\xF0\xDE\x79\xBB\xFE"
"\xEB\x91\x0E\xEF\xFA\x1E\xE2\xE5\xDD\xEF\x74\x8E\xD8\x22\x5E\xEF\xAD\x1E\xE8\x72\x9D\xEB"
"\x2A\x8E\xEF\x30\x0C\x5D\x0A\x4F\x18\xD8\x5E\xEE\x09\x2F\xE6\x35\x4E\xEE\x37\xCE\x50\x2F"
"\xFE\xDC\xA6\x5D\xF0\x95\x1E\xEB\x99\x7E\xEF\xC7\x6E\xF0\x1F\xBF\xF1\xF1\xCE\xEE\xB7\x5E"
"\xF2\x12\x0F\x10\x93\xD7\x7B\x0D\xDB\x53\xA5\xD5\xBB\xFB\x3E\x2D\xE0\x63\x5A\xF4\x5C\xEC"
"\x27\x3C\x11\x33\xBF\xDE\x2D\x8F\xF3\x1D\x9E\xEE\x30\x9F\xDA\x92\x65\xF2\x23\x0F\xE6\x07"
"\xEF\xF0\x42\xDF\xD3\x16\x46\x17\x47\xDD\xA7\xD8\xF7\xCD\x65\xD7\x34\x21\x16\x3B\x14\x84"
"\xDC\x5B\x3C\x5E\x5D\x63\x29\x36\x3F\xF0\x00\x0F\xF2\x04\xDF\x76\xE4\x45\x1B\xE6\x45\xC5"
"\xE2\xE5\xF5\xAF\x01\xF6\xDC\x2B\xF6\xE5\xC5\x76\x80\xCC\x20\x63\x6F\x06\x65\xCF\xDD\x67"
"\xFF\xF5\x69\xCF\xE2\x72\x8E\xDA\x08\x11\x60\x95\x21\x67\x77\x3F\xBC\x7B\xA6\xF7\xEC\x05"
"\x67\x7D\x4F\xF3\x55\x6C\xEC\x23\x8F\x18\xEA\xE5\xF7\x97\xFE\x1E\xC6\xD1\xAC\x74\xC0\x2B"
"\x1A\xE6\x0C\x72\x4C\xF2\x89\x9F\xCA\x64\xDF\xF8\x29\x02\xF9\xF1\xE2\x0C\x8A\x4F\xF9\x22"
"\xF6\xF8\xF6\x79\xEE\xC7\xDB\x6F\x80\x0A\xE7\x25\xA1\xF9\x6D\x5F\xF9\x9D\x9F\xC8\x92\x4B"
"\xD8\x48\xBA\xE9\x3D\x9F\xFA\x84\x21\xC4\x5B\xAC\xBB\xAF\x3F\x15\xB1\xAF\xF1\xB5\x2F\xC7"
"\xC9\xDC\x76\x90\x8F\xEC\x9F\xDF\xE9\xA5\xFC\xFB\xCE\x4B\xC2\x0F\x3F\xFC\x53\xE1\xF3\x57"
"\x1E\xF0\xA3\xAE\xBC\xC5\x6B\xFB\xB7\x1F\x64\x90\x0F\xBD\xCD\x8F\xEE\x7B\x4A\xA1\x6C\x77"
"\xC0\xD6\x17\xFD\x90\xAF\xBF\xFB\x3B\x31\xDB\xEF\x99\xFE\xFE\xC5\xD7\xAF\xE8\x1C\x1C\xCF"
"\x99\x16\xFE\x37\x27\xBA\x9D\xD6\xFA\xA1\xEE\xF9\xA6\x11\x6F\x6B\xAA\xEE\x14\x96\x68\x88"
"\xBA\x69\x59\x6F\xE8\x82\xEF\xD3\x9A\xE6\xC3\xEB\x3F\xFB\xFA\x5F\xC4\x3A\xF9\x0F\x60\xC0"
"\x7F\xF3\x86\x00\x30\x78\x10\x61\x42\x85\x0B\x11\xD6\xE0\xE4\x6C\x9E\x40\x89\x13\x19\x31"
"\xB4\x78\x11\x63\x46\x8D\x07\x27\x38\x9B\xF8\xF1\x23\xC1\x8D\x0C\x87\x44\x04\x79\x32\x60"
"\xC5\x91\x2B\x2D\x7A\x41\xF9\xD2\x9C\x08\x96\x08\x3B\x7E\x9C\xA5\xB0\xE4\x47\x2F\x33\x0F"
"\xBA\x7C\x89\x72\x27\x4F\x83\x3E\x7F\x82\x0C\x2A\x94\x68\xD1\x89\x47\x79\x26\x55\x2A\x90"
"\xE9\x4C\xA7\x4F\x01\x46\x15\x0A\xA0\xE6\xC4\x98\x57\x2F\x8A\x30\x47\x75\xE9\x55\xAF\x60"
"\x25\x5A\x1D\x39\x96\x6C\x40\xB3\x1B\xD1\xA6\xFD\xB7\x36\x63\x56\x89\x37\x13\xE6\x0C\xCB"
"\x53\x2E\x59\x91\x57\x19\xB9\xDD\x2B\xB4\x6F\xDA\xBF\x3C\x03\xEB\x2D\xC8\x95\xA3\xC7\x8F"
"\xCE\x26\x20\xDE\xA8\xE3\x8A\x23\x61\xDB\x4E\x32\x76\x7C\x99\x65\x61\xB0\x83\x79\xCA\x31"
"\x49\x56\x25\xE6\x8D\x9A\x9F\x72\x66\x99\x37\x20\x5D\x84\x76\xCB\x72\x25\xFD\xF4\x94\xE3"
"\xD7\x4A\x63\x23\x9E\x5D\xB4\xB6\x6B\xB7\xB9\xF9\xEE\x16\x8D\x1A\xE0\x56\xD1\x08\xBD\x7C"
"\x3E\x79\x4E\x9B\x4E\xAE\xC5\x7F\x22\x57\x7E\x95\xF9\x4B\xE7\x77\x91\x1A\x07\x39\xBD\x35"
"\x5E\xC5\x73\x71\x5A\xAF\x2A\x14\xB8\x52\xD3\x33\x67\x09\x3E\x7C\xB5\xBC\x61\xC4\xE9\x37"
"\x9F\x47\xCC\x3A\xFB\xF0\x8D\xEC\x05\x0A\x97\x7F\x5F\x21\xFD\xD2\xEE\x85\xD6\xD8\x2E\x71"
"\x1E\x67\x6C\xF1\xEE\x9F\xD0\xF0\xB3\xC8\x33\xAA\xB4\xA9\x01\xB1\xF0\x54\x3B\x08\x3E\xB5"
"\x10\x4B\xB0\x34\x39\x30\xA3\x50\x3C\x0B\x2F\xC3\xB0\xA8\x79\x34\x74\x8C\xC3\x9F\x3C\xBC"
"\x90\xC0\x93\x46\xFC\xED\xBF\x80\xEC\xBB\xAF\x86\xE4\x40\x72\x06\x09\x00\xA6\x7A\x0B\xB1"
"\x16\x2B\x8B\x71\x46\xB8\x36\xB2\xF1\x45\x1C\x9F\xBB\x8A\xC7\xC5\x7C\xA4\xEE\xB4\x14\x01"
"\x7A\xD0\xA0\x08\xBF\xD3\x8E\xAC\x73\x1C\x69\xEC\x32\x40\x4A\xFC\x68\x9B\x6D\x52\x61\x10"
"\x31\x29\x9F\xAA\xF2\x4A\xC7\xB4\x54\x8A\x4B\x2C\x1D\xD3\x4F\x45\x99\x0E\xC4\x88\xCC\x7F"
"\x56\x3C\x13\xBF\x2F\x8B\x0A\xF3\x37\x1D\xE4\xD4\x01\xA1\xB6\x04\x32\x90\xCD\x85\x4C\x30"
"\x83\xCF\x3E\xFD\xEC\xF3\x0A\x28\xF3\x1C\xF4\xA0\x3D\xFF\x3C\x94\x4F\x13\xEE\x33\x14\xD1"
"\x3F\x15\x95\x8F\xD1\x46\xFB\x7C\x74\xB8\x48\x25\x35\x83\x52\xD1\x2C\x95\x34\x53\x42\xF3"
"\x9C\xE0\xD0\x4E\xCF\x04\xD5\x51\x4F\x49\xF5\x53\xD4\x03\x4F\x9D\xD4\xD3\x56\x0D\x72\xD0"
"\x55\x00\x90\x40\xF4\x8A\x39\xCF\x9C\xF5\xD0\x5A\xE5\xBC\x95\x56\x5B\x63\xFD\x15\xA1\x34"
"\xD7\x04\x96\x2B\x5C\xFF\xD4\x95\xCE\x5F\xED\x4C\x89\xD8\x66\x9D\x7D\x16\xDA\x68\xA5\x9D"
"\x96\xDA\x6A\xAD\xBD\x96\x58\x58\xB1\xDD\x96\x5B\x62\x5D\x3A\x67\x1B\x01\x6D\x49\xE5\x4F"
"\x1D\x00\x01\x69\xD8\x6E\x9D\x15\x21\x15\x5B\x6C\xE1\x84\x4F\x64\x93\xBD\x0D\x4F\x75\xED"
"\xBD\x17\xDF\x7C\xF5\xDD\x97\xDF\x7E\xB7\xD5\xD6\xDF\x80\x05\x26\xCE\xAD\xE0\xCC\x1C\x98"
"\xD0\x65\xA9\xAA\x17\xE1\x86\x1D\x7E\x18\xE2\x88\x25\x9E\x18\x3C\x23\xFF\x41\x92\xE2\x8C"
"\xA1\x9D\xF1\x29\xCB\x34\x16\x4D\x61\xF1\xF8\xFB\x98\xE4\x92\x4D\x3E\x19\xE5\x94\x1D\x03"
"\x58\xE5\x96\xEF\xE3\x58\x29\x1D\x5D\xB6\x28\xE4\xA2\x3C\x9E\x19\xE7\x9C\x75\xDE\x99\xE7"
"\x7F\x2D\xC6\xB8\xE7\xA0\x5B\x2A\x18\x68\xA1\xEB\xFC\x4A\x3D\xA3\x95\x5E\x9A\xE9\xA6\x9D"
"\x4E\x88\xE5\xA7\x8D\x86\xF9\xA5\x53\x04\x95\xBA\x66\x94\xB4\x19\x59\xEA\xAE\xBD\xFE\x1A"
"\x6C\x87\xAF\x40\x34\xC6\xB0\x8D\x36\x41\x07\x5C\x1D\x71\xD7\x5D\x67\xAA\xAC\xD2\x19\x47"
"\x52\xED\x7A\x82\xB4\xF9\x5C\x9B\xED\xB7\xB9\x2C\xC3\xEC\xBE\xFD\xFE\x1B\xF0\xC0\x05\x1F"
"\x9C\xF0\xC2\x0D\x3F\x1C\xF1\xC4\x15\x5F\x9C\xF1\xC6\x1D\x7F\x1C\xF2\xC8\x25\x9F\x9C\xF2"
"\xCA\x2D\xBF\x1C\xF3\xCC\x35\xDF\x9C\xF3\xCE\x3D\xFF\x1C\xF4\xD0\x45\x1F\x9D\xF4\xD2\x4D"
"\x3F\x1D\xF5\xD4\x55\x5F\x9D\xF5\xD6\x5D\x7F\x1D\xF6\xD8\x65\x9F\x9D\xF6\xDA\x6D\xBF\x1D"
"\xF7\xDC\x75\xDF\x9D\xF7\xDE\x7D\xFF\x1D\xF8\xE0\x85\x1F\x9E\xF8\xE2\x8D\x3F\x1E\xF9\xE4"
"\x95\x5F\x9E\xF9\xE6\x9D\x7F\x1E\xFA\xE8\xA5\x9F\x9E\xFA\xEA\xAD\xBF\x1E\xFB\xEC\xB5\xDF"
"\x9E\xFB\xEE\xBD\xFF\x1E\xFC\xF0\xC5\x1F\x9F\xFC\xF2\xCD\x3F\x1F\xFD\xF4\xD5\x5F\x9F\xFD"
"\xF6\xDD\x7F\x1F\xFE\xF8\xE5\x9F\x9F\xFE\xFA\xED\xBF\x1F\xFF\xFC\xF5\xDF\x9F\xFF\xFE\xFD"
"\xFF\x1F\x80\x01\x14\xE0\x00\x09\x58\x40\x03\x1E\x10\x81\x09\x54\xE0\x02\x19\xD8\x40\x07"
"\x3E\x10\x82\x11\x94\xE0\x04\x29\x58\x41\x0B\x5E\x10\x83\x02\x9C\x40\xBB\xD8\xC6\xB6\x21"
"\xD4\x80\x83\x1D\xEC\x52\x06\x49\x58\xC2\xDE\x85\xCC\x0B\x4A\x1A\x8F\x09\x59\xD8\x42\xD7"
"\xA1\x50\x85\x5C\x63\x13\x20\x3A\xC8\xB6\x0F\xB9\x10\x87\x39\xEC\x1A\x0C\xBD\xB3\xC2\x33"
"\x29\x2C\x5D\x3A\x84\x60\x64\xD8\x06\xAF\x78\xCD\xE9\x6A\x42\xE4\x19\x0F\x27\xE2\xC3\x33"
"\xCD\x46\x66\xAA\x9B\x51\x10\xAF\x15\x1E\x86\x29\x11\x21\x6E\x42\x49\xD1\x8C\xB6\xAC\x28"
"\x1E\x90\x89\x00\x92\x21\x9B\x80\xC3\xC5\xD5\x59\x51\x5F\x53\x3C\x18\x16\x13\x72\x8A\xA7"
"\x98\x31\x68\x5E\x9C\xE0\x04\xC6\x16\xAA\x55\xF9\x29\x89\x9E\x8A\x10\x15\x55\x17\x43\x7D"
"\x85\xEC\x8A\x4A\xA4\xDA\x44\xE0\x88\x33\x50\x61\x49\x8E\x00\xA8\x81\x19\xC4\x64\x3E\xE0"
"\xF0\x91\x62\xAF\xF9\xE2\x0E\x43\xE8\x41\x4F\xA5\xA9\x90\xD7\x9A\xCD\xCD\x22\x86\xB6\x39"
"\xC9\x69\x6E\xC9\x0B\xCF\x49\x32\xE9\xB2\xF4\xD4\xA2\x06\x5E\x9C\x80\x23\x22\xC2\x49\xF2"
"\x01\x71\x8D\x26\x43\x4D\x29\xB1\x86\xB4\x80\x38\x11\x64\xB6\x84\x0A\xBF\x94\x44\x23\x42"
"\x6D\xAA\x6C\xAA\x32\x12\x24\x11\x03\x4C\xD3\x65\xCD\x26\x4B\x63\xCD\x3C\x52\x61\x1D\x88"
"\xDC\x09\x7D\x4A\x22\xE6\xC4\x86\xA0\xB7\x70\xC5\xD2\x6F\xA8\xC1\x25\x66\x36\x99\xC7\x7B"
"\x61\xD2\x53\x53\xA1\x25\x93\x24\x32\x4D\xE8\x10\xD2\x61\x80\xD8\xC6\x15\x87\xE0\x0C\xDE"
"\xE8\xAB\x97\xF3\xA0\x43\x9F\xE8\xC0\x36\x47\x28\x6D\x94\x28\xD9\xE6\xF6\xD4\x88\x32\x4F"
"\x7E\x12\xA0\xA1\xF4\x1A\x6A\xCC\xC9\x15\x40\xFA\x6B\x46\xFB\x74\x8C\x38\xC9\x38\x4C\x6C"
"\x0E\x87\xA1\x08\x2B\x4C\xBD\xEC\xF2\x4E\x7C\xF5\x72\x92\x3C\x1B\x24\x29\x45\x57\x37\x50"
"\xE6\x6B\x36\x05\x15\x58\x0D\x6A\x21\x1E\xAB\xBD\xC7\x6D\xD6\x54\xE9\x4A\xC3\x35\xC6\x91"
"\x80\x90\xA5\x2C\xCD\xA8\x45\x60\x5A\xA5\x8F\x80\x4B\x6F\x33\xDD\x48\x3F\xFB\x85\xC6\x41"
"\x45\x54\x98\x5A\x79\xA8\x68\x80\x2A\x9F\x9A\xC6\xD4\x9A\x3A\x4D\x08\x69\x0C\x04\x1F\x8B"
"\xAE\x44\x0A\xB6\x90\x83\x37\xD9\x84\xD1\x67\xAD\x72\x84\xF6\x0A\xD1\x4F\x4E\xCA\x93\x4D"
"\x5D\x2A\x51\x3D\x9B\x40\x2D\x54\x2A\x8C\xC6\x90\xD4\x38\x22\x25\x56\x3B\xB7\x51\x22\x9C"
"\x56\x49\xA9\xF7\x8A\xCE\x7E\xB8\xD2\xCB\x0E\xB9\x34\x2E\x25\x05\x4B\x5C\x39\xA2\x57\xAA"
"\xF0\xD5\x22\x51\xDB\x57\x48\x87\x0A\x51\x74\x8E\xCA\xA1\x6C\x2A\x2A\x66\xC6\x4A\x16\xC0"
"\xCE\x46\x25\x4A\x7A\xEA\x4E\x01\x32\x8F\xAE\x12\xCA\xAA\xC4\x32\x81\x1B\x07\x82\xD7\x6A"
"\x4D\x80\xB3\x3F\x41\xE5\x72\x1C\x2B\xD6\x61\xD6\x20\xB4\xF5\x29\xEC\xB4\xEC\xFA\xA3\x87"
"\xB5\x16\x25\x6A\x5D\xCD\x94\x5E\xA2\xD0\x85\xE4\x13\x28\x57\xC1\xED\x49\x00\x4B\x92\x1E"
"\x7A\xB6\x5B\x07\xCD\xD3\x62\xE5\x33\x56\x95\x3A\x63\xB5\x0B\x3D\x2C\x8A\xD2\xC2\x57\xBB"
"\x32\xC2\x0A\x04\x9A\x07\x5F\x9D\x32\xDA\x33\xC1\xF6\x23\x81\x14\x8D\x7F\x04\x62\xDB\x69"
"\x71\xD7\x44\x7C\x43\xCC\x46\x89\x94\xB3\xDD\x96\x33\xB9\xD1\xC2\xEE\x2E\x23\x96\x26\xA5"
"\x68\x17\x23\xEB\x05\x89\x77\x97\xEA\x96\xC7\xDA\x57\x3E\x69\x72\x65\x83\xCA\xD0\xAE\x54"
"\xD0\x21\x8F\x75\xA3\xAA\x50\xF4\x3B\x60\xCC\x10\x77\x60\x08\xD6\x4D\x73\xAF\x22\x5F\x81"
"\xDC\x90\x25\x33\xD2\x86\x78\xEF\xE3\x60\x66\x9D\xA9\x0C\x2E\xEA\x2E\x70\xF5\x04\x56\x49"
"\x35\x12\x2F\xA9\x05\x89\x75\xCF\xB9\x57\xD3\x52\x45\xB6\xBF\xB2\x70\x6F\xB1\x85\xCC\x97"
"\xEC\x77\x23\x16\x16\xA3\x50\x5C\xCC\x5B\x1A\xEB\xF2\xAF\xC3\x41\xE1\x70\xCA\xE0\x9D\xCB"
"\xD6\x64\x9C\x19\xC9\x2C\x66\xDC\xFB\x93\x14\x4F\x4B\xC1\x37\xC6\x6F\x83\x69\x2B\x11\x08"
"\x47\xD8\x44\x53\x95\x8F\x8C\x0B\x84\x9F\x55\x96\x88\xBE\x3D\x71\x0B\x7C\x31\xB2\xD5\x93"
"\x5C\x56\x2A\xA5\xE5\xD9\x79\x55\xAB\xAE\x15\x47\xAC\x97\x30\x9A\x13\x12\x70\x6C\x30\xA1"
"\x50\xF9\x96\x1C\xEE\xCE\x92\x67\x02\xE7\x25\x71\xF3\x23\x47\x5E\x88\x1C\x4E\x32\x61\x00"
"\x64\x38\x20\x93\x25\x27\x77\x44\x53\x64\x98\xA4\x97\x21\x86\x8E\x2D\xA2\x17\xA2\xE8\x93"
"\x1C\xD9\xCE\xBE\x64\x72\x51\x9E\x0C\x65\x7D\x82\xF9\x3D\x4D\xA6\x08\xA4\x4E\x41\xDB\x2C"
"\x0F\x65\xCB\xFD\xD1\x70\x85\x90\x22\x66\x6E\x39\x1A\xBD\x15\x43\x31\xA3\xF3\x03\x16\x48"
"\x6B\x5A\x42\x10\xE3\x58\x54\x08\x6B\x65\x8B\x01\x44\xD0\x19\xE1\xD8\x2C\x0C\x4C\x5A\x9B"
"\xF4\x5A\xC7\x6D\xAE\xF2\x81\xD3\xC2\xE5\x91\x24\x54\xCE\x19\x41\x75\x9E\x59\x9D\x90\x65"
"\x0B\x95\xC0\x6E\x39\xF2\xAE\x81\xED\x18\xEC\x56\x9A\x25\x52\x80\x35\x89\xEB\x0A\x6B\x68"
"\x62\x06\xBC\xB5\x4D\x36\xC1\x8A\xFD\x66\x6F\x4B\xC4\xD8\x0C\x01\xE8\xBA\xD9\x6D\xAF\x67"
"\xBB\x79\xD0\x37\xFD\x2F\xA0\xAA\xDD\x68\x57\x37\x7B\x21\xB5\xCE\xD8\xAC\xEB\x0B\xED\xE2"
"\xDE\x7A\xD8\xA5\x76\xAD\x7C\xF8\xDD\x2A\x64\x63\xA6\xC6\xCC\x46\xB8\xB0\xD3\xAD\x91\x77"
"\x97\x99\x27\x0F\x2F\x53\xB4\xD3\x32\x6D\xA3\xE8\x71\x4A\xD8\xE6\x09\xA0\x7F\xE2\xE7\xBA"
"\xBA\xED\x1C\xF3\x55\x29\x20\x2E\xC3\xF1\x97\x78\x5C\xE0\xA0\xE9\x0D\x58\x60\x6C\xCA\x7B"
"\xAB\xBA\x89\x14\x26\xF2\xCB\x17\x9C\xEA\x7D\x5F\x1C\x21\xFA\x06\xD9\xA8\xD1\x3D\x5E\x9C"
"\xE3\xA7\xE0\x84\x12\xEC\xCA\x4D\x7D\x19\x9D\xAF\x47\xDA\xF8\x3E\x88\xC4\xE1\x4D\x9E\xA4"
"\xA7\x3C\x3E\x79\x6A\x6D\xC3\x37\xB2\x59\x4D\x9F\x43\xE3\x23\x19\x32\x63\x59\x29\xA2\x53"
"\x08\x94\xB2\xE5\x56\x32\x40\x6A\x71\x05\x1C\xCB\xA1\xEB\x9D\x0D\xDA\xC3\x8F\x3C\x74\xA4"
"\xAF\xDA\x36\x0A\xBF\x79\x48\xAC\x49\x20\x3D\x2F\x24\x48\x9B\xF6\xF9\xC0\x0D\xCB\xF7\xEB"
"\x12\x88\xC5\x75\xE2\x79\x51\x82\x2C\x64\x02\x51\xFD\x22\x4C\x57\x93\xD2\x0D\xA2\xF8\x23"
"\x3B\x9E\xF1\x32\xFA\x79\x55\x9B\x8C\xF8\x8D\x98\x1C\x5D\x91\x87\x10\xE0\xA7\xDC\x64\x94"
"\x5B\xBB\x86\xA1\x77\xD7\xE0\x2D\x4F\x30\x6D\xC4\x48\x8E\x24\xFD\x47\xAE\x33\xF2\x55\xB0"
"\x82\x3D\x5A\x6C\x8F\xBC\xDB\xB9\x22\xFB\xB8\xFB\x9B\x62\xE4\x7D\xB4\xE6\x15\x52\x03\x61"
"\x03\x24\xEB\xC7\x9E\x3C\xC1\x87\xCF\xA6\x02\x07\x3B\x20\x9B\x98\xC0\x95\x5F\x54\xEF\x95"
"\x1C\x1F\xE8\xCB\xBD\x0C\xE4\x29\x4E\x16\x8B\xFB\xBD\xF3\x45\x29\xBD\x46\x54\x9F\xF9\x4C"
"\x63\x7F\xD2\x21\xF9\x3A\xB0\x5E\xB3\xFD\x85\x24\xF2\x32\xBA\x67\xEF\xA9\x69\x3E\x13\xDA"
"\xA3\xA7\xFD\x80\x91\x7B\xEE\x0B\xB6\x78\xCC\xD8\xF5\x44\xCA\x05\xBF\xFE\xCB\xFB\x43\x86"
"\xB3\xE8\x2B\x98\xA2\xFB\x04\x02\xD3\x88\x6D\xFF\x7C\x4D\x20\x0A\x4F\x5D\x92\xAC\x29\x8A"
"\x2F\xFB\xDE\x6B\x54\x44\xAC\xE9\xCC\xED\x00\xEB\xAC\x87\x48\xAE\x59\xCA\x2F\x97\xA2\x6E"
"\xEF\x72\x6C\xCC\x7E\x46\xA2\xE6\x6F\x62\xD4\x4F\x04\xC3\xAF\x89\x02\x4F\xCB\x2A\xB0\xC4"
"\xFA\xEF\x40\x66\xE3\xD3\xAE\x22\x52\x9C\xCF\xFD\x40\x30\xFA\x08\xED\x61\x18\x30\xCC\x54"
"\xD0\x04\x21\xF0\x3E\x30\x0F\xE2\x76\x30\xD6\x44\xC3\xAE\x3E\xCF\x55\x34\x90\xB1\x2A\xC9"
"\x16\xC6\xED\x22\x48\xF0\xCE\x74\xE6\xFD\xF0\xE5\xE8\x24\x86\x09\x6D\xAE\xDB\xE6\x4B\x09"
"\x97\xD0\x01\x0D\x90\x05\xEF\x23\x64\x14\xF0\x5E\x5C\xF0\x0A\x75\x4D\xFA\xEE\xC3\xB8\xAC"
"\x09\xB9\x14\x6B\x0C\x3B\x90\x03\x87\xC3\xAE\xE4\xC0\xAE\x50\xD0\x20\xAC\x6E\xD1\xBE\x6F"
"\x0B\x81\x10\x40\xC6\xCF\x55\xCA\x20\xF4\x64\x8E\x5B\xA6\x10\x0E\x1B\xE6\x09\xBF\xB0\x04"
"\x23\x86\x63\xC4\x45\xF4\x44\x48\x06\x17\x62\xAE\x66\xAC\xEF\xEA\x90\xFF\xD6\xB0\x06\x1D"
"\x51\x60\x84\xAB\x98\x00\x8A\xCF\xE6\x62\xDD\x86\xE3\x91\x78\x4F\x0C\x6D\x30\xFD\xB2\x50"
"\x0B\x1F\x2C\x49\xBC\xC3\xFC\x12\xC2\x07\x41\xA2\x00\x59\x62\xEB\x2E\x43\x04\x84\xA1\x28"
"\x88\x50\x69\xFC\xF0\xC4\xD2\x90\x5F\xA2\x90\x10\x41\x71\x38\x2E\x31\x24\xC2\x10\x0B\x75"
"\xB0\x01\x7D\x51\xB7\x2C\xA6\xE5\x1A\x46\x58\x38\x31\xE1\x24\x71\x25\x36\x11\x0D\x3D\xF1"
"\x11\xD7\xEF\x40\x9C\xE2\x86\xE0\xA3\x14\xE3\xB0\xD3\xBC\x2E\x11\x7D\x0B\x18\x47\x42\x0E"
"\x6B\x0B\x0F\x97\x86\xDD\xBE\xD1\x57\x3E\x30\x99\x06\xC6\x16\x65\x0D\x17\x2F\xE4\xD1\x40"
"\x2C\x14\x9D\x91\xF8\xB2\x91\x27\x7A\x69\x1A\xCD\xEC\xF0\x10\xE3\x18\x21\x11\xE6\x7E\x30"
"\x12\x53\xA3\x11\xED\xB1\x11\x9F\xCC\x2E\xA6\x31\xEF\x8E\x43\xCA\xEE\x8F\xF3\x54\x25\xED"
"\x4E\x4E\x1D\xC5\x27\x10\xED\xA5\x1C\x6F\xF0\x45\x3E\x09\x57\xE8\xA0\x5D\x26\xC3\x19\x78"
"\xB1\xB5\xE6\x01\xA9\x2A\x12\xEA\xBA\x6B\x9E\xCC\x40\x22\xDD\xA5\x4A\x42\x4E\xD2\x2C\xAD"
"\x89\x3A\xF2\x23\x6D\x21\x24\x9B\x30\xE2\x06\x11\x62\xC2\x63\x18\x35\xA2\x1E\xD9\x91\x2B"
"\x94\xF1\x4C\x70\x90\x24\x01\xC4\x24\x39\x28\x25\x47\x12\x29\xB6\x01\xDB\x86\xC0\x16\x30"
"\x10\x01\xFB\x8C\x0F\x2F\x63\x15\xF1\xE3\x14\x19\xD1\x91\x68\x50\x60\x6E\xE3\x1C\x6A\x28"
"\x15\xAE\x91\x5B\x22\xED\x05\x01\x80\x2A\xC3\x30\xD2\x9C\xEB\xDC\xF8\x11\x26\x85\xCD\x0B"
"\xD3\xE8\x1C\x31\x22\x26\x83\x70\x65\x12\x8B\x4D\xD6\x4D\x2A\x2D\x22\x2B\xE5\x0A\x25\xB8"
"\x8D\x0D\x0B\x72\x50\xC2\xAD\x89\x78\x71\x7A\x16\x52\x5D\x6E\x03\xF7\x10\x86\xCC\x76\xD1"
"\x0E\x45\xE6\x1E\x4D\x2C\xDE\x3C\x50\xFE\xE6\x92\x64\xBA\xD0\xA0\x7E\xEF\x25\xFE\x10\x00"
"\xFE\x69\x4E\x60\xAF\x5B\xF6\x12\x19\xA5\x25\xA1\x52\x51\x08\xE1\xF2\x97\xAA\x51\x29\xCB"
"\xC7\x2E\xBB\x45\xBE\xEE\x4E\x93\xFC\xC2\x22\xB7\x72\xC3\x88\x0E\x30\x09\x83\xCE\x66\x22"
"\x64\x5E\xF2\x61\xC0\x50\x2C\x52\x0A\xA9\x56\x4A\x31\x27\x06\x2F\x13\x93\x2D\x05\x02\xEB"
"\xD2\x72\x25\x8E\x72\x50\x98\x2F\xCE\xD0\x67\x33\xBB\x05\xD5\x3C\xF3\x5A\x98\xAE\x2A\xAF"
"\xB2\xF6\x18\x0C\xFE\x8A\xEE\x26\x65\x92\x62\xE0\x11\x74\x98\x2E\x36\x6B\x32\x20\x60\xF1"
"\xEF\xDC\x51\x34\x38\xAE\x2A\xEB\x92\x29\x27\x71\xF0\xF2\x32\x9D\xCE\x0D\x4E\x28\xD0\x3C"
"\xB2\xC4\xDB\xC0\x25\x09\xC9\x13\x4C\xB6\xE1\x3C\x03\x73\x02\x3F\xA6\x18\x41\x47\x8B\x50"
"\xC2\x3C\xE9\xD2\x55\x5C\xC2\x2D\x07\x45\x37\x5D\xC5\x3F\xB6\x81\x3E\xA3\xE7\x37\x1F\xD3"
"\xAF\xBC\x6F\x62\x8C\xC5\x4F\x90\x05\x62\x08\xB4\x4F\x90\x40\x4E\x70\xF3\x22\x22\x92\xE7"
"\x84\x33\x82\xD4\xE6\x33\x4E\x61\x41\xD9\xE8\x79\xE8\xE8\x50\x14\xD4\x31\xAB\x87\xA0\x38"
"\xB1\x82\x24\x8B\x41\x2D\x54\x44\xCD\x66\x59\xB2\xD3\x82\x7A\xE9\x2B\x47\x74\x21\x4E\xE1"
"\x35\x8F\xCB\x43\x55\xF4\x5E\x44\xC0\x35\xDF\x26\x3A\x1D\x08\x84\xDC\xC5\x15\x7B\x13\x46"
"\xC7\x24\xFE\x76\xD4\x47\x5D\x26\x29\x6A\x14\x8B\x6C\xEF\x47\x8B\xD4\x64\x00\x2A\x18\x74"
"\xD4\x48\x9D\x0E\xEE\x96\xD4\x49\xA9\xA9\x44\x20\x14\x46\x89\xF4\x49\xAB\xD4\x61\xE2\xA9"
"\x3F\x7D\x94\x4A\xAD\x94\x4B\x03\xE6\x46\x6B\x08\xC0\xBA\x74\x24\x3C\x0A\x1C\xD7\x6D\x43"
"\xC5\x14\x4D\xD3\x54\x4D\xD7\x94\x4D\xDB\xD4\x4D\xDF\x14\x4E\xE3\x54\x4E\xE7\x94\x4E\xEB"
"\xD4\x4E\xEF\x14\x4F\xF3\x54\x4F\xF7\x94\x4F\xFB\xD4\x4F\xFF\x14\x50\x03\x55\x50\x07\x95"
"\x50\x0B\xD5\x50\x0F\x15\x51\x13\x55\x51\x17\x95\x51\x1B\xD5\x51\x1F\x15\x52\x23\x55\x52"
"\x27\x95\x52\x2B\xD5\x52\x2F\x15\x53\x33\x55\x53\x37\x95\x53\x3B\xD5\x53\x3F\x15\x54\x43"
"\x55\x54\x47\x95\x54\x4B\xD5\x54\x4F\x15\x55\x53\x55\x55\x57\x95\x55\x5B\xD5\x55\x5F\x75"
"\x26\xF4\x30\xF4\x9E\x84\x86\x42\x4F\x28\x0D\x0A\x09\x6D\x21\x21\x1F\x47\x56\x6B\xE8\x9E"
"\xD8\x24\xAA\x42\x2F\xAB\x60\x95\x58\x33\x63\x31\x26\x00\x9C\x1A\x44\x18\x43\xD4\x6F\x60"
"\x09\xB1\xC6\xB1\x58\xA3\x75\x24\xBA\x29\x59\x6B\x4E\xEF\x28\x27\x47\xAA\x93\x0A\xA5\x95"
"\x5B\x2F\x82\x5A\xA1\x55\x3C\xC3\x52\x71\xC8\x44\x35\x49\x93\x2C\xBB\x15\x5D\x15\xE2\x5B"
"\x69\x71\x4C\x01\xAE\x3D\x21\xA7\x44\xB3\x54\x21\xCA\x48\x72\x30\x34\x54\x06\xE5\xAB\xAE"
"\x80\x71\xEC\xF5\x52\xF4\x95\x75\x16\xC9\xC3\x76\xB5\x3F\xBE\x82\x32\x93\xD1\x8D\xA4\x54"
"\x76\xD6\x95\x19\x8D\xB5\x3E\x04\x01\xC7\x52\x14\x70\xA6\x22\x1E\x17\x62\x8F\x5E\xF4\x6B"
"\x6A\x86\x3A\x4B\x4E\x24\x27\xA2\x5C\xFF\xA6\xC6\x3A\x56\x62\x64\xB4\x45\x6B\x81\x59\x5B"
"\x50\xFB\x36\x10\x20\x40\x96\x21\x44\x40\xC3\x10\x16\x76\x00\xF6\x58\x64\x85\x6C\x56\xB0"
"\xB2\x0A\x22\x42\x84\x54\x6A\xF4\x43\x65\xA7\x35\x32\x0D\x07\x99\x26\xB6\xDF\x9A\x6F\x71"
"\x3E\xB6\x64\xF9\x85\x68\xB1\x65\x36\x2F\xAC\x2C\x33\x33\x37\x9D\xA9\x68\xAF\x67\x02\x36"
"\xA1\x86\xA4\xE0\x20\x82\x95\x6D\xA2\x32\x5F\xAA\x49\xA5\x70\x36\x4F\x44\x56\x6F\xE4\x95"
"\x23\xF0\xC6\x9E\x9E\xD6\x6B\x90\xC9\x44\xEB\x82\xB6\x76\x36\x6C\x8E\xD6\x5E\xA4\x80\xA5"
"\x82\x8F\x66\x10\x33\x20\xD4\xB6\x55\x92\x16\x20\x80\x96\x4C\x8E\x4C\x61\x20\x36\x80\x6A"
"\xB5\x86\x00\x61\x95\x44\xAF\x28\x67\x90\x25\x57\x46\x6C\x3B\xE8\x49\x70\x87\x88\x6A\x48"
"\x10\x82\x49\x2C\xE4\xF6\x62\x86\x43\xD1\xE8\x56\x21\x20\x83\x4F\x38\xC8\x11\x02\x45\x34"
"\x16\xF7\x6A\xCD\x80\x6C\x0F\x84\x6D\x79\xC2\x6F\xA1\xD2\x73\xF3\x0B\x5C\x59\x22\x74\x4F"
"\x23\x57\xDD\x85\x13\x34\xD7\x5A\x4F\x62\x62\xB3\x95\x66\xCF\xB5\x8A\x0E\xD7\x92\x2E\x63"
"\x83\x44\xEF\x56\x9F\x65\xBD\xAA\xF2\xD9\x28\xB7\xF1\x3A\x26\x2D\x31\xC9\xA7\x5E\x37\x01"
"\x6D\xED\x58\xAB\xEF\x27\x80\xF7\x77\x87\x57\x78\xB9\x8E\x40\x80\xD7\x20\xBC\x6C\x3A\xE9"
"\xD2\xC5\xA4\x37\x21\xAE\x17\x37\xCD\x16\x6E\x33\x82\x7A\x71\x0D\x37\xC9\x64\x16\x5E\x03"
"\x78\x53\x97\x25\x14\x0D\x68\x01\x40\x61\xAA\xD2\x7C\xCF\x42\x6E\xF3\xCF\x34\x7F\x22\x1E"
"\x15\x06\x7B\x69\x72\x26\xB7\x73\x28\xF5\x91\x15\xBD\x52\x79\x8F\x84\x0E\xF5\x89\x17\x9B"
"\x37\x39\x6D\xC6\x79\x09\xA9\x78\xC3\x35\xBB\xC8\x70\x59\xFB\x17\x25\x98\xF7\x79\x57\x52"
"\x29\xB0\x97\x1A\x1B\x18\x37\xC9\x4B\xCF\x72\xD7\x16\xBA\xD3\xFE\x8C\xB2\x44\xB4\xC1\x5D"
"\x12\x77\xEC\x4C\x84\x2E\xC9\xEB\x2B\xC5\x97\x7C\xD3\x12\x83\xDD\x25\x7A\xC3\xF7\x27\xE0"
"\x70\x46\x4A\x91\x5F\x25\xC5\x5F\x79\xC2\xC5\xAA\xF2\x36\x0C\xD1\x16\x06\xF7\x7C\xAD\x33"
"\x21\x66\x84\x6F\xFF\x33\xF1\xBC\x33\x84\x8F\x17\x82\x89\xB8\x2F\x99\xF6\xF9\x1E\xB8\x88"
"\x97\xB7\x80\xE7\xE2\x80\x51\x13\x72\xCF\x16\x6A\x16\x78\x89\x5F\xAC\x89\x99\x98\x81\x2B"
"\x83\x41\x91\x40\x83\x05\x02\x78\xF7\x72\x62\xC3\x43\x4A\x51\x74\xE1\x7E\xE2\x2B\xC9\xEC"
"\x05\x4D\x98\x63\x4B\xD6\x25\x59\xD8\x8A\xA7\x6F\x8D\xB9\xA5\xC6\xBE\xF2\x36\x14\x53\x49"
"\x24\x18\x2B\x8C\xC4\x44\x81\x38\x6E\x7B\x56\x2C\xF9\xB7\x8A\x23\xB7\x0A\xC5\x6D\x80\xB1"
"\x38\x8B\x85\x36\x90\x2F\xE6\x89\x77\xB8\x3E\x90\x20\x45\xF0\x98\x26\xA8\x98\x49\x09\xF8"
"\x90\x93\x37\x91\x11\x99\x70\x29\x99\x86\x71\xAC\x16\x3C\x92\xE7\x20\xF9\x3D\x39\xF8\x74"
"\x75\x4B\x10\x04\xC1\x0C\x74\x00\x4A\x48\xA3\x7C\x39\xD9\x0C\x0E\x52\x25\x47\x42\x8D\x25"
"\x02\x92\xDB\xF8\x2A\x10\xD4\x0C\x92\x14\x1F\x87\x58\xED\xBA\x85\x31\xE5\x04\x97\xE7\x36"
"\x2D\xEB\x58\x72\x13\xD8\xE8\x46\xB9\x48\x8C\x79\x76\x05\x99\x1E\x01\x79\x92\xF5\xF7\x88"
"\x47\xB3\x92\xE3\x38\x9A\x65\xF9\x8A\x53\x63\x91\x85\x6F\x34\x97\x25\x7D\xF3\xD8\x92\x9B"
"\xF9\x8D\x2F\xB9\x9B\x19\x59\x93\xE3\xD7\x90\x2D\x10\xE2\x9C\x02\x94\x0B\xD7\x9C\xD9\x75"
"\x1D\x81\x17\x3E\x84\x43\x3F\xB6\x2F\x96\xBD\x98\x8D\x25\x59\x94\x27\x4E\x0D\xEF\xB6\x5F"
"\x9C\x82\x8E\xC5\x35\xC6\xBC\x63\x8C\x7F\xEB\x7E\x91\xB9\x90\x77\xF9\x30\x09\x1A\x4D\xD8"
"\xF9\x9F\x45\x24\x80\x95\xD8\x9B\x29\x58\x28\x6C\xD9\x0C\x62\xA4\x8E\xFE\x44\x60\x31\x22"
"\x70\x3B\x88\x6A\x0D\xA2\x06\xA0\xF2\xA2\x67\xA2\xA2\x0B\xB4\xA0\x21\x1A\x9C\xA5\xF9\xA1"
"\xB5\xF8\x71\xC7\x59\x15\xD3\xCA\x4C\xD0\xB9\x64\x43\xD9\xDA\x08\x84\x6F\x39\xE2\x0A\x38"
"\xA1\x83\x1E\x39\x2D\xDF\xD9\x4C\xE2\x79\x30\xEF\xC4\x26\x37\x82\x96\x45\x83\x43\xF0\xD8"
"\x96\x3F\x97\x4D\xFE\x89\x8B\xB9\x12\x23\x84\x19\xCF\x14\xFA\x98\xAF\x95\x3D\x95\x99\x20"
"\x7B\xAE\x41\x42\x3A\x41\x7B\x5A\x69\x9B\x1A\x89\x33\x99\x9A\x35\xD1\x9E\x27\x27\xA8\x71"
"\xF7\xAB\x07\xDA\xA4\xDF\xEE\x9B\xD7\x19\xDE\x5C\x1A\x8E\x85\x18\x81\x9D\xF9\x7F\x51\xFA"
"\x1D\x59\x3A\x78\xBF\x2D\x07\xA1\x22\x42\x80\x36\xAC\x1B\x44\x02\xB7\xD9\x68\x7F\x6F\x1E"
"\x74\x78\x34\xFC\x39\x2E\x2C\x66\x9B\xBB\x29\x18\x11\x5A\x28\xD4\x49\x6F\x0A\xD6\x5B\xFC"
"\x38\xB0\x09\x53\x59\xC3\x79\x69\xCB\xFA\xE3\x90\x8A\xF5\xB4\x6E\x46\x55\xEA\xB2\x3F\x6B"
"\xAC\x0F\x9B\xB2\xC9\xBA\xAB\x45\xD9\x49\x4C\xA0\xB3\x35\x42\xA7\x41\x8D\x9E\xD7\x7A\x5B"
"\x07\x79\x61\x37\x59\xA5\x9B\x16\xE2\x78\x3A\xAE\xCB\x42\x9B\x19\xAB\xB4\x59\x22\x20\xFF"
"\x41\x1B\x34\x8F\xAD\x62\x6A\xB3\xA1\x25\x6B\x48\xD6\x5C\x69\xB7\xAD\x0D\xFA\x9E\xA1\x39"
"\xAA\x67\x7A\x5F\x6E\x56\x3E\x58\x33\xB2\x3F\x1B\xB4\x53\xFB\xB8\x11\x5B\xEB\x68\x4B\xB9"
"\xA7\x58\xB2\xB9\x5A\xBA\xC5\x3A\xBB\x3D\x3B\xB4\xFF\xAD\xBB\x4D\x5B\xAE\x25\x6F\xBB\x8F"
"\x93\xAD\x67\xDB\xA9\xC3\xAE\x9C\x57\x3A\xB6\xA9\x1A\xAD\x3B\x0B\xFD\x9E\xFB\xBB\xAF\x22"
"\x3E\xFF\x01\x7B\x61\xEB\xBA\xD9\x04\x99\xFA\x99\x87\xD5\x55\x9D\x5D\x1B\xAA\x9F\xBA\xB5"
"\x59\xCB\xBA\x11\x58\x8A\x73\x8E\x2F\xE5\xBB\xBC\x27\x7B\xBE\x59\x9B\xBA\x17\x9A\xA3\x14"
"\x38\xBC\xDB\x75\xC2\xB5\x1B\x98\x99\x0B\xBA\x19\x7C\xC1\xAB\xFB\x9C\x1B\x3C\x8B\x03\xFA"
"\xC1\x33\x82\x34\xE8\x42\xAD\xD1\x1B\xDE\x64\x1B\x8A\x55\x2B\x2F\x0E\x3C\xAF\x67\x42\x2E"
"\x2B\x6B\x77\x4D\x3C\xC4\xA1\x85\x31\x75\xF1\x5D\x1F\xDB\xB1\x03\x0B\x7F\x35\xFC\xC2\x93"
"\x7B\x2A\x0B\x1C\xC0\x6F\xDC\x78\x8D\xFB\x2F\x7B\xDC\xB6\x2B\x1C\xB6\x23\x3C\xA6\xB7\x08"
"\x79\x33\x9C\xC2\x9D\xDC\xC2\x53\xF6\x69\x5B\xFC\xC8\xA1\xFC\x22\x4E\x9B\xBC\x8D\xDC\xBC"
"\x57\xBB\x2F\x67\x7A\xC4\x51\x5B\xCB\x93\xFC\xC4\xDD\xFB\x34\x0E\x57\xF9\x00\x60\x74\x53"
"\xC1\x62\xA9\x7C\x24\xB6\x6A\x41\xA6\x3B\xBD\xAF\xC5\x4E\x5E\x90\xA9\x97\x99\x98\x87\xF9"
"\xBC\x07\x7B\xC6\x81\x05\xBF\xC1\xC3\xCC\x3F\xD7\xB9\xA3\x3B\xCC\x15\x7C\xD0\x8B\xDB\x88"
"\xDF\x3A\xCE\xA3\xDC\xBE\x43\x94\xCD\x8B\x5C\xCA\x31\xDC\xC3\xB9\xDB\xCA\xFB\x58\x20\xB4"
"\x81\x0E\x5C\x79\xD1\x55\x3B\x97\xBB\xBC\x98\x2B\xDD\x0C\x38\xC1\x69\x75\xD9\xD2\x03\xF4"
"\x95\xB1\xA5\xD1\x0D\x6F\x22\x2C\xBD\x40\x73\x1A\xC8\xB7\x45\x6B\x05\xC4\x94\x5B\x79\xAB"
"\x35\xA2\xCE\x1D\x9C\xB8\x6F\x6F\xD6\xF5\x3C\xD1\xD7\xAA\xD5\xAD\x25\xD0\xBD\x7B\xC3\x05"
"\xFD\xD1\xE1\x7C\xC0\xDF\x7B\xD7\x93\xF1\xB6\x81\x3A\xD9\x05\x3C\xD8\x1D\x3D\xD3\x25\x7C"
"\xD2\x2D\x62\xD9\xF0\xF6\xBF\xC5\xFC\xD0\x93\x19\x93\x4F\x3A\xCF\x39\x1B\xC9\xD5\x52\xD3"
"\x5E\x8D\xC9\x7F\xDC\xC8\x22\xAF\xD6\xB1\x9D\x27\x3F\x91\x87\xF9\xB8\x55\xFA\x1C\x69\x13"
"\x5C\xD8\x9F\xBD\xCA\x23\xFD\xA0\x8F\xBD\x2B\xF7\xFC\xC9\xE5\xFD\xDE\x9B\x3D\xAA\x21\xF9"
"\x55\x96\xDD\xD9\xA5\x77\xBD\xF8\xFD\xD7\xF3\x37\xAB\x53\x7A\xBD\xD9\xFB\x25\xF8\xBA\xA1"
"\xBA\x1D\x1B\x0F\xCD\xCE\xE9\x5D\xC5\x34\xCD\xFC\xCA\x1D\xAB\x95\xB4\x32\xEF\x9C\xD9\xDD"
"\xDA\x5A\xD8\x6A\x63\x8B\x1D\x5A\x06\x7E\xDF\xC9\xF6\xD4\x75\xD9\x7F\x91\x0F\xE2\x35\x62"
"\xE4\x51\xDE\xDF\xF3\xBD\xD0\xFF\xDD\xA8\xB9\x39\xDA\xD5\xB2\x8B\xFF\x41\xB8\xA7\xFA\x23"
"\x84\x21\x87\x85\x42\x0F\x6F\x4D\x4A\x03\xF2\x1C\x00\xE1\x3F\xEE\xBB\x8B\xE7\x21\xC6\xB9"
"\x25\xE5\xBD\x7D\xDC\x1F\xDE\xE3\xD5\x6B\xE6\x89\x7E\xC8\xCF\x3D\x91\x0F\x7C\xB6\x30\x1E"
"\xD9\xED\x9D\x58\x0C\xB3\xDD\x21\xFB\xDD\xF9\xBD\xDF\x19\x7E\x25\xB0\x1E\x65\x97\xDE\xE5"
"\x09\x7D\xD8\x25\x1D\xDF\x15\x9D\xEB\x23\xD9\xEB\x2F\xC2\x04\xAC\xDA\x0C\x5C\x77\x38\x66"
"\x73\xFB\x66\x33\x36\x0D\xE5\x0A\xCE\x74\x26\xDA\xFE\x50\x92\x25\x5F\x8E\x9E\x21\xEE\xA8"
"\x51\xE0\x9E\xE4\xA5\xBA\x5B\xE4\x24\xA4\x1D\xB7\xE2\x6F\x5D\x9C\x37\x7D\xC9\x4F\x1E\xE6"
"\xC5\x3E\x5A\xC0\xDE\xD7\xDD\x1D\xD8\x5B\x7E\xEC\x4D\x1E\xF2\xBF\x9E\x99\xBD\x7A\xED\xFF"
"\x7E\xE5\x95\xBD\xF3\x31\xFA\xF3\x33\xBE\xEC\xEF\x85\x7A\xE7\x7E\xBE\x00\xDB\x71\xFC\x7E"
"\x5D\x36\x5F\x65\x28\x3E\x91\x5D\xD6\x20\x24\xBF\xEA\x1D\x3F\x56\x68\x9F\x5A\x40\x1E\xED"
"\x45\x7E\xF4\xD9\xC2\xF5\x1D\x03\xF7\xCD\x5E\xDF\x41\x3F\xE6\x55\x3E\xF4\x2F\x82\xF5\x49"
"\x1F\xDE\xF1\xC5\xCB\x50\x3F\xE6\x30\x27\xF9\xAF\xFE\xF7\x51\x06\xF6\x4F\x5A\xF6\xD5\x77"
"\xFA\x8D\xDF\xF6\x5D\x25\xF8\xA5\x45\xF7\x95\x3F\xED\xA3\xBF\xDE\xB7\xFF\xFC\xB2\x9F\xEC"
"\x97\x3F\xE4\x21\x7D\xF8\xC1\xFF\xE5\xC5\xFF\xAA\x00\xCE\xF9\x3F\x82\xB1\xF7\xB5\xF7\x81"
"\xA5\xFB\x4D\xA6\xFA\x17\x1F\x9F\x31\xFF\xDA\x59\xBE\xE4\x83\xCB\xDC\xBF\x80\x02\xFF\xCD"
"\x02\x60\xF0\x20\xC2\x84\x0A\x17\x32\x6C\xE8\xD0\x20\xA3\x81\x02\xE7\x0D\x79\x68\x11\xC0"
"\x04\x67\x12\x03\x3A\x9B\x70\xF1\x23\x46\x8D\x1B\x3B\x82\xFC\x28\x02\xE0\xC6\x82\x25\x2D"
"\x9E\xDC\x48\x70\xE5\xC7\x8C\x2E\x49\xC2\x44\x28\x73\xA4\xC7\x9A\x0B\x6F\x4A\xA4\xA9\x33"
"\x21\xCF\x81\x3E\x7F\xEE\x14\xD9\x33\x27\xD1\xA4\x25\x83\x6E\x64\xA4\x33\xA2\xCB\x80\x2A"
"\x95\x52\xAD\x6A\xF5\xAA\x43\xA6\x1C\x91\x62\xB5\xDA\x32\x65\xD7\xB0\x62\x21\x46\xF5\x42"
"\x75\x96\x4B\x73\x22\xBA\x0E\x99\xE7\x72\xEA\x4A\xAD\x2F\xC7\x7A\x45\x29\x11\x2E\xDD\x9A"
"\x50\x25\x52\x54\x2A\x77\xA8\x5F\xA3\x42\xB9\x52\xFD\x7A\x17\xAB\xE1\x81\x78\xAB\xFE\x25"
"\x0C\xB3\xB1\x55\xC8\x8C\x05\x0B\x04\x3C\x79\xA6\xE3\xBC\x44\xBD\x44\x75\x66\xC6\x4C\x0D"
"\x9D\x35\x3E\x6B\x73\xD9\x57\x33\xEA\xD4\x58\x25\xAB\x86\x99\x58\xE0\xE2\xD6\xB2\x19\xEE"
"\x95\x68\x56\x69\xED\x89\x15\xB1\xB6\x75\xE9\xB4\xA6\xDC\xD8\xB3\x59\xDA\x55\x3C\xFC\x63"
"\xEE\x80\xA7\x89\xB2\xA6\xDA\xBC\x70\x71\xD8\x88\xA3\x4B\x0D\xFB\xFC\x31\xE5\xAD\x91\xB3"
"\xFF\xB3\xFC\xF3\xBA\x73\xEE\xDE\x8F\x5B\x44\xBB\x51\x6D\xD5\xDE\x4D\xC9\xB3\x6F\x7F\x10"
"\xBC\x7B\x84\xAF\xAB\xC7\x27\x9F\x3C\xE0\xED\xA4\xF7\x97\x5B\xE5\xEC\x5B\x67\x70\xF5\x3D"
"\x34\xDF\x5C\x02\x22\xB4\xDF\x6E\xCC\x89\x97\xD9\x77\x0B\x4E\xF7\xD6\x83\x60\x75\x05\x1F"
"\x48\x14\x62\x87\xD9\x76\x18\x4E\xE8\xA0\x81\x0E\x99\x27\x11\x7A\x54\xA9\x77\x58\x87\x25"
"\x8E\x65\x61\x7C\x04\x0A\x67\xA2\x58\xF7\xFD\x93\xDF\x66\x65\x75\xE5\xDF\x46\x30\x2E\xC5"
"\xDD\x8A\x06\xAA\xC8\xA2\x5C\xFC\x01\xC8\xE1\x65\x38\x45\x48\x62\x5D\x10\x6E\xA8\x61\x83"
"\x48\x06\xA6\x64\x52\x28\xFE\xC8\x24\x8B\x06\x7D\x38\x50\x88\x4A\x8D\x68\x5C\x94\x59\x86"
"\x07\x65\x87\x3B\x6A\x99\x97\x8B\x36\xEA\x74\xA5\x40\xBF\x5D\x85\xE0\x93\x42\x6A\xE9\x25"
"\x7B\x80\x6C\xB3\x8D\x33\xB6\xC8\x69\x8B\x5B\x69\xAD\xA5\xD3\x94\x51\x55\xC6\xE0\x45\x79"
"\xEA\xD9\x1D\x9F\x25\xB1\x59\xD5\xA0\x19\xAA\x09\x93\x9F\x7A\x8E\x57\xDE\x9F\x47\xE1\xD9"
"\xE8\x60\x86\x3A\xFA\xA5\x94\x76\xA6\x57\x27\x91\x94\x6A\x5A\x21\x90\x2C\x16\xBA\xA9\x55"
"\x61\x42\x67\xE4\x55\x89\x56\x19\x17\x77\xFF\x68\x23\xA7\x23\x81\xB2\xF7\xE9\x6C\x2E\x76"
"\xE6\xAA\x87\x90\xEE\xF9\x53\xA2\xB3\x8E\x2A\x61\x91\xBC\x5E\xE5\x24\x43\xB9\x72\xD9\xA7"
"\xAD\xDA\xD5\x24\xEC\xA1\x4B\x26\xAB\xA5\xA9\x77\x5A\x89\x29\x96\xA0\x4A\x9B\x55\xA7\x26"
"\xC2\x3A\x2D\x51\xA2\x9E\x35\x6C\x9A\x99\x22\xDA\xE8\xA2\xED\x5D\xDB\x9A\xAC\xFF\xE1\x5A"
"\x2C\xA0\xE7\x16\x1B\x2E\x48\xE3\xEA\xE4\x6E\x92\xCB\x82\x84\xEC\xA4\xDF\xAE\x4B\x6B\xB0"
"\xE8\xB2\x7B\x23\xB7\x25\x36\x7B\x29\xA9\xD8\x0A\xFC\x5E\xB5\x25\xC2\x3B\x30\x48\xDA\xE2"
"\x66\x69\xAF\xB6\x65\x0B\x2E\xBE\xC3\x1D\xAC\x59\xB9\x20\x3A\x7B\xAC\xBE\x11\x2F\x44\x6F"
"\xA4\x4A\x4D\x2C\x28\x75\x05\xFE\x5A\xF0\x47\x1C\xDF\x8A\xF1\xBD\x8F\xA6\x1C\x64\xBD\x5F"
"\xFE\x2B\x22\xB4\xD2\x21\x8C\x30\xB0\xAF\x86\x9C\xE3\xCC\xC8\xC9\x08\xB3\x4B\x62\xC6\xB8"
"\x91\x8F\x2B\x11\x78\xB2\xC1\x37\xBB\x57\xB1\x6E\x49\x99\x6C\x2C\xCA\xB6\xEE\x7B\xD1\xC7"
"\xED\x1A\x7D\xA4\xBC\x25\x67\xAC\xB2\xD3\x1A\x27\xB4\x74\xBA\x2C\x77\x4C\xE9\xCB\xCF\x06"
"\x9C\xB3\xB4\x35\x93\x17\x35\xD9\x0B\x29\xDC\x24\x77\x66\x52\x75\xDF\xD3\x0E\x79\x11\xF3"
"\xD7\x5D\x4E\xCD\x1E\xD2\xFF\xD4\x12\x9A\xD2\x57\x63\x0D\x69\xDC\x03\xDE\x4D\xE8\xE0\x92"
"\xD6\x5D\x12\xD7\x81\x6F\xED\xB7\xBD\x59\x1B\x4E\xB4\xCB\x0C\x8B\xED\x6B\xDA\x9B\x9A\x7D"
"\x1C\xDA\x95\x1F\xB8\x33\x55\x34\x1E\x1E\xAF\xC3\x4A\xD5\x50\x5A\xBF\x36\x8F\x7D\xDC\x04"
"\x3A\xE8\x70\xC5\x67\xAD\x7F\xA6\x83\xE6\xB1\x6B\x76\xB9\xEC\xB5\xCF\x16\x76\x52\x64\xD2"
"\x67\xBB\x96\xB4\xF3\x3E\xED\xDA\x49\xCD\x17\xF4\x98\x74\x9F\x9A\x94\x09\xAE\x9B\x81\x84"
"\x09\xBF\x3B\xFF\xFC\xA6\x26\xA8\x3E\xFD\x26\x51\xE1\x0C\x3D\xF6\x74\xE1\x4E\x94\xEE\x22"
"\x67\x5F\x9F\xEF\xDF\x67\x19\xBC\x7E\xA7\xFF\x5D\xA6\xF8\xE9\xAB\x1F\xBB\x5C\xE6\xAF\xFF"
"\x7E\xEE\x21\x1F\xFF\x53\xF7\xE6\xF0\x0D\x3F\xEA\x24\xE3\xAF\x29\xF9\x44\xCD\x37\xBF\x6B"
"\xA8\x03\xC0\xFD\x11\xB0\x80\xF1\x69\xDF\x7A\x0C\xA8\x40\xC1\x35\x6A\x80\x01\x84\xD8\x02"
"\xBB\x32\xB4\xCF\x45\x90\x45\x79\x73\xDB\x53\xCC\xF5\xB0\x1A\x55\xB0\x83\x1E\x9C\x5D\xAA"
"\x2C\xF6\x41\x0F\x4E\x90\x69\x6C\x83\xE0\x08\x85\x17\xB2\x96\xA5\xD0\x40\x17\x54\x16\x95"
"\x2E\xF6\x40\x16\xB6\xB0\x86\x36\xBC\x08\x02\x07\xE2\xB3\x1B\xBE\xAF\x84\xFF\xC0\x60\xF9"
"\xFE\xA4\x38\x1E\x1A\xC4\x87\x5D\x23\xE2\xD1\x6C\x05\xC4\x9A\xE8\x6E\x89\xF3\x02\x5A\x82"
"\x90\x28\x45\x24\xE6\xF0\x1F\xF3\x90\xC3\x14\xF7\x57\x42\x07\xD6\xA4\x84\x43\x24\xA2\x11"
"\xBF\x98\xC5\x33\x29\xB1\x2A\x9E\x53\x4E\x14\x4B\xA2\xBB\x1D\x8E\xB1\x8D\x1D\x64\x5D\x2A"
"\xE4\x24\x8C\x37\xBD\x49\x18\x82\xD0\x9A\x1B\x63\x37\x41\x6D\xDC\xCF\x2A\xDD\x33\x61\x1E"
"\x13\x12\x46\x3C\x06\x72\x61\x90\x72\xA2\x5E\x24\x72\x0A\x42\x1A\x64\x02\xA7\x90\x08\x22"
"\x0B\x29\xC9\x49\x52\x52\x60\x04\x3A\x47\xAB\xC4\x32\x01\x47\x9C\xA3\x74\x6D\x1C\x64\x25"
"\x29\x56\x46\xAB\x7C\x28\x92\x3A\x0B\xC8\x29\x42\xA9\xCA\x55\xB2\xB2\x95\xAE\x7C\x25\xB6"
"\x4E\xE1\x8C\x34\xFE\xC4\x0B\xDB\x48\x25\x2C\x73\xA9\xCB\x5D\xF2\xB2\x97\xBE\xFC\x25\x30"
"\x83\x29\xCC\x61\x12\xB3\x98\xC6\x3C\x26\x32\x93\xA9\xCC\x65\x32\xB3\x99\xCE\x7C\x26\x34"
"\xA3\x29\xCD\x69\x52\xB3\x9A\xD6\xBC\x26\x36\xB3\xA9\xCD\x6D\x72\xB3\x9B\xDE\xFC\x26\x38"
"\xC3\x29\xCE\x71\x92\xB3\x9C\xE6\x3C\x27\x3A\xD3\xA9\xCE\x75\xB2\xB3\x9D\xEE\x7C\x27\x3C"
"\xE3\x29\xCF\x79\xD2\xB3\x9E\xF6\xBC\x27\x3E\xF3\xA9\xCF\x7D\xF2\xB3\x9F\xFE\xFC\x27\x40"
"\x03\x2A\xD0\x81\x12\xB4\xA0\x06\x3D\x28\x42\x13\xAA\xD0\x85\x32\xB4\xA1\x0E\x7D\x28\x44"
"\x23\x2A\xD1\x89\x52\xB4\xA2\x16\xBD\x28\x46\x33\xAA\xD1\x8D\x72\xB4\xA3\x1E\xFD\x28\x48"
"\x43\x2A\xD2\x91\x92\xB4\xA4\x26\x3D\x29\x4A\x53\xAA\xD2\x95\xB2\xB4\xA5\x2E\x7D\x29\x4C"
"\x63\x2A\xD3\x99\xD2\xB4\xA6\x36\xBD\x29\x4E\x73\xAA\xD3\x9D\xF2\xB4\xA7\x3E\xFD\xE9\x2A"
"\x45\x10\xC7\x39\xCD\xA9\x0C\x40\x3D\x2A\x52\xE7\x79\xC6\x80\x70\x31\xA9\x4E\x7D\x2A\x38"
"\x13\xC5\x46\xA8\x52\xB5\xAA\xD8\x9C\xCF\xF5\xAC\xAA\xD5\xAD\x36\x33\x39\xC4\xBB\xE1\x04"
"\xCA\x40\x54\x5B\x18\x95\xAB\x66\x3D\xAB\x75\xB2\x63\xCA\xCA\x85\xAF\x91\x8E\xA0\xDB\x5A"
"\x69\xC3\xB9\x11\xF6\x0F\xAD\x76\x5D\x26\x99\xC4\x88\xAD\xB6\xCA\x41\x4F\x71\x55\xDB\x5C"
"\x3F\x58\xD7\xBB\x12\xD6\x98\x62\x1D\x6B\x1F\x9D\xD7\xD6\x3F\xFE\x55\x21\x83\x5D\xE0\x63"
"\x0B\x2B\xD9\x8F\xB6\x15\x00\xB9\x6A\x6C\x42\x22\x6B\x40\xCD\x4E\xB6\xB3\x19\xAD\xEC\x10"
"\xC8\x9A\x27\xCC\x6E\xAE\x67\x35\xE4\xAC\x67\x53\x4B\xD1\xCA\x1E\x64\xB4\x19\x34\x6D\x0B"
"\x51\xAB\xDA\xD9\x3E\x94\xB5\x95\x1A\x08\x69\x0F\x22\x5B\xFC\xED\x96\xB6\xBE\x55\xE7\x04"
"\x6A\x41\xC7\xE1\xD6\x82\x91\x21\xF1\x24\xA3\x70\xFB\x5A\x0E\xC6\x36\xB0\x20\x39\xC5\x70"
"\xE9\xE8\x0C\x19\x3E\x37\xBA\x6F\x9A\xEE\x6F\xB3\xAB\xCB\xB6\xDA\xD6\xB2\x90\x5C\x6E\xE8"
"\x52\xD8\xDB\xD6\x4A\x6E\x25\xDB\xD3\x2E\x7A\x43\xC9\x5D\xFD\x21\xEE\xBB\x89\x84\xAD\x78"
"\x9D\x6B\xB5\xF3\x50\x77\xBE\x22\x4C\x2F\x7E\xD5\xCB\xDE\x87\x74\xD7\xB5\xEF\x65\x6E\x7C"
"\xE1\x6B\xDE\xF2\xB6\x97\xBE\xF9\x3D\xF0\x24\xD7\x8B\xDC\x87\xF8\x17\x26\xE3\x6D\xE4\xF4"
"\x22\x0C\x3B\xDB\x3D\xD8\xBB\x06\x6E\x5A\x0C\x11\xAC\xE1\x3C\x2A\xB8\x6A\x03\x56\xEE\x7F"
"\xC3\xBB\x92\x0A\x7F\xA9\xC2\xE7\xB5\x6F\x86\x37\xAC\xE2\x29\x6E\x72\xAC\xAC\x32\xAE\x85"
"\xBD\x75\xBE\xDC\x92\x45\xC0\x25\x21\xB1\x96\x2A\x0C\x08\x17\xDB\x22\x15\xC6\xDD\xB1\x8B"
"\x7D\xBC\xE2\x21\x0B\x33\x51\x59\x4D\x2E\xFA\x42\xAC\x43\xF0\x2E\xB9\x76\x38\x26\x32\x94"
"\xC9\x79\x1F\x1A\x2B\x04\x09\xCA\x4B\x2C\x48\xDC\x64\xDD\x6D\x4C\xD5\x21\x4F\x8E\xD2\x97"
"\xA3\x2C\xE6\x5F\x8A\xC0\x19\xD1\xC5\x6E\x2D\x35\xE8\x64\xF9\x92\x2D\xCC\x63\x7E\xB3\x2E"
"\xC9\xF4\xD5\x8F\x2C\xF5\x45\xBF\x73\x73\x89\xF0\x0C\xE7\x3D\xB3\x52\xCE\xB4\x54\x23\xDD"
"\xBA\x3C\xB3\xD4\x49\x58\x75\xBC\xD3\x33\x9F\x13\x4D\xC9\x3A\x0B\xDA\x21\x7E\xE6\x26\xA2"
"\x15\x2D\xE9\x3C\xD6\x99\xCA\x45\x8C\x4E\x53\xA3\x19\xE9\x49\x73\x7A\x8A\x53\x76\xDE\x61"
"\x5D\xFC\xE7\x0A\x6E\xBA\xD3\xA6\xBE\xE1\x7D\x8E\x3C\xB0\x52\xCB\x8E\xD5\xA7\x7E\xF5\x07"
"\x8D\x4C\x14\xD6\x29\xCF\x0C\x57\x70\x21\x9B\x67\x63\xE5\x5A\x5F\xC1\xB8\xBB\x56\x5E\xAF"
"\x99\x2C\x90\x46\x2F\xE4\xD7\xAE\x0B\x76\x4D\x8C\xDD\x3A\x64\xC3\xBA\xD9\x39\xEB\x30\x0D"
"\xED\x93\x6B\xD9\x9C\x98\x58\x17\x76\xF0\xB4\x6B\x75\xED\x0F\xDF\xD7\xD9\xDE\x16\x18\xB4"
"\x29\x78\x1C\x57\x17\xB8\xDB\xDC\x4E\x31\xB6\x6D\xFC\xC4\x6D\x97\x1B\xDD\xDF\x7E\xB7\xE5"
"\xF6\x4B\xAD\x05\xA3\x86\xDC\xEB\x36\x77\xBB\x05\x92\x69\xB9\xAA\x1B\xC5\xFA\xAE\xAF\xB5"
"\xF1\x0D\xEF\x81\x47\x29\xDC\x90\x6B\x8F\xBD\xFD\xCD\x54\x80\x23\xD9\xDD\x37\xCE\x76\x43"
"\xAA\xDD\xF0\x7F\x13\xBC\xE2\x59\x32\x38\x20\xF1\x06\xF1\xD4\x48\x9C\xC1\x04\x4E\xD8\xC6"
"\x37\xF6\x71\x85\xFF\x63\xDF\x16\x3F\xB9\x43\xCA\x4C\x47\x5C\x9E\xD0\xC3\x16\xE9\x6E\xA8"
"\x42\xAE\x99\x8E\x6B\x5B\xE0\xA7\x04\xF0\xB9\x29\x8E\x61\x9D\xA3\xBC\xE7\x42\xB3\xCB\x2C"
"\x9A\xD7\xF2\x68\x57\x2E\xE1\x20\x39\xA3\xA5\xBB\x62\x74\x93\x14\x27\xE9\x3E\xAF\xF8\x7C"
"\x8A\x0B\x3A\x71\xA7\x6D\xE9\x01\x3F\x62\x12\xFB\x2D\xED\x83\x3F\xBD\xEB\x0D\x21\x90\x5E"
"\x61\x0E\x66\x99\x6B\x66\x44\x73\x1E\x8E\xD5\x19\x88\x46\xAF\xB3\x9D\xBF\x43\x15\x06\xB4"
"\x88\xAD\x10\xB1\x5B\x90\xEC\x60\x02\xB1\x80\xD2\xEE\x65\xBC\xB7\xBD\xEF\x8E\xC6\x14\x95"
"\xE9\x6E\x22\xBD\x37\x44\x7A\xD3\xCB\xB3\xDD\xE9\x62\x78\x43\xFB\xBD\xF1\x08\x59\xBC\x0E"
"\xAA\x37\xEC\x6E\x51\xBD\xCD\x89\x5F\x1F\xE1\x1D\xAF\x79\xA8\xAD\xF0\xEC\xF3\x76\xB9\xE5"
"\xB5\x1E\xC1\xCC\x6F\xBE\xF4\x0C\x19\x5A\xD2\x69\x0D\x6C\xE7\x8D\xA6\xD6\x66\x10\x7A\x0A"
"\x5B\x5F\x6B\xD8\x9B\xBE\xF6\xE4\x99\xC0\x50\x89\x2A\x08\xDA\xDB\xBE\xF7\xBE\xFF\x3D\xF0"
"\x83\x2F\xFC\xE1\x13\xBF\xF8\xC6\x3F\x3E\xF2\x93\xAF\xFC\xE5\x33\xBF\xF9\xCE\x7F\x3E\xF4"
"\xA3\x2F\xFD\xE9\x53\xBF\xFA\xD6\xBF\x3E\xF6\xB3\xAF\xFD\xED\x73\xBF\xFB\xDE\xFF\x3E\xF8"
"\xC3\x2F\xFE\xF1\x93\xBF\xFC\xE6\x3F\x3F\xFA\xD3\xAF\xFE\xF5\xB3\xBF\xFD\xEE\x7F\x3F\xFC"
"\xE3\x2F\xFF\xF9\xD3\xBF\xFE\xF6\xBF\x3F\xFE\xF3\xAF\xFF\xFD\xF3\xBF\xFF\xFE\xFF\x3F\x00"
"\x06\xA0\x00\x0E\x20\x01\x16\xA0\x01\x1E\x20\x02\x26\xA0\x02\x2E\x20\x03\x36\xA0\x03\x3E"
"\x20\x04\x46\xA0\x04\x4E\x20\x05\x56\xA0\x05\x5E\x20\x06\x66\xA0\x06\x6E\x20\x07\x76\xA0"
"\x07\x7E\x20\x08\x86\xA0\x08\x8E\x20\x09\x96\xA0\x09\x9E\x20\x0A\xA6\xA0\x0A\xAE\x20\x0B"
"\xB6\xA0\x0B\xBE\x20\x0C\xC6\xA0\x0C\xCE\x20\x0D\xD6\xA0\x0D\xDE\x20\x0E\xE6\xA0\x0E\xEE"
"\x20\x0F\xF6\xA0\x0F\xFE\x20\x10\x06\xA1\x10\x0E\x21\x11\x16\xA1\x11\x1E\x21\x12\x26\xA1"
"\x12\x2E\x21\x13\x36\xA1\x13\x3E\x21\x14\x46\xA1\x14\x4E\x21\x15\x56\xA1\x15\x5E\x21\x16"
"\x66\xA1\x16\x6E\x21\x17\x76\xA1\x17\x7E\x21\x18\x86\xA1\x18\x8E\x21\x19\x96\xA1\x19\x9E"
"\x21\x1A\xA6\xA1\x1A\xAE\x21\x1B\xB6\xA1\x1B\xBE\x21\x1C\xC6\xA1\x1C\xCE\x21\x1D\xD6\xA1"
"\x1D\xDE\x21\x1E\xE6\xA1\x1E\xEE\x21\x1F\xF6\xA1\x1F\xFE\x21\x20\x06\xA2\x20\x0E\x22\x21"
"\x16\xA2\x21\x1E\x22\x22\x26\xA2\x22\x2E\x22\x23\x36\xA2\x23\x3E\x22\x24\x46\xA2\x24\x4E"
"\x22\x25\x56\xA2\x25\x5E\x22\x26\x66\xA2\x26\x6E\x22\x27\x76\xA2\x27\x7E\x22\x28\x86\xA2"
"\x28\x8E\x22\x29\x96\xA2\x29\x9E\x22\x2A\xA6\xA2\x2A\xAE\x22\x2B\xB6\xA2\x2B\xBE\x22\x2C"
"\xC6\xA2\x2C\xCE\x22\x2D\xD6\xA2\x2D\xDE\x22\x2E\xE6\xA2\x2E\xEE\x22\x2F\xF6\xA2\x2F\xFE"
"\x22\x30\x06\xA3\x30\x0E\x23\x31\x16\xA3\x31\x1E\x23\x32\x26\xA3\x32\x2E\x23\x33\x36\xA3"
"\x33\x3E\x23\x34\x46\xA3\x34\x4E\x23\x35\x56\xA3\x35\x5E\x23\x36\x66\xA3\x36\x6E\x23\x37"
"\x76\xA3\x37\x7E\x23\x38\x86\xA3\x38\x8E\x23\x39\x96\xA3\x39\x9E\x23\x3A\xA6\xA3\x3A\xAE"
"\x23\x3B\xB6\xA3\x3B\xBE\x23\x3C\xC6\xA3\x3C\xCE\x23\x3D\xD6\xA3\x3D\xDE\x23\x3E\xE6\xA3"
"\x3E\xEE\x23\x3F\xF6\xA3\x3F\xFE\x23\x40\x06\xA4\x40\x0E\x24\x41\x16\xA4\x41\x1E\x24\x42"
"\x26\xA4\x42\x2E\x24\x43\x36\xA4\x43\x3E\x24\x44\x46\xA4\x44\x4E\x24\x45\x56\xA4\x45\x5E"
"\x24\x46\x66\xA4\x46\x6E\x24\x47\x76\xA4\x47\x7E\x24\x48\x86\xA4\x48\x8E\x24\x49\x96\xA4"
"\x49\x9E\x24\x4A\xA6\xA4\x4A\xAE\x24\x4B\xB6\xA4\x4B\xBE\x24\x4C\xC6\xA4\x4C\xCE\x24\x4D"
"\xD6\xA4\x4D\xDE\x24\x4E\xE6\xA4\x4E\xEE\x24\x4F\xF6\xA4\x4F\xFE\x24\x50\x06\xA5\x50\x0E"
"\x25\x51\x16\xA5\x51\x1E\x25\x52\x26\xA5\x52\x2E\x25\x53\x36\xA5\x53\x3E\x25\x54\x46\xA5"
"\x54\x4E\x25\x55\x56\xA5\x55\x5E\x25\x56\x66\xA5\x56\x6E\x25\x57\x76\xA5\x57\x7E\x25\x58"
"\x86\xA5\x58\x8E\x25\x59\x96\xA5\x59\x9E\x25\x5A\xA6\xA5\x5A\xAE\x25\x5B\xB6\xA5\x5B\xBE"
"\x25\x5C\xC6\xA5\x5C\xCE\x25\x5D\xD6\xA5\x5D\xDE\x25\x5E\xE6\xA5\x5E\xEE\x25\x5F\xF6\xA5"
"\x5F\xFE\x25\x60\x06\xA6\x60\x0E\x26\x61\x16\xA6\x61\x1E\x26\x62\x26\xA6\x62\x2E\x26\x63"
"\x36\xA6\x63\x3E\x26\x64\x46\xA6\x64\x4E\x26\x65\x56\xA6\x65\x5E\x26\x66\x66\xA6\x66\x6E"
"\x26\x67\x76\xA6\x67\x7E\x26\x68\x86\xA6\x68\x8E\x26\x69\x96\xA6\x69\x9E\x26\x6A\xA6\xA6"
"\x6A\xAE\x26\x6B\xB6\xA6\x6B\xBE\x26\x6C\xC6\xA6\x6C\xCE\x26\x6D\xD6\xA6\x6D\xDE\x26\x6E"
"\xE6\xA6\x6E\xEE\x26\x6F\xF6\xA6\x6F\xFE\x26\x70\x06\xA7\x70\x0E\x27\x71\x16\xA7\x71\x1E"
"\x27\x72\x26\xA7\x72\x2E\x27\x73\x36\xA7\x73\x3E\x27\x74\x46\xA7\x74\x4E\x27\x75\x56\xA7"
"\x75\x5E\x27\x76\x66\xA7\x76\x6E\x27\x77\x76\xA7\x77\x7E\x27\x78\x86\xA7\x78\x8E\x27\x79"
"\x96\xA7\x79\x9E\x27\x7A\xA6\xA7\x7A\xAE\x27\x7B\xB6\xA7\x7B\xBE\x27\x7C\xC6\xA7\x7C\xCE"
"\x27\x7D\xD6\xA7\x7D\xDE\x27\x7E\xE6\xA7\x7E\xEE\x27\x7F\xF6\xA7\x7F\xFE\x27\x80\x06\xA8"
"\x80\x0E\x28\x81\x16\xA8\x81\x1E\x28\x82\x26\xA8\x82\x2E\x28\x83\x36\xA8\x83\x3E\x28\x84"
"\x46\xA8\x84\x4E\x28\x85\x56\xA8\x85\x5E\x28\x86\x66\xA8\x86\x6E\x28\x87\x76\xA8\x87\x7E"
"\x28\x88\x22\x0C";
#undef DD_ALIGNED_BUFFER

static const FontCharSet fontRussoOneCharSet = {
	/* bitmap               = */ fontRussoOneBitmap,
	/* bitmapWidth          = */ 1024,
	/* bitmapHeight         = */ 1024,
	/* bitmapColorChannels  = */ 1,
	/* bitmapDecompressSize = */ 1048576,
	/* charBaseHeight       = */ 40,
	/* charWidth            = */ 44,
	/* charHeight           = */ 52,
	/* charCount            = */ 191,
	{
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 { 367, 576 }, {  95, 576 }, { 573, 504 }, {  54,  72 },
	 { 288, 216 }, { 310,   0 }, { 525,  72 }, { 996, 504 },
	 { 825, 504 }, { 860, 504 }, { 686, 432 }, { 390, 432 },
	 { 217, 576 }, { 888, 432 }, { 247, 576 }, { 175, 432 },
	 { 835, 144 }, { 347, 504 }, { 322, 288 }, { 382, 216 },
	 { 541, 144 }, { 429, 216 }, { 758, 216 }, { 779, 360 },
	 {  48, 216 }, { 617, 216 }, { 307, 576 }, { 337, 576 },
	 { 602, 432 }, { 728, 432 }, { 518, 432 }, { 322, 360 },
	 { 213,  72 }, { 864,   0 }, { 639, 144 }, { 523, 216 },
	 { 688, 144 }, { 460, 288 }, { 414, 288 }, { 737, 144 },
	 { 786, 144 }, { 309, 504 }, {   0, 504 }, { 590, 144 },
	 { 368, 288 }, { 482,   0 }, { 492, 144 }, {  50, 144 },
	 { 198, 144 }, { 878,  72 }, { 394, 144 }, { 931, 144 },
	 { 883, 144 }, { 443, 144 }, { 107,  72 }, {  65,   0 },
	 { 474,  72 }, { 972,   0 }, { 476, 216 }, { 790, 504 },
	 { 261, 432 }, { 610, 504 }, { 869, 360 }, { 768, 432 },
	 { 930, 504 }, { 598, 288 }, { 644, 288 }, {  89, 432 },
	 { 966, 288 }, { 914, 360 }, { 560, 432 }, { 959, 360 },
	 { 552, 360 }, { 963, 504 }, { 195, 504 }, { 852, 216 },
	 { 895, 504 }, { 251,   0 }, { 944, 216 }, {   0, 288 },
	 {  46, 288 }, { 979, 144 }, { 848, 432 }, { 184, 288 },
	 { 928, 432 }, { 276, 288 }, { 144, 216 }, { 130,   0 },
	 { 664, 216 }, {  96, 216 }, {  45, 432 }, { 461, 504 },
	 { 277, 576 }, { 423, 504 }, { 218, 432 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 { 390, 576 }, {  64, 576 }, { 132, 432 }, {  92, 288 },
	 { 318,  72 }, { 422,  72 }, { 157, 576 }, { 824, 360 },
	 { 968, 432 }, { 368,   0 }, { 499, 504 }, { 711, 216 },
	 { 644, 432 }, { 808, 432 }, { 425,   0 }, { 718, 504 },
	 { 385, 504 }, { 304, 432 }, { 646, 504 }, { 754, 504 },
	 {   0, 576 }, { 138, 288 }, { 627,  72 }, { 187, 576 },
	 {  32, 576 }, { 126, 576 }, { 536, 504 }, { 570, 216 },
	 { 160,  72 }, { 810,   0 }, { 538,   0 }, { 506, 288 },
	 {   0,  72 }, { 702,   0 }, { 918,   0 }, { 594,   0 },
	 { 756,   0 }, { 648,   0 }, {   0,   0 }, { 335, 216 },
	 { 978,  72 }, { 898, 216 }, { 230, 288 }, { 552, 288 },
	 { 233, 504 }, { 271, 504 }, {  78, 504 }, {  39, 504 },
	 { 266,  72 }, { 345, 144 }, { 778,  72 }, { 728,  72 },
	 { 678,  72 }, {   0, 144 }, { 828,  72 }, { 476, 432 },
	 { 576,  72 }, { 296, 144 }, { 247, 144 }, { 149, 144 },
	 { 100, 144 }, { 370,  72 }, { 928,  72 }, { 805, 216 },
	 { 690, 288 }, { 736, 288 }, { 782, 288 }, { 828, 288 },
	 { 874, 288 }, { 920, 288 }, { 191,   0 }, { 433, 432 },
	 {   0, 432 }, { 644, 360 }, { 689, 360 }, { 734, 360 },
	 { 990, 216 }, { 682, 504 }, { 156, 504 }, { 117, 504 },
	 {   0, 360 }, {  46, 360 }, {  92, 360 }, { 138, 360 },
	 { 184, 360 }, { 230, 360 }, { 276, 360 }, { 347, 432 },
	 { 192, 216 }, { 368, 360 }, { 414, 360 }, { 460, 360 },
	 { 506, 360 }, { 240, 216 }, { 598, 360 }, {   0, 216 }
	}
};



#if DEBUG_DRAW_CXX11_SUPPORTED
#define DD_ALIGNED_BUFFER(name) alignas(16) static const std::uint8_t name[]
#else // !C++11
#if defined(__GNUC__) // Clang & GCC
#define DD_ALIGNED_BUFFER(name) static const std::uint8_t name[] __attribute__((aligned(16)))
#elif defined(_MSC_VER) // Visual Studio
#define DD_ALIGNED_BUFFER(name) __declspec(align(16)) static const std::uint8_t name[]
#else // Unknown compiler
#define DD_ALIGNED_BUFFER(name) static const std::uint8_t name[] /* hope for the best! */
#endif // Compiler id
#endif // DEBUG_DRAW_CXX11_SUPPORTED

DD_ALIGNED_BUFFER(fontSourceCodeProBitmap) =
"\x42\x88\x00\x00\x0F\x42\x04\x00\x00\x00\x06\x14\x38\x90\x60\x41\x83\x07\x11\x26\x54\xB8"
"\x90\x61\x43\x87\x0F\x21\x46\x94\x38\x91\x62\x45\x8B\x17\x31\x66\xD4\xB8\x91\x63\x47\x8F"
"\x1F\x41\x86\x14\x39\x92\x64\x49\x93\x27\x51\xA6\x54\xB9\x92\x65\x4B\x97\x2F\x61\xC6\x94"
"\x39\x93\x66\x4D\x9B\x37\x71\xE6\xD4\xB9\x93\x67\x4F\x9F\x3F\x81\x06\x15\x3A\x94\x68\x51"
"\xA3\x47\x91\x26\x55\xBA\x94\x69\x53\xA7\x4F\xA1\x46\x95\x3A\x95\x6A\x55\xAB\x57\xB1\x66"
"\xD5\xBA\x95\x6B\x57\xAF\x5F\xC1\x86\x15\x3B\x96\x6C\x59\xB3\x67\xD1\xA6\x55\xBB\x96\x6D"
"\x5B\xB7\x6F\xE1\xC6\x95\x3B\x97\x6E\x5D\xBB\x77\xF1\xE6\xD5\x0B\xD7\xC4\x84\xBD\x7F\x01"
"\x07\x16\x3C\x98\xF0\x5E\x39\xF3\x18\x15\x56\xBC\x98\x71\x63\xC7\x8F\x91\xD6\xD0\xF6\xEF"
"\xDF\xBC\x21\x29\x75\x98\x31\xE3\x17\x72\x67\xCF\x23\x6B\x70\xFE\x3C\x9A\x34\xD3\x09\xA7"
"\x28\xA7\x9E\x65\x72\x82\xA3\x79\xA9\xFF\x69\xAB\x11\xF0\xD4\xB6\x6D\xCE\x6C\x95\x29\xBD"
"\x9B\xB7\xC1\xC3\xCE\x44\xF7\x16\x3E\xFC\xE6\x61\xD8\xA9\xBD\x90\x14\x31\xF9\x38\xE5\x4D"
"\x13\x86\xBC\xA6\x6C\x99\x78\xF5\xCF\x8C\x54\x5B\xD7\xBE\x3D\xA5\xE4\xE6\xA9\x81\x8B\x9C"
"\xE0\xEC\x7B\xF9\x7F\xE1\xB9\xA7\x1F\x8C\x1D\x76\x72\xF5\xEF\xE1\x5F\xF4\x22\xFD\xBB\x36"
"\xDD\x22\xD9\x9B\x6F\x9E\x38\x7E\xFF\xBA\xA7\x9B\xA3\xCE\xBF\x01\x09\x3C\x68\xBC\xFA\xEE"
"\x13\x8F\x3C\xFD\x8E\x43\xAF\xC0\x07\xD3\x3A\xF0\x3B\x73\x44\x80\xD0\x42\x02\xA3\x83\xCD"
"\x99\xD9\x4A\xF2\x02\x36\xCB\x00\xAC\xAF\xC2\x0B\x49\x14\x4B\xC2\x00\x01\x29\x91\xA2\x21"
"\x9C\xB9\x8D\xC3\x80\x6A\x68\xD1\x99\x04\x55\xAC\x8B\xBD\x5A\x5E\x2C\xA9\x0C\x61\x6C\xFB"
"\x87\x3F\x00\xCA\x60\x6E\xBA\x53\x82\x73\x0C\x09\x3A\x52\xB1\x25\x15\x3A\x90\xA8\xD1\x2E"
"\xEF\xBE\xDB\xD0\xC9\x88\x3C\x4C\x4D\x40\x00\xE6\x6B\x6F\xCA\xA6\x44\x10\x26\x47\x8F\x26"
"\x10\xC4\x84\x9A\x6A\xD0\xAC\xC9\x8F\xAE\xD0\x4C\x4D\xCD\xC6\x04\x68\x82\x34\xD7\x64\xF3"
"\xA4\x2A\x3F\xBC\x0C\xA4\x18\xCD\xC3\x71\x4B\xB8\x66\xF9\x6E\x1E\x39\xF6\x7C\x48\x04\x73"
"\x8E\xE3\xEF\x44\xCA\x56\x0B\xD4\xA7\xCC\x34\xBB\xA2\x4D\x37\xC9\xFB\x73\xB0\x41\x03\xB4"
"\x13\x00\x4A\x8F\xBB\x92\xA4\xFC\xC0\x2B\x52\xA3\x10\x19\x24\xB2\x30\x4C\x19\x4C\xED\xC7"
"\x8B\x5A\x3B\x67\x3A\x3D\x49\xA2\x33\xBB\x84\x32\xD4\xD0\x53\x8D\x48\xA5\x8C\xD5\x8F\x5C"
"\xED\xB4\x20\x4E\x4D\xCD\xA8\x06\x4E\xB6\x59\xF5\xCB\xAE\x72\xF5\x11\xA0\x58\x5F\xE5\xE8"
"\x4D\x35\x87\x65\x6D\xCD\x47\x47\xAA\x15\x51\x84\x78\xA5\xEC\x54\x89\xFA\x6C\x70\x56\x80"
"\xAA\xD5\x54\xA3\x32\x16\xCC\xD4\x11\xBF\xB2\xB5\xD6\xA2\x72\x75\x35\xA8\x5B\x4B\x3B\x92"
"\x96\x32\x0A\x3F\x42\x36\x35\x78\x8F\xA5\x2F\xDD\x92\xD0\x9D\x16\xCC\x7C\xCD\x4B\xD4\x22"
"\x1D\x00\x0E\x18\x5A\x82\x4C\x08\x38\xE0\x6D\x2D\x9A\x00\x49\x1E\x85\x49\xE5\x4C\x93\xAA"
"\x65\xD0\xBD\x8B\x8C\xCB\x74\x62\x83\x06\x9E\xA8\xD8\x6B\x77\xDD\x4F\xA4\x58\x25\x55\xB0"
"\x52\x82\xDC\x75\x90\x22\x28\x3D\x06\xAB\x58\xF7\xE4\x35\x76\x23\x13\x5C\xD3\x32\x25\x13"
"\x4E\xA1\xCF\xDB\x90\xDC\xF5\x97\x64\x42\x8F\xA3\x97\xA2\x6A\x7D\x1E\xC8\x5D\x8E\x2F\x1A"
"\x42\xC8\xF2\xB4\xA9\x05\xB6\xA0\x25\x02\x7A\xC4\x9D\x53\xFE\x28\xE2\xCA\xD8\xDD\xA8\xD8"
"\x7F\x74\xBE\x5A\xE7\x91\x0E\x35\xD7\xA3\xA9\x9B\x63\x5A\xA2\x96\x6F\xE6\x76\xE4\x8D\x82"
"\x2C\x6F\x9E\x71\x95\xE3\xB9\xD4\xE9\xAA\x9E\x08\xEC\xB2\x01\xAA\xC1\x1C\xA2\x21\xAA\xF6"
"\x62\x83\xF2\xA5\xDB\xEA\x7F\x44\xDD\xF4\xBB\xBD\x01\xE0\xD7\x6F\x87\xBA\x5E\xFA\xE9\x82"
"\x0E\x8B\x9B\x4B\xB7\xCF\xE3\xEC\x50\x6D\x16\xAF\x08\xD4\x3A\x15\x9A\xC5\x64\x8A\x96\x9B"
"\xB0\x72\x82\xC6\xDB\x7A\xA2\xC4\x45\x0F\x28\x62\xBC\x1F\x22\xDB\xF1\xC2\xC3\xFE\xDC\x22"
"\xB0\xCD\x3B\xBC\x21\xD5\xF9\x6E\x1D\x24\x77\xE1\x96\xFA\xBB\x53\x23\x26\x1C\x67\xC8\x29"
"\xF3\xBD\x68\x7B\x63\x5F\x1D\xA2\xC4\x7D\x1F\x7A\xA3\x09\x94\x66\x70\xF3\xAF\xDF\x56\x5C"
"\x3E\x06\x4B\x07\xC0\xEE\xE0\xCF\xCD\xD4\x78\x48\xB5\x25\x49\x87\x93\x5A\xC6\x7A\xA0\xAB"
"\x85\x8F\x28\xFC\xDC\x7D\x7B\xD7\x75\xA6\xBC\x9B\x27\x70\x37\x9B\xAF\x05\xE1\x88\x70\x17"
"\x7B\xA0\x6C\xAB\x87\xE8\xFC\xE7\x05\x92\x10\x75\xC4\xC3\x75\xAF\xFE\x05\x50\x7D\x17\x71"
"\x97\xEF\xC2\x57\x3E\x89\x4C\x80\x5F\xA5\x92\x5D\x43\x0E\x58\x90\x04\x86\x04\x76\x0A\xAC"
"\x88\xE1\xD8\x85\x41\xF0\x11\xEF\x81\xD8\xAA\x0F\x1D\x00\x46\x07\xA5\xFD\x2F\x6F\xCD\x29"
"\x1D\xBF\xF2\x27\x91\xEB\xBD\x8D\x7F\xB4\x02\x5E\xA9\x5A\xE8\x90\x5A\x01\x0A\x59\x62\x5B"
"\x21\xD5\x2E\xD8\xB3\xF5\x05\xA4\x65\x24\x24\x4A\xE2\x7C\x96\xB3\x8D\x30\x42\x54\xA4\xA2"
"\x9B\x1C\x64\x15\x98\xFD\xCD\x0F\x5D\x3E\x5C\xC8\xD5\xC4\x67\xA0\x00\x5A\x90\x21\xFC\xE2"
"\xDF\xD5\x9C\x58\x45\x13\x82\x8E\x80\x51\xD4\x48\x03\x4B\x45\x45\x87\xA0\x90\x8B\x5B\xBC"
"\xDD\x0B\x65\xA6\xAC\x2E\xFA\x2C\x71\x31\xF4\x48\xB1\xDC\x38\x11\xE5\x0D\xA4\x2F\x1A\x69"
"\x19\xD3\x8A\x65\xBF\x89\xDC\xF0\x6D\x29\xBC\x08\xAF\xCE\x41\x3C\x33\x56\x84\x53\x89\x3A"
"\x91\xB7\xF8\xE8\xB2\x05\x12\x30\x8E\xB9\xEA\xE0\x50\xC8\x17\x10\x7E\xE9\xB1\x68\x6E\xE3"
"\x1F\x12\x31\x07\x18\x13\x68\x86\x0E\x47\x4B\x61\xBE\xE2\xB8\x90\x32\x99\x81\x0E\x90\x2B"
"\x5F\xD7\xDE\x37\x11\x2B\x7A\xAA\x8D\xF3\x7B\x48\xB5\x36\x97\xC7\x1D\x36\x2D\x7A\x3A\xD4"
"\x08\x2C\x8B\x24\x4B\x0A\x32\x28\x8B\x10\x11\x62\x40\x7E\x09\xB1\x41\xFE\xCD\x96\x21\xE9"
"\x9A\xA6\xA4\xF5\x48\x86\x24\x2E\x8C\x1F\x91\x16\x27\x88\x27\x07\x83\xE9\xC0\x95\x0B\x39"
"\xA4\x9D\xAE\x29\x10\x3E\x2A\xD3\x20\x5D\xF3\x23\xEB\xA4\xF7\x94\x39\xD2\x4E\x59\x9B\x08"
"\x20\xE5\x18\xD7\x3D\xC2\xD4\xAA\x7C\xF9\xEA\x25\x43\x90\x45\xB7\x43\x85\xEC\x75\xCD\x79"
"\xDE\x04\x33\x72\xC7\xC5\x21\x6F\x23\xE7\x93\x8D\x9B\x1A\x28\xC6\xD9\x11\x2F\x68\xFC\x3C"
"\xE3\xD2\x52\x71\x9C\x6F\x4A\x24\x82\x3C\x14\xA4\x40\x23\x32\x01\x33\x24\x49\x10\x0F\xE3"
"\xD7\x3B\xC7\x38\x4C\x90\x6C\x4C\x20\xD5\xC2\x68\xE6\xBE\xF3\x1C\x80\x94\x41\x90\x0B\xA5"
"\xE5\xD2\x00\x51\x4C\x17\xCE\x6B\x44\xD9\xAC\x1B\xE4\x42\xA9\x10\x69\xFD\x68\x94\x66\xB8"
"\x82\xE4\x08\x68\xD2\x86\x78\xF4\x20\xF8\xCC\xC8\x2A\xC1\x09\x9B\x8F\x32\xC4\x88\x80\x4A"
"\xA7\x50\x87\x18\x35\x82\xF8\x94\x90\x4A\x1D\x08\x53\x2B\x12\x4F\xC7\x31\xF0\x43\x34\xC2"
"\x88\xAB\xEC\x37\xB9\x66\x9D\x34\x9C\x02\x01\x6A\x46\x92\xC9\xAE\x6A\xE9\xB4\x21\x0D\x9C"
"\x45\x70\xCC\xBA\xD2\x4C\x9A\x4D\xA1\xF8\x29\x14\xAF\xC8\xEA\x10\x7D\x0A\x64\xAE\x1C\x49"
"\x5B\xA6\x52\xC4\x2F\x88\x22\x64\x02\x3C\xEA\x51\x2D\x63\x2A\x28\xE0\xF9\xAB\x65\x81\x85"
"\x27\x07\xAB\x56\xD7\x8D\xCC\x94\x57\x86\x1D\x68\xBA\x48\x45\x2F\x3E\xA6\x52\x8E\xC0\x73"
"\xCF\x89\xE8\xD5\xB2\xBD\x3E\x51\xA3\x5E\xB5\x67\x35\x53\x87\xD8\xC2\x82\x96\x4A\xCD\x39"
"\x05\x41\x30\x39\x1D\xA3\x6A\xA4\x58\xF9\xFB\xAA\x45\x5A\x7B\x90\xD7\xC2\xB6\xAB\x01\xA1"
"\x6A\x6A\xFE\xC9\x11\x4E\x3D\xEF\x50\x8E\x55\x88\x2E\x05\xD2\xD0\x2F\x36\x67\x62\x61\xED"
"\xA7\x20\x4D\x06\x46\xDF\x26\x44\xAF\xC0\x04\x1E\x37\xE9\x07\x39\xCB\x34\x96\xB4\xA1\x6D"
"\x2B\x5D\x89\x17\x57\x6B\x36\xAF\x3C\xB5\x20\x20\x74\x0D\x82\xBB\x52\x69\x57\x8B\x49\x0C"
"\x6A\x01\x87\x5B\xA8\x82\x34\x57\xB7\x3A\xCC\x17\x79\x15\x82\x2C\xF4\xB8\x2A\x51\x37\xA4"
"\xA7\x45\x34\x0B\x10\xAC\x8E\x28\x57\x94\x64\x28\xF0\xF8\x47\xCE\x4F\x75\x51\x0E\xF9\xF2"
"\xEF\xBF\xAC\x60\x4A\x81\xA4\x36\x36\x5B\xAD\x88\xB4\x02\x8C\x58\xB0\x02\x78\x56\x02\xFE"
"\xA3\x79\x6D\x8B\x2E\xCA\xFE\x14\x36\xA2\x3B\xD4\x50\x13\x02\x5C\xD3\x7D\x96\x23\x1C\x65"
"\x2B\x52\x37\xA2\xC1\x11\x97\xE7\xC0\x0F\x31\x31\x00\x78\xBA\x4B\x59\x51\xB7\x23\xF9\xC5"
"\xEE\x71\x36\x2B\xD3\xA3\x45\x6F\xB9\x05\x81\x62\xA9\x40\xFC\x5B\xED\x01\xC0\xC6\xF9\x24"
"\xDE\x15\x9D\x3A\xBC\x42\xCD\xB4\xC6\xF4\x81\xD7\xA1\x92\x73\xC3\xDC\x62\x44\x5E\x02\x42"
"\x17\xBD\xDE\xAB\x46\x95\x7A\xF6\xBA\xED\x3D\x8E\xAA\x70\x5C\x63\x1A\xB9\xEA\x47\x0C\xDE"
"\x30\x46\xBA\x66\x3F\x32\x66\x24\xCD\xAE\x5B\x33\x87\x93\x25\x49\x2B\xAD\x56\xCB\xBD\x1A"
"\xA0\x95\xB6\x37\x11\xC5\x5E\xEA\x85\x39\x5E\x48\xCB\x12\x35\xDA\xC5\xBE\xF0\x54\x3F\xC6"
"\xA1\x91\xAF\x2B\xE8\x83\x6A\x89\x57\x2D\x36\x9F\xBD\xF0\xA8\x4E\x8C\x88\x97\x7A\x18\x81"
"\x9D\x7E\xFC\xBC\x10\x69\x79\xA1\x6B\x41\x96\x2D\x71\x0D\x02\x68\x8E\xF4\x6D\x08\x2D\xDB"
"\xC4\x9A\xAA\x9B\x90\x43\xD5\xC2\x0C\x9E\xE4\x1E\xE0\x52\xCD\x59\xE9\xC9\xEB\xC9\x04\xF4"
"\xF4\xA7\xD7\xEA\xD0\x2D\xDB\x51\x90\x5D\x5E\x69\x2D\x9A\x84\x27\x3B\x13\xF9\x35\xF3\x48"
"\x11\x48\x48\xBD\x54\x82\xCE\x32\x22\xC9\x7E\xEA\xB2\x07\x9C\xC6\x80\x60\x12\xBC\x72\xB5"
"\x59\xDC\x50\xD3\x60\x8F\x58\x18\x8E\xB1\x5E\x26\x23\xC9\x35\x64\x62\xAE\xF5\x7C\x78\x8E"
"\x76\x12\x9D\x0D\x92\x46\x57\xA8\xBF\xCC\x96\x48\xAE\x44\x97\xAB\x5B\x0F\x84\x99\x6F\x9B"
"\x37\x40\xC0\xC8\xA0\x6A\x97\xD7\x54\xB9\xEA\x31\x5F\x09\x48\x2F\x24\xA4\xC2\x11\x6D\x12"
"\x35\xAF\xDB\x6A\x68\x47\x33\x04\x76\x6C\x14\xC6\xBD\x09\xE2\x6F\xBF\xF0\x8A\x3A\x55\xCE"
"\xF3\xBB\x41\x7D\xBF\x24\xA7\xB7\x3C\xFF\x06\xB8\x7E\x34\x35\x84\x6D\x5C\x9C\xB6\x61\xD6"
"\xB8\x7A\xC7\x8D\x1C\x82\x5C\xF4\xB8\xE6\x26\x08\x23\x84\xE1\x6D\x17\xD7\x96\x36\x67\x9E"
"\xF4\x73\x2D\x65\xD0\x8E\x18\x58\x04\x3D\xDC\x39\x89\xF9\x0C\x9B\x54\xE0\x3C\xC5\x3A\xF4"
"\xF9\xEF\x50\xEE\x48\x92\x43\x24\x57\x84\x73\xD5\xBE\xD5\xA5\xB6\x54\x98\x01\x9A\xE5\xC9"
"\x34\xBD\xFD\x6A\x9B\x60\x05\x48\xEB\x5A\x8F\x39\xAE\x14\x7A\x65\x77\xEB\x2F\xBB\x27\x86"
"\xD7\xC1\xE1\x6C\x6E\xD8\x79\xBC\x8C\xF5\x71\x70\x52\x3B\x1C\x74\xCC\x49\xBC\xC9\x28\xD7"
"\x35\xCD\x53\x2E\xEE\xE5\x75\x11\xC5\x28\x39\xFA\xDD\x59\xCA\x91\xBF\xD7\x6B\xD7\x25\x47"
"\x6F\x4A\x76\x2B\x73\x8B\x18\x97\xF0\x18\x2E\xB1\xF6\x40\xA9\xF8\x8F\xA3\xBC\x73\xA6\xB2"
"\xF0\xF4\xEA\x14\x79\xB7\x66\x72\x65\x1D\x71\xD5\xF3\x12\x3F\xE1\xEF\xBC\x2F\x71\x50\x47"
"\x88\x70\xDB\x86\xE9\x8E\xE8\x8D\xD8\x5A\x42\xBB\x92\xE3\x7E\xDE\xCE\x5A\x8E\xBB\xA9\xB1"
"\xF9\xEA\xD5\x5B\x2C\xEA\xF0\x0A\xE2\x50\x8B\xBD\x9C\x4D\x0E\xF6\xF2\xF4\x1E\x74\x31\x3B"
"\x8E\x7D\x56\x22\xAD\xAD\xB1\x77\xD0\xBE\x96\xFD\x3F\xAE\x7E\x90\xD0\xAB\x04\x5D\xF0\x4D"
"\xD8\x77\x2D\xC5\xFC\xBA\xC3\x46\x18\x19\x6F\x7E\x98\x0F\xB5\x9A\x3D\xC3\x3E\x35\xDD\x0F"
"\xBE\x33\x07\x1B\x90\xCE\x7B\xD9\x6B\x03\xE1\x14\xF1\x23\x26\x3A\x5C\x6E\x3F\xF0\x21\x81"
"\x93\x9A\xF8\x4E\x19\x6D\xC4\xE9\x0A\x18\x49\x36\xEF\x5B\xAF\xEF\x2E\x22\xD9\x28\x4D\x91"
"\x3E\x05\x49\x38\xA1\xFF\x0A\x02\x5C\xC0\xC3\xAA\x28\x22\x5F\x38\x6D\x41\xE6\x01\xCC\x40"
"\x24\x80\x4C\x8F\xB9\x24\x4D\xD1\x3C\x42\xBC\xD8\x8E\x21\xAE\x40\x10\x94\xC4\x0C\x32\x46"
"\xFD\x4E\x61\x04\x8B\x0E\xC3\x34\xF0\x04\xEF\x25\x05\x59\x43\x18\xE8\x4C\x25\x60\x66\x1B"
"\x8A\xCD\x19\x1E\x06\xCD\xB0\xAF\xF1\x04\xA8\xCE\xFA\x65\xDB\x24\x0C\x5D\xC2\x43\xC4\x6C"
"\xB0\xD2\x36\x2F\x8D\x5E\xEC\x96\x5C\xCE\xFD\x8E\x70\xF1\x5E\xE8\x79\xDE\x0C\xEE\x1C\xAF"
"\x5D\xD0\x28\x7A\xAC\xEF\xCE\xA4\x07\x02\xB1\x64\xE3\xC6\xA6\xEC\x02\xD0\xEA\x50\x02\x65"
"\x60\xE3\xF6\x32\x0A\xCF\x62\xC5\x19\x82\x01\x6E\x6A\xA5\x03\xA9\x45\xA5\xD2\xAD\x23\xEA"
"\x0D\x7B\x5E\x22\x43\xD6\x46\xF2\x16\x62\xDD\x80\x2F\x09\x9D\xF0\xF0\xD6\xF0\x24\xD8\x03"
"\xF9\x52\xE2\x72\x04\x70\x00\x33\x8E\xF5\x42\x22\xDF\xFE\x61\xE1\xC8\x4E\x87\x38\x85\x5E"
"\xE6\x4F\x05\x3D\x47\x24\x20\x4C\x34\x8A\xD0\x57\xD4\xE4\xA6\x0A\x02\x09\x26\x91\xB5\x06"
"\xA7\xED\xFE\x30\xED\xE2\x8C\x07\x6B\xC9\xFB\x28\xA2\x6B\xC2\x43\xEC\x60\x0C\x14\x73\xE8"
"\x38\xA4\x49\x07\x18\xAC\x32\x84\xC1\x16\x5C\x31\x15\xC6\x8E\x22\x06\xA6\xDC\x0C\x70\x91"
"\x14\xA7\x5C\xCC\x09\x6E\xE0\x6D\xA3\xC4\xED\xF5\x70\x4F\x3F\xA6\x30\x22\x46\xF0\x44\x82"
"\x51\xC8\x32\xC9\x17\xF3\x4E\x40\x90\x51\x59\x2A\x8C\x3E\xA2\xAF\x21\x26\x20\x38\x2A\xCF"
"\x4F\x96\x8E\xDF\x54\x4E\xF9\x46\xC2\xD0\x9E\x11\x21\xF2\x28\xA5\x5C\x2E\x71\x88\x4F\xFD"
"\x54\x6F\x08\x53\x83\xD5\xD4\xC4\x11\x66\x8F\x28\x9C\xC6\xF7\xA4\x8D\xCD\xBA\x28\x1C\x7D"
"\xEC\x13\xF5\x8E\x73\x28\xEC\x0A\x55\x4E\xF6\x2E\x10\xF0\x60\x48\x0E\x1F\xE2\x30\x7E\xA4"
"\x00\x0D\x31\xBC\x60\x6A\x85\xE6\xC1\x0A\x24\x70\x08\x78\x65\x1B\x4F\xCF\xB2\xF0\xAD\xF0"
"\x10\x4E\x3F\x02\x32\x14\x6B\x26\x6E\xF2\x03\x0D\x13\x62\xD3\x1A\x12\xEF\xD4\xEA\x1E\x79"
"\x2E\x24\x24\x63\x73\x48\x05\x1E\x25\x68\x1E\x74\x86\x16\xA1\xCF\x08\xC3\x4C\xE9\xA2\x25"
"\x0A\x8B\x91\x1B\xF5\xCD\x52\xA0\xEA\xE6\xCA\xA3\x25\x65\x2A\x0A\x81\x51\x29\x5A\x29\xE2"
"\x6C\x87\x23\x50\xAF\x24\x7A\x72\x23\x29\x03\x3D\xCA\x40\x49\xCE\xE4\x11\xFD\xEF\x13\x69"
"\x52\x21\x40\xC5\x3D\xAA\x2F\x1A\xA7\xE8\xC1\x20\x67\x16\x52\xCB\x19\x4C\x40\x02\x0D\x52"
"\x23\xDD\x51\xBD\x06\x8F\x27\x9F\x0B\xCC\x36\xB1\x23\xA0\x24\x68\xE8\x24\x1F\x95\xD2\xD6"
"\xB6\xB0\xFD\xC0\xC4\x2C\xB7\x92\x23\x2A\xE6\xAC\xB8\xCC\x8B\xD4\x6D\xD8\x5A\x0F\xD8\x48"
"\xEA\x2B\xE5\x86\xB8\xBC\x89\x24\x98\x29\x22\x67\x6E\x1C\x33\x12\x2B\x2D\x87\xEF\xF8\x32"
"\x22\x2E\xAD\xE3\xF8\x51\x26\x48\xA7\x63\x24\xED\x21\xED\x90\x24\x2E\x0F\x28\x23\xC7\x20"
"\x22\x51\xCF\x7A\xCD\x3C\x44\x92\x20\x50\xA6\xE2\x9C\x6C\x44\xDE\x2F\xAA\xEC\x25\x17\xAD"
"\x45\x42\xE6\xA1\x0C\xA2\x52\x24\xB2\xAC\x23\x3F\x02\x85\xBA\x2D\x24\x2A\x26\x32\x01\x82"
"\x54\x14\x72\x21\x4E\xD3\x21\x19\x51\x7C\x50\x93\x0D\xB3\x0D\x2D\xE9\x64\x30\x01\x08\x36"
"\x5E\xD0\x0B\x8C\x0A\xCA\x30\x11\xC7\x2C\xAE\x24\x7A\x27\x24\x68\xF1\x54\xC2\x27\x29\x5F"
"\x2E\x13\x1D\xD1\x26\x21\x32\x16\x77\x22\x98\xDE\xB2\x13\x33\x62\x11\x3F\x62\x02\x36\xC1"
"\x15\xB9\xD3\x16\xBA\x68\x1E\x5A\xB1\x3B\x6D\xE1\xD8\xAE\x8F\x36\xF3\x50\x95\xE4\x31\x36"
"\x11\xA2\x35\x05\xA4\x33\x4F\xAC\x16\x0F\x31\x35\xAA\x8E\x6A\x30\x65\x1E\x04\xC1\x5E\xD4"
"\xF3\x20\xE0\xAD\xC8\x3C\xAF\x75\x1E\x93\xCD\x72\xD3\x35\xFF\x72\x16\xBA\x44\xEB\xC8\xF3"
"\xF1\x3A\x8C\x3F\x85\x4F\x35\x14\x54\x23\x84\x0D\x2D\x41\x66\x08\xBC\x40\xEB\xA4\xC4\x8E"
"\x8E\xE6\x05\x9F\xAD\xFE\xAE\x8A\xB8\xB2\x0C\x5F\x80\x0E\xFD\x66\x92\x0A\x73\xAD\x36\x05"
"\x34\x2E\xE5\xF1\xF0\x8C\x82\x3A\x5F\x93\xD0\x3C\xA2\x09\x3D\xF1\x44\xD1\x32\x14\x6F\x50"
"\xD9\x16\x53\x63\xE4\x91\x37\x97\x69\x13\xD6\x0A\x5D\x26\xC6\x3D\x6D\xD4\x4A\xCC\x2F\x72"
"\xEA\x33\x48\x0B\x51\x3A\x29\x53\x43\xCA\xF0\x09\x19\xB3\x57\x12\x93\x0D\x03\xC8\x64\x2A"
"\x12\x3A\x9C\x31\x5E\xEC\x85\x0C\x6B\xF4\x45\x83\x32\x49\x73\x10\xD1\xE4\xF2\x44\x12\x23"
"\x4A\x35\xA2\x35\x4F\x52\x8A\xEC\xF2\x48\x61\x03\x10\xA4\xAB\x1A\xCB\xD3\xEE\xB2\x93\xEF"
"\x92\xEB\x3B\x98\x93\xDE\xDE\x71\x25\x61\xF4\xD0\x8E\xA2\x64\x82\xE3\xB6\xCE\x2F\x2B\xD9"
"\xF4\x8D\xEA\xD4\x0D\x01\xB1\x4F\x01\x40\xE7\x64\xB4\x39\x4E\x4D\x4D\xB4\x34\x28\x91\x60"
"\x9A\xCE\x0D\x7D\x06\x35\x5C\xAE\x84\x47\x2B\xE2\xC7\x12\x83\x03\x0F\xB3\x26\x41\x4E\x4D"
"\x1F\x22\x27\x4B\x91\x36\x57\xA4\x4A\x83\x23\x42\xED\xB1\x48\x41\xB4\x78\x52\xCF\x54\x7F"
"\x51\x2E\x3B\x35\x8A\xCA\x25\x29\xFD\x50\x81\xBC\xF0\xB4\x5A\x0E\x36\xB6\xCE\x3A\x17\xAD"
"\x1D\xA1\xC7\x50\x39\xE3\x41\x47\x14\x32\xC7\x74\x10\xC3\x66\x51\xA7\x09\x09\x88\x0E\x29"
"\x4A\xCF\x52\x78\x55\x43\x7D\x35\x3F\xD5\xA5\xEB\x6C\xC3\x2B\x3F\xC4\x59\x6F\xC3\x48\x43"
"\x6C\x27\x01\xEA\x43\x29\x42\xC4\xDA\xD0\x51\x3D\x33\xD7\x5C\x2A\xB2\xA8\xB5\x39\xA9\x51"
"\xEE\xB0\x70\xD4\x6E\x52\x77\xF4\x2E\x7C\xC2\x91\xC6\x6C\x2B\x80\x6C\xC3\x5E\xCE\x61\xE4"
"\x5A\xF4\x5C\x49\x82\x10\xE3\xF4\xD5\x54\xF5\xE9\xFE\x6A\x3A\xB6\x41\x7E\x2A\xC2\x0B\xE7"
"\x41\x81\xEA\x52\x55\x65\x12\x55\x1D\x53\xC2\x3E\xA6\x32\x65\xD0\x32\x41\xE2\x3F\x67\xF5"
"\x2B\x7F\x92\x28\x1A\x68\x6D\x44\xC8\x3C\x2C\x92\x46\x7B\x75\x24\x1C\x56\xF4\x8E\x4F\x37"
"\x26\xE0\xAE\x32\xF6\x78\xE6\xD4\xB9\x18\x04\x47\x05\x22\x4B\x1A\x53\x52\x57\x15\x2E\xB9"
"\xAA\x7B\x70\x87\x2C\xE7\xD0\x60\x11\x94\x4D\x39\xF5\x22\x02\xB4\x44\x47\x35\x3A\x73\x75"
"\x5C\x8D\x53\x66\x27\x6D\xC7\x38\x86\x10\x6D\xD5\xDA\x3E\xE4\x94\x02\xF4\xBE\x7C\xF5\xF7"
"\x04\xE7\x4A\xFB\xF3\x44\xEF\x15\x09\x99\x96\x44\xCB\x26\x62\x87\xA2\x30\x43\x34\x55\xB7"
"\x34\x1B\xAD\x15\x5D\x3F\x11\xE2\x80\xD0\x24\x71\x16\x3D\xB9\x75\xC5\xDE\x85\x0E\x74\xB4"
"\x31\x21\x02\x8C\xF8\x63\x89\x5A\x85\x61\x37\x70\x09\x8B\x64\x5D\x38\x36\x6C\xAD\xF6\x62"
"\x75\x72\xF8\xE6\xC4\x6D\x67\x16\x3E\xB7\x95\x60\x4B\x68\x3A\xCA\xC7\x68\xF4\x83\xF8\xDA"
"\x10\x66\xCB\x2A\x1D\x1F\xB6\x96\xDC\x12\xD9\x10\x97\x4B\x95\x36\xB8\x58\x34\x29\xC0\x16"
"\x6F\x7F\xCE\xF9\x3C\x34\x6A\x1B\xF5\x6D\x64\x75\x4D\xFF\xD0\xD0\xF4\x05\x55\x22\x65\x75"
"\x4C\x52\x21\x27\xD6\x4E\xCE\xE7\x32\x47\xB2\x11\xE7\x75\x1E\x71\x70\x68\xB3\x30\x6C\x01"
"\xC0\x12\xE3\xC4\xF8\xFE\xC1\x11\xCC\xA0\x06\x13\x57\x59\x35\xB6\xD7\x4C\x36\x21\xD8\x83"
"\x68\x96\x25\x4E\xB8\x4B\x1B\xE8\x40\x04\x01\x31\x60\x7B\xAA\x32\xEF\x31\x08\xAF\xB6\x24"
"\xC0\xF1\x39\x4F\x14\x0C\x41\xB7\x5C\x39\x71\x79\x85\xE6\x85\x9E\x96\x25\x2E\xCD\x3E\x89"
"\x87\x59\xF1\xD5\x6F\x45\xC6\x72\xDF\x36\x7A\x36\xD7\xF0\x74\xB7\x30\xF3\xB3\x4B\xDE\x0E"
"\x6C\xEE\x8D\x99\xD0\xE3\x7C\xBC\x97\x4C\x4D\x11\x25\x05\xF5\x51\xB7\x16\xB6\xBE\x8E\x21"
"\x76\x33\x5C\x37\x95\xEF\xE2\x57\xD5\xFC\x37\x24\x4E\xE1\x9D\x5A\xF5\x53\x84\x41\x81\x3C"
"\xD7\x70\xFF\x92\x75\xA1\x77\x4F\x75\xF0\x1F\x84\x41\x79\xF5\xCF\x01\xA1\x70\x7E\x73\x17"
"\x76\xC9\xD5\x75\x85\xA2\x0D\x65\x83\xD6\xF8\x17\x53\x1D\x98\x4E\xEB\xD7\x23\xBC\xD0\x4F"
"\x30\x74\x74\x46\xB6\x5D\x5F\x12\x25\xC4\x54\xDB\xA6\x37\x6A\xC2\xA7\x77\x1F\x62\xB6\x96"
"\x34\x28\xB7\xE5\x38\x57\x02\x4C\x81\x15\x73\x19\x97\x87\x51\xC2\x4B\x4F\x42\x68\x65\xF8"
"\xE4\xA8\x17\x4B\x51\x14\x6B\x57\xC3\x0F\x53\xE3\x1C\x4E\xD8\x88\x49\xB5\x87\x47\xD8\x7E"
"\x7D\x18\x28\x5A\x83\x83\x8C\x4A\x5E\xEC\xF6\xC6\x42\x16\x39\x11\x56\x2F\x69\xF7\x43\xD8"
"\x46\x2C\xAE\x80\x13\x96\xC4\x04\xA1\x82\x6A\x21\x03\x8D\x6F\xD5\x7A\x15\xC5\x26\xD8\xC3"
"\x64\x8E\xC4\x15\xE9\x80\x12\xDB\x38\x21\xC6\xD8\x16\xE8\xE0\xED\x1C\x63\x93\x28\xCA\x51"
"\xEA\x78\x86\x1B\xF7\x31\x5C\xF4\x72\x1F\xF7\x8F\x69\x82\x45\x3E\xD8\x90\x15\xB9\x40\x26"
"\xA0\x06\x93\xF5\x89\x1F\xA3\x91\xB5\x69\x8D\x12\x19\x1A\x1D\x99\x92\x17\x39\x93\x35\x79"
"\x93\x61\x22\x43\xE2\xB5\xD7\x14\xF8\x2D\x3C\x79\x61\xCF\x86\x8B\xFF\xE1\x93\x79\x96\x93"
"\x55\x79\x95\x59\x39\x35\x9B\xC9\x33\x84\xF6\x57\x77\xD8\x2F\x5B\xB9\x96\x6D\xF9\x96\x65"
"\x08\x3A\x91\xD7\x33\x0A\x70\x97\x1B\x58\x6D\xFE\x17\x97\x85\x79\x98\x55\x04\x76\xA6\xAC"
"\x33\x8C\x59\x8F\xE9\xD7\xED\x88\xB9\x99\x9D\xD9\x96\x95\x98\x32\x98\x98\x34\xA2\xF9\x94"
"\x9B\x18\x4C\x6E\x76\x89\xAF\xF9\x99\xB9\xB9\x9B\xEB\xF8\x63\x93\x44\x49\xE8\x78\x37\xC0"
"\xF9\x15\xC7\xF9\x24\xCA\x59\x9C\x2F\xD5\x9B\xD9\xB9\x9D\xDD\xF9\x9D\xE1\x39\x9E\xE5\x79"
"\x9E\xE9\xB9\x9E\xED\xF9\x9E\xF1\x39\x9F\xF5\x79\x9F\xF9\xB9\x9F\xFD\xF9\x9F\x01\x3A\xA0"
"\x05\x7A\xA0\x09\xBA\xA0\x0D\xFA\xA0\x11\x3A\xA1\x15\x7A\xA1\x19\xBA\xA1\x1D\xFA\xA1\x21"
"\x3A\xA2\x25\x7A\xA2\x29\xBA\xA2\x2D\xFA\xA2\x31\x3A\xA3\x35\x7A\xA3\x39\xBA\xA3\x3D\xFA"
"\xA3\x41\x3A\xA4\x45\x7A\xA4\x49\xBA\xA4\x4D\xFA\xA4\x51\x3A\xA5\x55\x7A\xA5\x59\xBA\xA5"
"\x5D\xFA\xA5\x61\x3A\xA6\x65\x7A\xA6\x69\xBA\xA6\x6D\xFA\xA6\x71\x3A\xA7\x75\x7A\xA7\x79"
"\xBA\xA7\x7D\xFA\xA7\x81\x3A\xA8\x85\x7A\xA8\x89\xBA\xA8\x8D\xFA\xA8\x91\x3A\xA9\x95\x7A"
"\xA9\x99\xBA\xA9\x9D\xFA\xA9\xA1\x3A\xAA\xA5\x7A\xAA\xA9\xBA\xAA\xAD\xFA\xAA\xB1\x3A\xAB"
"\xB5\x7A\xAB\xB9\xBA\xAB\xBD\xFA\xAB\xC1\x3A\xAC\xC5\x7A\xAC\xC9\xBA\xAC\xCD\xFA\xAC\xD1"
"\x3A\xAD\xD5\x7A\xAD\xD9\xBA\xAD\xDD\xFA\xAD\xE1\x3A\xAE\xE5\x7A\xAE\xE9\xBA\xAE\xED\xFA"
"\xAE\xF1\x3A\xAF\xF5\x7A\xAF\xF9\xBA\x44\xCC\xD8\x23\xE6\xA0\x92\xB7\x3A\xB0\xCB\xE2\xAF"
"\xFB\x1A\x42\x24\x63\x88\x19\x02\x35\xB2\x78\xAA\x19\x7B\x9D\x23\x43\x1B\x14\xFB\xB0\xBB"
"\xA2\xA6\xE2\x04\xB2\x11\x27\x37\x51\xB7\x7F\xCA\xA5\xB1\x17\x45\x33\x30\x1B\x71\x2C\x11"
"\x77\x17\x59\x4F\x3D\x3B\x28\x40\x65\xB3\xB3\xE2\x34\x6C\xE3\x05\x5B\xA3\xB5\xD5\xFA\xC7"
"\xB2\x17\x21\x40\xD6\x4E\xD3\x72\x8A\x97\xA2\x8A\x61\x63\xCA\x6A\xE3\x36\x72\x03\x2C\x09"
"\x28\x70\x44\xA0\x45\xB6\xA1\x61\x04\x1B\x2D\x58\x7B\x1B\x5C\xDB\x11\x60\xBB\x4D\x71\x1B"
"\x2A\x6A\x3B\x94\xB9\x42\x38\xBF\x57\xB5\x8B\x1A\x65\x53\x59\x24\x6A\xA0\xF6\x34\x98\x73"
"\x95\x54\x9C\x76\x2C\x35\x9E\x43\xAA\x4A\xAC\xD7\xB4\x61\x08\xB4\xF3\xBB\xEF\x82\xBA\xA5"
"\x38\x46\xF9\xF4\xB9\xD9\x87\xBB\x3F\xD7\x2E\xD8\x95\x5D\xC9\x1A\x6C\x4F\x9B\xDE\xBE\x38"
"\x84\xAF\xD3\x30\xA7\xA2\x6F\xE1\xFB\xB0\xBA\x56\x30\xEA\x3B\xC0\x1D\x62\x6A\xF2\xFB\x26"
"\x74\x9B\x0B\xED\x42\x14\x39\xE3\x36\xC5\x9A\x6C\x6A\x95\x8D\x79\x32\xBC\xAD\x44\x7A\x2D"
"\xA2\x85\x6D\x58\x2A\xAC\xB6\x4C\x6D\xB1\x96\x26\x7B\x2C\x1C\x7C\x81\x21\x99\x2D\x7B\x2D"
"\xC1\x69\x62\x1A\x03\x04\xC3\xD7\xA2\xD3\xBE\x97\x65\xC1\xBA\x65\xFE\x89\x0E\x4D\x54\x5C"
"\x42\xFB\x20\x4A\x18\x51\x6E\x1C\x31\xF3\xCF\xBF\x87\xB3\x96\xAC\x7B\x2B\x5C\xBC\xBD\xE7"
"\x1B\x2C\x2D\x7C\x71\xA7\x22\x62\xE2\x50\x2F\x48\xF1\x3D\x43\x1C\xA9\xE7\xE9\x40\xC5\x54"
"\xB5\xE7\x49\x0E\x76\x9C\xAF\x6E\x16\xC5\x5F\xE2\xE9\xD0\x3B\x9B\xF5\xEF\xB8\x57\x4E\x56"
"\x72\x9C\x32\xCA\x17\x30\x9A\x7C\x65\x9F\xBC\x20\xFC\x50\xCB\x67\xA2\xCA\xAF\x7C\xBA\xB3"
"\xCD\x5F\x05\x02\x10\x5E\xE3\x98\x1B\xDA\x11\xC4\xF3\x40\x8D\xF5\x6C\x2B\xF4\x64\xEB\x9C"
"\x82\x05\xEF\x35\xA6\x79\x25\xE8\x9C\xCC\xDF\x3C\x26\x76\xA4\x47\x7E\x24\xBA\x59\x7C\x53"
"\x1D\xA1\x45\x02\x09\x9B\xBE\x98\x0F\x07\x23\x44\xE4\x3C\x20\x0A\xDD\xCE\x41\xA2\xD0\x61"
"\x0D\x2B\x3C\x79\x9B\x29\xDB\x7C\x6D\x5B\x29\xCA\xE0\x9A\x87\x20\x8C\x47\xA2\x0C\x00\x7D"
"\x83\x82\x5C\x27\x46\x89\xB4\x4B\x02\x4E\x0C\x9B\x28\x36\x36\x2B\xA2\xA3\xD5\x6B\x42\xD5"
"\x43\x1D\x24\x86\xBC\x23\x36\xA9\x51\x0E\xDD\x9B\x19\xC5\xA6\x66\xFD\x2E\x80\x70\xAC\xEB"
"\x07\xCC\xCF\xE2\x79\xC5\x35\x8A\x1F\xEB\x4F\x61\x5C\xC6\x74\x17\x55\xF6\xDB\x85\x5D\xD9"
"\x72\xD5\x38\x0C\x0B\x39\xDB\x0F\x17\xDB\xFB\x0C\xCD\xA6\x29\xDC\xC5\x1D\x60\x8A\x3D\x22"
"\x6A\x7B\xCE\xAE\x5C\xF7\xAA\x46\x5A\xD2\x3C\x87\xB1\x35\x61\x61\xF4\x62\x27\x37\x4A\x82"
"\xDD\x24\xE6\xFD\xDD\x33\xC2\x04\x04\xC1\xAF\x22\x87\xD9\xD5\x51\x6D\x34\xF5\x2D\x18\xEF"
"\x64\x77\x07\xF3\xA0\x1D\xD7\x33\x58\x96\x31\x62\xCC\xC7\xD6\x57\x39\x66\xFC\xFE\x2B\xC9"
"\x20\x3E\xBA\x24\x1E\xDA\xBC\xFB\x13\x1B\xFB\xDC\x9B\x43\xD3\x2F\xCC\x14\x97\x71\x28\x06"
"\x39\x24\x3C\x77\x07\x37\x14\x46\x67\x3B\x25\x46\xBE\x79\xD9\x4C\xC3\x57\x83\xDB\x73\x42"
"\xBC\xA4\x5B\x2C\x8E\x5D\x5D\x8F\x12\xDA\x63\x1E\xD7\xB2\x96\x1E\x9D\xE7\xCA\x1F\x73\x35"
"\xF1\xAB\x8B\xC5\xD1\xC0\x43\x0D\xE8\xF5\x0B\xDF\x29\xDE\xE4\x3F\xC5\xCB\xB3\xBB\xE6\xFB"
"\x74\x32\x87\xC2\xE5\x39\x4E\x1E\x7B\x2F\x96\x29\x17\xCD\x94\x19\x8A\xA5\x1E\x6D\x2C\xDC"
"\x58\x6A\x7D\x27\x2A\x68\x3D\xB0\x75\x39\x99\xF7\x4F\xDB\x7D\xE8\xB7\xF8\xC3\x25\xC6\x4F"
"\x0B\x6F\xAC\x4A\x1E\xEF\xD8\xDE\xE0\xA7\xFD\xED\x7F\xBE\x4E\x7B\x4F\x4F\x59\x08\xB3\xDD"
"\x17\xAD\x2C\x58\x28\xBA\x7E\xEF\xEA\x34\x36\x01\x9C\xC1\x87\x27\xB0\x18\xC1\x6E\x03\xDF"
"\x39\x2D\xCD\x54\x8F\xFD\x27\x0A\x30\x98\xBF\xA2\x09\x55\x54\xE7\xA1\x9D\xCD\x5F\xFC\x5E"
"\xAB\x85\xD5\x12\x15\x3E\x13\xFF\x4A\x59\xAE\xE3\x95\xB4\xF3\xEB\x89\xF3\x8B\xB8\x21\x52"
"\x5E\xF0\xB3\x27\xEB\x1D\xB7\xAB\x8E\x29\xE0\x6F\x62\xF1\xD7\x18\xC4\x95\xBD\x00\xCD\x43"
"\xB1\xDB\xB2\x2C\x8B\x5C\xF2\x6F\x54\xD9\x57\xD6\x76\xB0\x33\x28\x2E\x0D\xE1\xAF\x42\xE7"
"\x6A\x76\xEE\xA1\xFD\xE4\xC7\xC7\x53\xD1\xDE\x6B\x6A\x25\x7B\x07\x99\x50\x1F\xB0\xB3\x9C"
"\x5F\x6C\x0B\x39\xFA\x3D\x08\x46\xD1\xC9\xF3\x3F\x71\xB2\xA1\xE8\x4A\xD8\x5D\xF7\x5D\xA2"
"\xF7\xE1\xFD\x44\xE5\x5D\x82\x2D\xF6\x52\x01\x10\x00\x4C\xE0\xFE\xDA\xC4\x0B\x21\xEE\xDE"
"\x85\xDE\xEC\xCB\xBF\x49\x85\xA2\x56\xCC\x21\xA1\x0A\x39\x3B\xAF\x20\x15\x38\x21\x47\xDE"
"\x44\xFF\x61\xFD\xE9\xCD\xFD\x0B\x18\x70\xDE\x10\x00\x06\x67\x09\x14\xE8\x6C\x82\xC1\x86"
"\x0E\x1F\x42\x8C\x68\x50\x07\xC5\x8A\x14\x11\x26\xFC\x17\xCC\xA2\x45\x86\x12\x3F\x82\x04"
"\x29\x02\x60\x42\x46\x21\x4F\x46\x1C\x32\x2F\xA1\x39\x11\x06\x55\x26\x9C\x85\x72\xA6\xC3"
"\x91\x19\xFF\x99\x7C\x08\x93\xA5\x4B\x9A\x1F\x6D\x66\xCC\xE9\x70\xA7\xC0\x96\x3E\x7F\x92"
"\x2C\x09\x91\x68\x40\xA3\x47\x23\x4E\x70\x76\x73\xEA\xCD\x85\x4F\x25\x32\x15\xA8\xAD\x86"
"\xC1\x1A\x52\x6F\x7A\xB9\x2A\x91\x11\xD5\x7F\x61\x5F\xAE\x8C\x29\x76\x2D\x5B\x94\x18\xD5"
"\xB6\x7D\xCA\x51\xC7\xA6\xAA\x73\x3D\xC6\x9D\xC8\xB1\x6E\x46\x67\x77\xF3\x4A\x49\x9B\xD0"
"\x99\x60\x81\xF3\x6C\x15\x0E\x78\x36\xEE\x5C\xBE\x83\xFF\xE6\x8D\x5A\x36\xA0\x4C\xA0\x09"
"\x17\xE7\xCD\xEC\x93\x6C\x49\xCE\x02\x65\x6A\x36\xE8\xF9\x9F\x55\x40\x85\x4D\x4E\x38\x95"
"\xF1\x54\x5B\x2F\x37\x41\x83\x7C\xDB\xB4\x27\x5B\xD7\x19\x9D\x8E\x0E\x68\x35\xB4\x44\xC9"
"\x41\x79\x3F\xCD\xBD\x3B\xB4\x6D\x85\x1E\x8B\x07\x14\x1A\x3A\x2B\x41\x88\xC8\x75\xE3\x65"
"\xCB\xBC\xE0\xC3\xE7\xA4\xA3\xAF\x9D\xEE\xBC\x2A\x76\xE0\x0D\xBD\x24\x1E\xDE\xD6\x77\xC6"
"\x59\xD1\x2D\x7F\xD6\x2C\xFB\xB7\x41\xEB\xCA\xE3\xA2\x57\xFC\x90\xBC\x40\xCC\x62\xE3\x9B"
"\x85\x98\x3B\xE0\x56\xEF\x00\xD6\xFF\x03\x9B\x7F\x10\x01\x28\x20\x6F\xD6\x4D\x76\xD3\x29"
"\xDD\x65\x56\xE0\x80\x08\xFE\xA6\xDD\x80\x13\x02\x80\x1E\x41\xC2\x31\xC8\x96\x6C\xCE\x98"
"\xF0\x15\x4B\x5E\x4D\x65\xDF\x51\xEE\x85\x44\x5F\x80\x79\xED\x67\xD5\x7E\xDA\xD0\x46\x21"
"\x7E\x22\x52\xA8\x53\x62\x30\xC6\xF5\x1C\x68\xF1\xD1\xD8\xDA\x4D\x4E\x39\xB4\x9F\x81\x6B"
"\x59\xC7\x63\x43\x3E\x66\x16\x64\x8B\xA2\xBD\x16\x63\x7B\xE1\x65\x78\x15\x82\xE2\x1D\xC4"
"\x5D\x64\x1E\x26\x19\x65\x46\x39\x3A\x79\x53\x73\x35\x25\x35\x10\x75\xD2\x25\xB6\xE5\x90"
"\x53\x41\xA9\x19\x7E\xEF\xB9\xD8\x65\x72\x13\xEE\x97\xA0\x40\x68\x9A\xA9\x26\x4E\x03\x02"
"\x98\x51\x73\x46\x2A\xE9\x1F\x86\x18\x86\x86\x9E\x33\xC1\xB8\xC9\x9E\x58\xFB\x61\x09\x40"
"\x56\x85\xCE\xE4\x20\x9E\x79\x4A\x98\x27\x81\x7D\x35\x59\x1B\xA4\x35\x68\x73\xDB\x91\x99"
"\xA5\xD8\x1D\x80\x70\x5E\x95\xE9\xA3\x82\xB6\xE5\xE9\x43\x9B\x2A\x99\x55\x99\x1A\x6A\xF9"
"\x65\x8F\x3B\x5E\x7A\x15\x53\xE7\x08\x66\x95\x89\x62\xA2\x28\xA5\x43\x8B\x4A\x6A\xA9\x43"
"\xAA\xD9\xEA\x5D\xA3\xA5\x86\xA9\xAA\x77\x75\x4E\x46\x2B\x70\xBF\x86\x66\x22\xAB\x00\x88"
"\xEA\x68\x9C\x57\x32\xAB\xAB\x66\x59\x05\x5A\x1E\x5B\x84\x76\x95\x8A\x2D\xDB\x3A\x72\x9C"
"\xB4\x6C\x29\xEB\x45\x56\xE6\x70\xE5\x28\xAE\xCE\xA2\x95\x90\xB1\xD3\x16\x66\x0E\x1D\x89"
"\xE5\x37\x6C\x95\x0E\x85\xDB\xE0\xBC\x0D\xD5\x9B\x97\x83\xF3\x51\x29\x5F\x9A\xDF\xE6\x45"
"\xED\xA9\xFB\xAD\x9B\x65\x42\xC1\x78\x68\x54\x7C\x42\xC6\xB5\xEF\xAA\xD6\xC6\x25\xEA\x04"
"\x75\x9E\xAA\xD9\xB9\x31\x5E\xCC\x1B\x7E\xE7\x6C\x5B\xA9\x9D\x88\xEA\x08\x70\x9F\x72\x42"
"\xAA\xEC\x8F\xE8\x5E\xAB\xEB\x73\x0C\x87\x5C\x2D\x55\x27\xD3\x94\xDB\x96\xA3\xED\xB6\x1E"
"\xCC\x47\xC5\x37\x0F\x1D\x6A\x16\x3C\xA1\xC3\x28\x9B\x78\x33\x7C\x24\x43\x0C\xDC\x99\x4B"
"\x25\xC6\xF2\x55\x47\xCB\x28\xF2\x7D\x72\xA2\x39\x6E\xAB\xC9\xF6\xDB\x33\x90\x21\x4A\x64"
"\x9D\xD5\x9B\x95\xF7\x56\x73\x59\x09\xFD\x94\xB2\x68\x92\xDA\xF0\x4D\x39\x29\x1B\x60\xA4"
"\xB5\x42\xEA\x6C\xB3\xF2\x66\x24\xC7\xC3\x4A\xB1\xD9\x2B\x6F\xD4\x5A\xFB\x22\xCA\x99\xC5"
"\x97\xD3\x73\x5B\x07\x37\xD5\x3C\xE7\x4C\x45\xF8\xD9\xA8\xF2\x04\x00\x7D\x56\xE1\x98\x97"
"\xD6\x86\x5F\x86\xEE\xD8\x7B\xB7\xE7\xB4\x66\x69\xC7\xB4\x76\x76\xC1\x6E\xD7\x76\x5C\xC8"
"\x02\x60\x5D\xC5\x47\x81\x2E\xBA\xE6\x6D\x95\x1D\x1A\x80\x4A\x47\x6B\xA7\xB0\x62\xAD\xC7"
"\xC8\x68\x61\x65\xC5\xE9\xD3\xAE\xF3\x8B\x7B\x5B\x7A\xA7\xCD\x1A\x85\x26\x3B\x0B\xFC\x80"
"\xB5\x3F\x14\x5F\xD8\xE3\xF5\x7B\xA2\x7F\x78\x2B\x05\x3A\xE5\x81\xAB\x4B\x9D\x75\x20\xD3"
"\x04\x20\x6B\x8D\x63\xBB\xD6\x7A\x46\x31\x65\x15\x53\xAC\x1F\xD5\xE6\x54\xC7\x6B\x2C\x27"
"\xF5\x46\xAB\x69\x3B\xA6\x93\x09\x35\xC4\xB6\xEF\xA7\x32\x35\x4D\x19\x13\xE9\xF8\xB2\x0F"
"\xD5\x5F\xE3\xFD\x73\xA7\x37\xA1\xE9\xBC\x29\xAB\x62\x04\x7B\xDD\x53\xFA\x86\x1C\x99\x4C"
"\x8F\x38\xFB\x33\xC8\xC2\xE4\x47\x93\xE9\x88\xC0\x63\xA0\x1A\x90\xDE\x1C\x55\x41\x3D\x89"
"\x2C\x68\x13\xBA\xE0\xB1\xE0\x15\xBD\xD0\x2D\xF0\x79\x05\x54\x13\x6C\x12\xC8\x37\x35\x79"
"\xEF\x34\x56\x2A\x8A\x03\x4F\xB2\x1E\xAB\xBC\x90\x21\xB9\x21\x9F\x5B\xAA\x05\x3E\x5F\x71"
"\x6E\x6F\x7C\x1A\x9E\x04\x33\xA2\x8D\x32\x38\xC4\x66\x11\xB3\xDB\x0A\xDF\xB4\x3E\xCF\x05"
"\xF1\x70\x6C\x1B\x8C\xA6\x94\xE8\x9F\x9C\x11\x70\x77\x50\xFB\xC8\xEA\x5A\x88\x92\x43\x11"
"\x65\x21\x32\x8B\xE2\xA0\x88\x68\x1D\x1A\x86\x24\x48\x57\x20\x99\xFA\x96\x93\x43\x46\x9D"
"\x11\x38\x1A\xCC\x1D\x5C\x96\x97\xC6\xF2\x4D\xC6\x28\x6F\x13\x61\xF8\xC0\xF2\x1D\x27\x7E"
"\x2E\x31\xA0\x79\x4E\x58\x4C\x34\xBA\x93\x68\x30\x3E\x0B\x31\xD1\xF9\x40\x82\x39\xAC\x99"
"\x2B\x84\x68\x84\xD6\x80\xC4\xA7\x91\xE8\x30\x05\x70\x35\x2C\x1A\xBE\x92\x57\xC8\xD8\xDC"
"\xCB\x20\xF9\x32\x1B\x25\x35\x69\xC9\xBA\x4D\x30\x33\xD4\xE2\x54\x00\x4F\x17\x46\xD7\x59"
"\x46\x8B\x96\xD3\x1E\x1E\x91\x14\xCA\x4E\x69\xC9\x83\x72\xCB\x53\xC6\xFC\xA7\xC8\x67\xD1"
"\x8D\x4B\xAF\xB4\xD8\x2D\x33\x73\xC8\xEB\xFC\x27\x93\x74\xA4\x89\x20\xF1\x42\xA2\x22\x29"
"\x71\x34\xCD\x31\x1E\xB8\xFA\x85\xC0\x81\x18\x6E\x21\xE8\xB9\x21\x31\x89\x46\x26\x53\xEA"
"\x8B\x88\x79\x12\x22\x9D\x8A\xA5\x2A\x6E\xB2\x85\x69\x43\x49\x9A\x15\x51\x22\xCE\x86\x48"
"\x2D\x2F\xE7\x4C\x57\xE2\xDC\xB8\xCA\x96\x45\x2E\x22\xF8\x01\x23\x48\xB6\x48\x9E\x96\x80"
"\x73\x4A\x76\x1C\xD5\x3E\x51\x57\x2D\x40\xB8\x4D\x9B\xA0\x64\x22\x05\x49\xA8\x1F\xDD\x61"
"\x10\x89\xDE\x81\x10\x65\x2A\x34\xC5\x61\x42\x2F\x21\xB5\x30\x03\x45\xCD\xE0\x08\x61\xAE"
"\x65\x8B\x45\x34\xCA\x31\xC5\x62\x22\x46\xF8\x46\x1B\x1E\x5B\x88\x8D\x90\xE9\x32\x49\xFA"
"\x32\x79\x65\xF4\xCF\xDF\xB8\x38\xC4\x04\xED\x26\x92\x2E\x9D\x49\xE9\x04\xFA\x94\x9A\x2A"
"\x74\x73\x08\xBD\x63\x4E\x55\xD7\x4A\x5E\xEE\x74\x9C\x3F\xBD\xCA\xF6\x5C\xE2\x35\x2B\xF4"
"\x6B\xA5\x3E\x41\x96\x89\xA8\x69\x4E\x6B\x76\x72\x42\x93\x73\xD4\x54\x9F\xA8\x26\x21\x81"
"\x4D\xAA\x2A\x8D\x11\xB1\xE6\xE4\x3C\x88\x8A\x04\xAA\x2F\x53\x8F\xAE\xD0\x03\x1A\x8D\xAE"
"\x05\x47\x3B\x49\xC5\x57\x16\xB2\x9E\x4B\x7E\xC4\x91\xC2\x80\x97\x52\xD5\x69\x3E\xA0\x25"
"\xF5\x41\xD5\x82\x61\x54\x5D\x45\xCE\x83\xF6\xD5\xAF\x4E\xCB\x5F\x5B\xD2\x89\x3F\x8C\x8A"
"\xF2\x8D\x40\xFD\x60\x44\x06\x38\xB4\xB6\x8D\x46\x0E\xFD\x82\x2B\x48\x2E\x56\xCC\x3C\x56"
"\x0B\xA5\x76\xED\xA7\x92\x38\x08\xB7\xC1\x70\xC5\x04\x8E\x50\xEC\xC8\x38\xEB\x9F\xB4\xDD"
"\xA9\x97\x60\x1D\x8B\xCB\x08\x1A\x17\x3F\x32\x84\x29\x39\x29\x6A\x38\xD5\xE4\x05\xCF\x00"
"\x82\x24\x1C\xA2\x92\x53\x13\x45\x15\x90\x26\xEF\x8F\xEC\x0A\xAA\x92\x72\xD3\xDB\xAB\x04"
"\xD0\x31\x83\x91\x03\x71\x0D\xE6\xDA\x4A\x0E\xD5\xB9\xC6\x61\x63\x2E\xE1\x09\x1D\xEA\x1A"
"\x31\xA1\x6D\x04\x8E\xD6\x08\xA8\xAC\xE3\x82\x24\xAB\x20\x14\x48\x2A\xBA\xA4\xD9\x99\x10"
"\xB6\x72\x81\x1D\x51\x6B\xE9\x09\xA6\xE6\x0E\x8F\xB4\xA1\x71\xE4\x6F\x29\xF4\x55\x00\xF2"
"\x2A\x71\x73\x5C\x2D\x52\x5A\xCB\xC2\x80\xE9\x51\xBD\xF5\x51\x5C\xBF\x84\x1B\x12\x0B\x21"
"\xB5\x29\x65\x48\x8B\x33\xAC\x50\x18\xF7\x7E\x24\x6D\x67\x45\x24\x85\x6A\xB9\x41\xDB\xC6"
"\xD7\x52\xBF\xCC\xAE\xFE\x72\x0A\x45\x93\x3E\x97\x81\x3C\x9B\xE9\xFC\x88\xF8\x61\xEF\x78"
"\xD6\x8C\xA6\x15\x70\x75\xAF\xC6\x9E\x54\x76\x09\xBC\x93\x6C\x71\xEB\xE2\x19\xAA\xD6\xCA"
"\xD8\xC5\xED\xA4\xA5\x6A\xF3\x42\x29\xFF\x52\xD6\x27\x16\xF6\x8E\x68\x63\xC5\x90\x9F\xF1"
"\xB7\x9E\xFE\xFD\x6F\x87\xE9\xA6\xCC\x82\x88\x57\xA7\x45\x59\x30\x65\x76\x32\x0B\x3E\x9E"
"\x70\x5E\xD4\x82\x30\x51\x6D\xDA\xCD\x10\x1F\xA8\x4A\xF8\xE9\xA9\x58\x2E\xB6\xDF\x32\x87"
"\xF0\xCC\xD2\x9D\xCD\x61\xC9\x6C\xBF\x77\x3E\x36\x94\xF8\x39\xAF\x92\x19\x79\x48\x2E\x47"
"\xF8\x93\xF4\xAA\x1A\x89\x67\xAC\x20\xE5\xAE\x89\xAB\x5E\xFE\xEC\x74\xDD\xE9\x5F\x3A\x3F"
"\x05\x40\x06\xF6\x0E\x45\x18\xB2\xCE\x24\xCB\x53\xAC\x65\x41\x34\x6B\xA1\xB5\x38\x86\x98"
"\x50\xCA\x4D\x49\x45\x7D\x8A\x33\x0B\xD9\xE4\xF8\x23\xB8\xFA\x6E\x39\x9B\x19\xDD\x0C\x1B"
"\xA6\xCF\x3A\xEE\x5F\xE8\x3C\xE8\xA5\xE1\x32\x56\xC4\xA7\xBE\x69\x1A\x1F\xAD\xE9\x57\x37"
"\xC4\xD6\xF6\x5A\xAF\x3E\x15\x3A\xB1\xF1\xED\x3A\xD5\x0D\xE9\x6A\x5D\x69\x0A\x2F\xCC\x90"
"\x3A\xCE\x87\x33\xEC\x80\xAA\xAA\x24\x67\xF3\x46\x0E\xAE\x76\x53\xA8\x67\x02\xED\xBD\xDD"
"\x17\xD2\x45\x6C\x0A\x12\xE6\x82\x84\x11\x67\xF3\x83\x66\x75\xA5\xB0\xDF\xAB\x15\x8F\xB5"
"\xA4\x38\xCE\xE8\x12\x9E\x1B\x6B\xB7\x3A\x05\xB9\x9A\x2B\xD6\x2A\xAF\xDF\xBC\x63\x86\xCE"
"\x43\x0E\xD8\x0C\x89\xC0\x3C\x02\x22\xF8\x0A\xD6\x73\xFF\x8E\x35\x66\x05\x9E\x3C\x4A\xCF"
"\x44\xD7\x64\xBD\xC9\x26\xFC\xDD\x43\x26\x4B\xF1\x5B\x8E\x8C\x77\x44\x10\x04\x9B\x81\x83"
"\x39\xE0\xEA\x9A\x65\x30\x77\xB9\x16\x13\x70\xE4\xDB\x37\x01\xC4\x5C\x42\x03\x72\x8B\x88"
"\x3C\x23\x24\xE7\x48\x91\xC2\x24\x88\x5A\x14\xC6\x19\x8E\x00\xC4\xA0\x69\x72\xF2\x8A\xA4"
"\x3C\x21\x2B\xB7\x08\xCA\x86\xAC\xED\x51\x46\x7A\xDE\x47\x81\xAD\xA1\x54\xD8\x71\x88\xA3"
"\x79\xAC\x0C\xA5\x38\x3F\x3B\x69\x71\xFB\xCA\x97\xA5\x70\xB6\x77\xE6\x0C\x62\x85\x87\x57"
"\x05\x88\xC8\xA3\xCA\x39\x20\x57\xEF\xA1\x27\x2F\x20\x5D\x1F\xEB\xE5\xC2\xFE\x8F\xB1\x03"
"\x5B\xEA\x00\x4F\x2C\x55\xB6\x31\x6D\xA6\xA3\x93\x49\x3C\x4D\xD5\x7C\xB9\x6E\x0B\xB3\x07"
"\xC4\x11\x57\xD8\x77\xE7\x08\xFE\xBF\x2C\x2F\xB9\xDA\x41\x0F\x7C\xA9\x4F\x32\x9A\xFE\x50"
"\x71\xE3\x9B\x25\x3C\xBA\xD4\xAC\xED\xA3\x97\xBB\x78\x77\x2D\x6C\x80\xC7\x3B\xE0\xCB\xE6"
"\x0A\x6B\x10\x12\x3C\x44\x36\x29\xEB\xB5\x37\x19\xE9\xFF\xA2\x31\xFA\x96\x8C\xD8\x3A\xE2"
"\xB8\xF0\xE8\xF5\x2F\xE7\x2B\xED\xB2\xD6\x87\x44\xD1\x7C\x17\x1B\xDE\xCB\xD2\xEE\xBE\xB3"
"\xDA\xA1\x53\x81\x7D\xD3\x4D\xFF\x8F\xD6\xBF\xCD\xF3\x94\x37\xFD\xA2\xAF\x38\xED\xC9\x14"
"\x1F\x25\x9C\x11\x6E\x48\xCB\x55\x70\xFF\x26\x3F\xD8\xB9\x7F\xBC\x50\x03\xAB\xF0\x12\xB3"
"\x07\xD4\x2E\x89\xF2\xAA\xF5\x4B\xF6\xC5\x47\x7E\xD8\x53\x29\x36\x2C\xDD\xEC\x9D\x1D\x52"
"\xA8\xAB\x99\x55\xF5\x81\x25\x6D\x63\x5C\x56\x0B\xEE\x10\x19\x73\x59\xE4\x2F\x91\x79\x02"
"\xAB\xBD\x75\x67\xA4\x27\xD3\x0E\xF8\x04\x89\xD4\xEE\xA9\xDE\xA7\xD0\x98\xE3\xA1\xDE\x92"
"\xDD\x5E\x9B\x21\x20\x6F\x30\x82\x30\x9C\x8E\x4A\x44\x5F\x48\xD0\xD7\x64\x24\x20\xED\xCD"
"\x1A\xA4\xC1\xDB\xFD\xC9\x49\x05\x62\xCB\xA5\x59\xDE\x80\xDD\x58\xDA\x89\x8F\xFD\x7D\x20"
"\x9B\x55\xC7\x35\x9D\x56\xF2\x54\xA0\xBC\xBD\xDF\x85\xF9\x5E\x43\x81\x98\x9B\x90\x9F\x90"
"\xB9\xCC\x0C\x62\x5F\xA0\xD8\xE0\x52\x1D\x1B\x8F\x55\x4B\x0E\x62\x12\xC1\x41\x1E\x87\x01"
"\x98\x9B\x10\x44\x9D\x70\x5E\x8A\xA5\x18\xEC\xF8\x9E\x0F\x46\x84\xFA\xB1\x8F\x08\x99\xC0"
"\xEC\xFD\xE0\x92\x31\xA1\x58\x50\x0B\x09\xC6\x48\xBF\x69\xE0\xE9\x55\x0F\xEE\x8C\x5B\x8D"
"\xE1\x5A\xCA\x20\x52\x9B\xF0\xDE\x98\xF4\xD4\x9C\xB1\x1F\xCE\x4C\x9E\x92\xE4\x53\x8C\xFC"
"\x18\x00\xD6\x40\x19\xF4\x10\xC2\xC5\x15\x11\x72\xDC\xF9\xD9\xE1\x40\x4D\xDA\x1D\xE2\x21"
"\xE8\x85\x86\xB4\x01\xA0\xD6\xC1\x9F\x09\x9A\x21\xFF\x51\x1D\x55\x7C\x0D\xBC\x44\x60\xF5"
"\x85\x9F\xF8\x99\x1F\x4D\x6C\x18\x22\xA6\xA1\x21\xD5\xDE\xA4\x4D\x22\xF5\x11\x98\xE9\xD1"
"\x61\xF7\xFD\xDE\x00\x8A\x50\x9D\xD8\x4E\x29\x99\x5A\xE2\xC8\xD6\xB6\xF1\x1E\x19\xF6\x44"
"\x9D\xAC\xA0\x23\x6E\x57\x12\x71\xA1\xB9\x35\x22\xAA\x85\x61\x9E\xA4\x86\xAB\xD5\x82\xF3"
"\x01\x80\x1C\xC2\x60\x68\xBC\xA1\x96\x74\x8B\x1B\x62\xDD\x40\xFC\x22\x85\xF4\xA2\x9D\x0C"
"\xA3\xCF\xD4\x1C\x6F\x98\x40\x7E\x65\xC4\x39\xF0\x21\xDB\x81\x59\xB6\x45\x94\x40\x6C\x83"
"\x44\x39\x1F\x20\x66\xDC\x0D\x8A\x1E\x3B\xC5\xE2\x08\x99\x5E\x19\xEA\x1E\xE3\x61\xA2\x4F"
"\xD0\x5F\x82\x80\x63\xCC\x24\xE3\x38\xAA\xE3\x3A\xB2\x23\x3B\xAE\xD1\xDE\x20\x01\x1D\x68"
"\x8B\x23\x98\x81\x09\x44\x58\x19\xE0\x62\xB2\x5C\x81\x20\x6C\x0B\x1D\x5C\x81\x3D\x06\xCF"
"\x3E\xF6\xE3\x3F\x4A\x8E\x40\xDA\x82\x3F\x02\x64\x3B\x66\x46\x3C\x0E\xA4\x14\x2A\x64\x10"
"\x12\xC4\x04\x20\x01\x12\x74\xC7\x04\x5C\x81\xB6\x08\x02\x12\x3C\xE4\x46\x72\x64\x47\x1E"
"\x05\x92\x79\x64\x48\x8A\xE4\x48\x72\xD7\xD4\x91\xE4\x49\xA2\x64\x4A\x9E\x64\x03\xA9\x64"
"\x4B\xBA\xA4\x42\x5E\xDB\x4B\xCA\xE4\x4C\x72\x64\xDF\xD0\xE4\x4D\xE2\x64\x4E\x8A\x90\xA9"
"\x38\xA4\x4E\xFA\xE4\x4F\x1A\x9B\xD0\x01\xE5\x50\x12\x25\x85\xA0\x5F\x51\x22\x65\x52\x2A"
"\xE5\xDC\x4D\xDF\x52\x3A\xE5\x53\xD6\xC0\xFB\xC0\x8F\x27\x3E\x65\x55\x3A\xE5\xA1\x58\x65"
"\x56\x6A\xA5\x4B\xEE\x47\x15\x6E\xE5\x57\x82\x65\x58\x8A\xA5\x48\xB6\xE1\x58\x9A\xE5\x59"
"\x82\x95\xF0\xA1\xE5\x5A\xB2\x65\x5B\xBA\x25\x1D\xB5\xD4\x5B\xCA\xE5\x5C\xA2\x18\xB8\xD1"
"\xE5\x5D\xE2\x65\x5E\xEA\x65\x48\x5C\x41\x45\x51\xD4\x15\xEC\x65\x60\x0A\x26\x56\xFC\xD5"
"\x60\x1A\xE6\x61\x22\x66\x62\x2A\xE6\x62\x2E\xA5\xCF\x31\xE6\x63\x42\x66\x64\x4A\xE6\x64"
"\x52\x26\x55\xCD\x45\x42\x56\x66\x66\x6A\xE6\x66\x72\x66\x67\x7A\xE6\x67\x82\x66\x68\x8A"
"\xE6\x68\x92\x66\x69\x9A\xE6\x69\xA2\x66\x6A\xAA\xE6\x6A\xB2\x66\x6B\xBA\xE6\x6B\xC2\x66"
"\x6C\xCA\xE6\x6C\xD2\x66\x6D\xDA\xE6\x6D\xE2\x66\x6E\xEA\xE6\x6E\xF2\x66\x6F\xFA\xE6\x6F"
"\x02\x67\x70\x0A\xE7\x70\x12\x67\x71\x1A\xE7\x71\x22\x67\x72\x2A\xE7\x72\x32\x67\x73\x3A"
"\xE7\x73\x42\x67\x74\x4A\xE7\x74\x52\x67\x75\x5A\xE7\x75\x62\x67\x76\x6A\xE7\x76\x72\x67"
"\x77\x7A\xE7\x77\x82\x67\x78\x8A\xE7\x78\x92\x67\x79\x9A\xE7\x79\xA2\x67\x7A\xAA\xE7\x7A"
"\xB2\x67\x7B\xBA\xE7\x7B\xC2\x67\x7C\xCA\xE7\x7C\xD2\x67\x7D\xDA\xE7\x7D\xE2\x67\x7E\xEA"
"\xE7\x7E\xF2\x67\x7F\xFA\xE7\x7F\x02\x68\x80\x0A\xE8\x80\x12\x68\x81\x1A\xE8\x81\x22\x68"
"\x82\x2A\xE8\x82\x32\x68\x83\x3A\xE8\x83\x42\x68\x84\x4A\xE8\x84\x52\x68\x85\x5A\xE8\x85"
"\x62\x68\x86\x6A\xE8\x86\x72\x68\x87\x7A\xE8\x87\x82\x68\x88\x8A\xE8\x88\x92\x68\x89\x9A"
"\xE8\x89\xA2\x68\x8A\xAA\xE8\x8A\xB2\x68\x8B\xBA\xE8\x8B\xC2\x68\x8C\xCA\xE8\x8C\xD2\x68"
"\x8D\xDA\xE8\x8D\xE2\x68\x8E\xEA\xE8\x8E\xF2\x68\x8F\xFA\xE8\x8F\x02\x69\x90\x0A\xE9\x90"
"\x12\x69\x91\x1A\xE9\x56\xCE\x01\x55\x4E\x08\x66\xD2\xE2\x44\x32\xE9\x91\x42\xE9\x88\xAA"
"\xC6\x22\xFA\x07\xA5\x9C\xE3\x49\x14\xE3\x3C\x00\x54\x89\xD6\x80\x5F\xFA\x65\x4F\x3E\x68"
"\x97\x7A\x29\x45\x81\xE9\x8F\xFE\xDA\x75\x89\x50\x6A\x08\xA1\x2D\xF9\x5F\x88\x32\xD4\x2A"
"\x26\xE8\x9B\xE2\x64\x6A\x6C\xC3\x36\xF0\xE1\x04\x38\x42\x9D\x3E\xA3\x7A\x12\x1D\xE5\xE8"
"\x62\x37\xDE\x4D\x5A\xCC\x83\x23\x8C\xD6\x2C\x7A\x28\x78\x58\xA2\x9B\x4E\xDB\x26\xBA\x23"
"\x95\x2C\x06\x7D\x78\xE5\x75\xA6\x0D\x95\xB6\x45\x0D\xD4\x42\x9B\xFA\xC7\x5B\x9C\x85\x67"
"\x60\x61\x81\x32\x4F\xA1\x75\xE8\xA7\xA2\xE9\x4B\xEE\xD0\x51\xAA\xA7\xF8\x50\x2A\x72\x15"
"\x2A\x55\x74\x2A\x1B\xE1\x06\x08\x7A\x28\x73\x54\xA3\x21\x6A\xA8\xAC\x0A\xE5\x48\xF6\x29"
"\x6D\xB9\x27\x36\x3E\xA2\x99\x04\xE3\x40\x2C\x08\xBD\xFD\x43\x73\xD4\x00\x49\x5C\x69\x3B"
"\x62\xE3\xA0\x96\xA9\x69\x66\x45\x7F\x18\x97\x92\xCE\x84\x0E\x10\xA4\x72\x9A\xC0\x15\xE8"
"\x00\xBA\x34\x2B\x57\x3C\xEB\x4B\x7E\x54\xFF\xB5\x22\x7B\x16\xE3\x67\x2C\xAB\xF2\x09\xCE"
"\x31\x22\x23\x35\x92\x1E\x4D\x8A\xA2\x6E\xD2\x87\x96\x3A\x04\xAF\xCE\x89\x1A\x31\x63\xBE"
"\xE5\x9A\x33\xD4\xA9\x2D\x98\x2B\x6E\xE2\xA9\x60\xD0\xAB\x26\x09\xC3\xBD\xE6\xEB\xD6\x19"
"\xC6\x96\x1A\x04\xBC\x46\x2A\xF5\x69\x5F\x21\x76\xA2\x7C\xAA\x69\x36\x7A\x47\xBB\xEA\x9B"
"\x05\x05\xA3\xEF\xFC\xE4\x08\xF2\xE6\x04\xF0\x85\x33\xE4\x63\xAB\xFD\xC3\x0F\xA1\x58\x30"
"\x36\xDC\x07\xC2\x69\x68\xF6\x0E\xA6\x7D\xEB\x6B\x65\xEC\xC6\x22\xAA\xC7\xCA\x64\xC3\xD6"
"\x02\x76\x98\x46\xC7\x6E\xAC\x6F\x56\xEB\x5F\x52\x4E\xCC\xFE\x43\xB0\x3A\x0A\x4C\x38\xE3"
"\xDE\x4C\x80\x1C\xCC\xEA\x3C\xDC\xE2\x50\xD2\xDF\xC1\x96\x66\x19\xEC\xE9\x4B\x04\x6C\xAF"
"\x09\x8E\xD7\xC5\x8B\x6E\xAA\x9F\xD3\x1A\x2D\x44\x20\xED\x47\x0C\xC1\xD2\x76\xE8\xBE\x2A"
"\xC8\xB8\x92\xCE\x3C\x4C\xAD\x4F\x94\x81\x20\x52\x26\xF3\x7C\xED\x73\x32\x94\x00\xEE\xA6"
"\xA8\xFA\xA1\x6D\x36\xDA\x64\x86\x6B\x42\xB0\xC8\x7C\x32\x8F\xFD\x81\x64\x12\x6A\x5C\x6B"
"\xA5\xAA\x44\x38\x21\xDD\x15\x14\xDA\x66\x6A\x6B\x4D\x2D\xFE\x35\x8D\xC7\xB1\x57\x50\xB1"
"\xA4\x4A\xEE\xED\xC9\xDE\x9A\xCB\xE4\x6D\x92\xD5\xED\x1A\x26\x4B\x19\x24\x0F\xCB\x12\xDA"
"\x2E\xE6\x1A\xE4\xA6\xA4\xDA\x8E\xEC\x16\xF6\xD8\x20\x6E\x63\x5D\xFA\xAD\x4F\x4E\xEA\xB8"
"\x5E\x5B\x77\xC5\xA0\xFE\x51\x0D\xEB\x41\x2B\xB9\x0A\xCE\x25\x26\x5C\x52\xCC\x43\x19\xD0"
"\x05\x55\x34\x2E\x23\x82\xEA\xB6\xF9\xCB\x4B\xD1\x2A\xF7\x9D\x24\x7D\xC8\x81\x0E\xAC\xAA"
"\x49\xD2\xA0\xE9\x6D\xAE\x08\x3D\x1A\xB3\x65\x86\xA5\x02\xA0\xEB\xB6\xDF\x4F\x21\x2F\x4A"
"\x0A\x92\x2D\x78\x1D\xA3\xB2\x2E\xDF\x1A\xA5\x24\x16\x17\xF6\x02\xE5\x10\x3C\x5C\xDC\x0E"
"\x21\xAD\x82\xE1\xA8\xFA\x93\xE9\x95\x6D\x39\x7E\x1F\xE8\xB6\xAE\xA1\x29\x0F\xC7\x4A\x14"
"\xD7\xB2\xD8\xED\x52\x0B\xF5\xB2\x62\x8B\x75\x14\x4A\x66\x91\x47\x70\xAF\x0F\xAD\x6E\x13"
"\x2E\xA1\xFD\x2A\xD6\xDF\x65\x06\xCE\x0A\xC4\x39\xD4\x69\x62\x24\xED\xE2\xAE\x0B\x00\xA7"
"\x64\x6E\x9C\x05\x7A\xB4\xAA\x2E\xA5\xEF\xE8\x59\x6F\xDF\x46\x30\x50\x4E\x80\xE4\x6E\x83"
"\x30\x88\x6D\xE8\x11\xE2\xFC\x5A\xEE\x28\x2E\x59\xA7\xAA\xED\x05\x86\x20\xAB\x52\x08\xC8"
"\x45\x07\x9E\x6E\x0B\x27\xCC\x6C\x09\x87\x98\x11\xEE\xAF\xB7\x2A\x14\x80\x3C\x70\x5A\xEA"
"\x40\x0A\x97\xC1\x0A\xB7\x30\x08\x03\x19\x4A\xD2\xCF\x2B\xFA\x04\x7D\x0C\xAD\x43\x2C\x63"
"\x0B\x5A\xD7\xC2\x2A\x60\x53\x92\x24\x7A\x28\x87\x6C\x94\x6D\x12\xDF\xEA\x11\x99\xF0\xF5"
"\xD6\x5F\x60\xCE\x51\x4C\x2E\x8D\xFB\x75\xEE\x34\xC6\x1F\x05\x4F\x71\x4A\xC2\x70\xDC\x61"
"\xEA\xE2\x12\xE2\xAC\x30\xEF\x56\x9A\x6F\x59\x1C\xAB\x08\xED\x57\xEA\x08\xEC\x3F\x0C\x71"
"\x4A\xA4\xC5\x39\xB6\x31\x09\x73\x24\x51\xD0\x8A\x13\x7B\x31\x85\x59\xD5\x64\xD4\xF0\xE5"
"\xFA\x71\x60\x3E\x6E\x14\x3F\xD0\xF1\x95\x45\xED\xF6\xDE\xFA\x35\x52\x82\x3C\x31\x1D\x8D"
"\x19\x8F\x10\x8B\xD1\x42\x88\x98\x1C\x2E\x5E\x8E\x30\x0A\x9E\x24\x48\xAA\x25\x72\x79\xC8"
"\x4A\x15\xC7\xD4\x6A\xB2\x9E\xA9\x24\x72\x0C\x07\x7D\xFC\xF1\x04\x36\x32\xFF\x8C\x1F\x15"
"\x97\x45\x2A\x17\xE5\xB5\x49\xA3\x4F\x34\x86\x5D\x70\x84\xFB\x36\xC4\xCD\xCD\x85\x0E\x30"
"\x97\xF0\x66\x31\x4B\x70\x9A\xE2\x0E\x48\x0D\xF0\xA3\xDE\xE1\x90\xDF\xD2\x9F\xFD\x4D\x9C"
"\x18\x03\xF3\x5A\x48\x24\x1D\xD8\x42\x2A\x94\x01\x76\x4C\x80\x19\xA4\x42\x2A\x00\xA6\x54"
"\x5D\x01\x27\xD8\x82\x20\x5C\x73\x8C\xCC\x72\x5F\x40\xC6\x12\x3F\x94\xED\x22\x71\x09\xDF"
"\xA1\x68\xD9\xEB\x36\xA4\x82\xF3\x61\x44\x19\x1E\x6F\x61\xAA\x24\xCD\xE0\x85\x03\xF7\x71"
"\x51\xFC\xB2\x12\x0F\xA2\x39\xDC\xF3\x07\xC3\x91\x3D\x7F\xDD\xEA\xAD\xD7\x89\xC1\x1A\xB5"
"\xC5\x30\x37\x1A\x6A\xF8\x02\xD3\xDF\xFE\x33\x2B\xE3\xF3\x12\x25\xC7\x0C\x95\x16\x93\x69"
"\xAD\xBA\x10\x6C\x0C\x06\xE0\xB0\x52\x87\x67\xC0\x0A\xA0\x26\x5A\x2B\x33\x65\xA0\x65\xC6"
"\x9F\x2A\x1E\x00\x60\x1C\x46\x7B\x07\x12\x60\x9D\xB2\x06\xE1\x1F\x83\xA4\x02\x39\x4D\x9D"
"\x1C\x70\x21\x13\x97\x02\x5B\x61\x5A\x08\x45\x49\x07\xDA\x4E\xC8\x1F\x4E\x39\xAC\x48\xCA"
"\xB3\xC2\xAE\x31\xB9\x3D\xF4\x42\x77\x51\x67\x10\x75\xF9\xBD\x09\x44\x1F\x62\x42\x03\xD6"
"\x32\x17\x75\xA0\x20\x72\x09\x96\xB3\x07\xAF\x6F\xE9\x11\xEE\x36\xD9\x71\x2F\xA7\x9A\xA9"
"\xC2\xE2\xC2\x8A\x74\x56\x03\x34\x7F\x78\xCC\x32\x91\xC4\x61\xEC\x18\x0F\x17\x0D\x0D\x87"
"\xF4\xAF\x2A\x06\xBC\x72\x34\x72\x31\x63\x55\x38\x18\x10\x7A\x6E\xBC\xD6\x73\x0B\x22\xC8"
"\xC1\xFE\xF0\x51\x27\x5E\x42\xBB\xB5\x52\xF8\x86\x5E\x2B\x52\x7A\xF9\x30\x63\x31\x45\xF1"
"\x7E\x9E\x97\x70\xF5\xFF\x61\xF4\x62\x83\x5F\x63\xF7\x6A\x50\x9E\x35\x20\xD3\x35\x27\x05"
"\x0A\x9C\x5E\xF1\x56\xA9\xEF\x41\xA3\x8B\xDD\xEA\x2E\x74\x38\xF6\x9A\xB5\xC4\x04\x9E\xA3"
"\x6C\x20\xCC\xAB\x79\xC6\x9F\x38\xB5\x4C\x0F\xB0\x91\x65\x62\x65\x73\xF1\x02\xF2\x0D\x5B"
"\xAB\x71\x41\xCB\xF1\xDA\x8A\xE1\x73\x6D\x99\x14\xDF\x2E\xEE\x46\x2A\x4C\x6C\xC9\xD9\xF6"
"\x2B\x46\xAC\x60\x1D\x5F\xB5\x47\xC6\x87\x30\x3C\x5C\x50\x87\xAF\x2A\xF5\xB4\x0B\x5F\x47"
"\x68\x43\xB7\x73\xF7\xF6\xED\x4C\xB6\x50\xF3\xF3\x6B\x55\x62\xBA\x76\x59\x54\x79\x36\x07"
"\x4F\x35\xB6\x45\x5D\x6D\x41\xCB\xB6\xF2\xF6\xEF\x6D\xF7\xD3\x46\x9C\x40\x6C\x82\x87\x78"
"\x81\x65\xE4\x16\x77\x17\xAE\x40\x9C\x36\x9B\x55\x32\x79\xBF\x60\x19\x46\xE2\x18\x2F\xD6"
"\xE7\x46\x74\x3C\xAD\xAB\x65\x37\xE5\x26\x7F\x24\x0C\x9A\x8A\x2D\x08\x83\x49\xBB\xD2\x0A"
"\x86\x32\x21\x7B\xE4\xDE\xD6\x30\xF6\xF0\xB2\x1A\x96\xF7\x84\x93\x23\x86\x99\xF7\x1B\x1F"
"\xF4\x7D\x33\x76\x82\xD8\x9F\xB2\x68\x83\x54\x6E\x4B\x82\xE3\x36\x52\x57\x37\xBA\xD0\xF4"
"\x79\x73\x94\x85\x53\x62\xFF\x7E\x6F\x72\x68\xAA\xBA\xED\x32\xAC\x42\xF7\xA7\x09\x1B\xEF"
"\xE6\xB6\xEF\xC9\x5F\xE2\xAE\xB2\x76\x9D\x38\x03\x56\xC9\x7E\x80\xE3\x3B\xB3\xF8\xFC\x91"
"\xC4\x59\xC8\x86\x98\x48\x01\x2E\xDA\x46\xE3\x12\xF9\x75\xA3\xE4\x21\xC9\x6F\x1D\x26\xCE"
"\xCA\xD8\x36\x14\xAF\x38\x94\x7F\xF6\xC2\x5A\xB9\xF4\xE5\xAE\xC2\x82\xF4\x72\xD4\xE9\x98"
"\x8F\x39\xBC\x80\xE3\x25\x63\xB2\x1A\xA9\xE0\x30\x11\xF6\x63\xC7\x6B\x5C\xBA\x79\x46\x6C"
"\x83\xD3\xAE\x69\xF7\x79\x81\xA6\x6A\xEA\x93\x79\xB9\xEC\x44\x0E\xF1\x64\x99\x36\xD0\x01"
"\x45\x00\xDA\x40\x00\x51\x6E\x44\xEA\x24\x4F\x14\x27\xB8\x5A\x0D\x0B\x8F\x04\xCF\x86\x40"
"\x3F\xDF\x41\xA7\x78\xE1\x72\x4F\x61\x60\x49\x93\x97\x29\x4F\xFF\xF8\xD2\xA4\x33\x99\x7B"
"\xFA\xA7\x8F\x79\x45\x27\x4B\xF0\x02\xAB\x2D\x4B\x1E\x7B\xC0\xF9\x7F\x07\x5A\xAA\x7B\xAE"
"\xDF\x94\xB8\x04\x9A\x16\x87\x33\xB4\xF8\x66\x9E\x6C\xA3\xAF\x11\xA3\x8C\x1B\x6B\x06\x5A"
"\x65\xDA\xF0\x4D\x85\xCE\xE6\x35\x6F\x17\xA1\x40\x28\x7A\x53\x60\x9C\x3B\xA7\xCF\x01\x49"
"\x35\x16\x4A\xC1\x06\xAF\xC7\x96\x7C\x61\x5A\x91\x8C\xCE\x2A\x0E\x80\x4C\xF9\xE0\xE1\x7A"
"\xE5\x9A\x85\x5A\xF7\x77\x07\x63\x77\x55\x17\xF5\x84\x6D\x7A\xEB\x54\xE0\x5E\xAF\xF6\x85"
"\xBB\xF8\x80\x20\x41\x45\x3D\x29\x70\xF0\xBA\x83\x1F\x20\xAE\xF5\xFA\x79\x07\x37\xBC\x9F"
"\x44\xFD\x22\xF4\x1F\xEB\x2D\x10\xA3\x63\xBA\x77\xD0\xAB\xDF\x3A\x8D\x77\x78\x09\xD9\xFB"
"\x29\x4D\xF0\x77\xFB\x44\x92\x0F\xC1\x5B\xCC\x2A\x4E\x1C\x36\x34\xD6\xC7\xFD\xA2\xD5\x97"
"\x71\x58\xB4\x3F\xF5\xB7\x3A\x26\x02\x9F\x71\xD7\x36\x63\x62\x94\xAD\x71\xCB\xB7\x6F\xCD"
"\x09\xA4\xC2\x3A\xB8\x9B\x38\xAD\x07\xA1\x5D\xC7\x79\x0F\x42\xAF\x41\xBD\xAF\x7A\xBB\x39"
"\xC1\x83\xEF\x7A\xB3\xDA\xBC\x2F\xAE\x80\x60\x1E\x2D\x6A\x76\xB8\x99\xDE\x1F\x67\x3C\xD4"
"\x01\x7C\xF5\xC2\x2A\xBE\x67\x14\x1F\x17\x5D\xD0\x63\x7B\x27\x0A\xB9\x08\x3C\x87\x24\xA3"
"\x52\x52\x50\xB7\xB7\x5F\xCE\x45\x7A\x1D\x8F\x94\x22\x33\x27\x0F\xCB\xB4\xF9\xE9\x86\xF7"
"\xB9\xDA\x1E\x70\x34\xF8\xCC\x07\xF1\x57\x84\x05\x3D\xFF\x60\xA4\x86\x7D\xB6\x5B\x37\x15"
"\xA2\x64\xF6\x48\xF5\xC7\xF7\x13\xD1\x43\xF7\xD3\xCA\xBD\x56\x83\xAA\xDB\xE7\x09\xC2\x43"
"\x62\x7A\x57\xB0\xBB\xA7\x23\x9B\x3E\xB7\xDD\x8F\x6A\xDD\x83\x9D\x30\xFD\xFC\x49\x74\xCF"
"\x04\x74\xE5\x4A\xD3\xFB\x10\xDC\x93\x08\x94\x65\x5C\x58\xAA\x21\xD7\x17\x19\xA3\x09\x16"
"\x3B\x34\xCA\xCB\xE2\x6B\x98\xFA\x93\xFB\xB7\xBC\x91\xF5\x5B\xFB\x06\xD3\x79\xBE\xD4\xE3"
"\x37\xDB\x8B\x33\x12\x11\xBE\xE0\x33\xF5\xEA\x7B\xE3\x73\xB9\xFE\xDE\x7B\x0E\x33\xA1\xF8"
"\x16\x4B\x76\x42\x10\xB0\xA7\x2B\xA2\xA9\x43\xD7\x71\xC7\xC8\xD6\xE7\x78\x40\x4C\x54\x45"
"\x5D\x14\x5F\x73\xAE\x11\x1B\xA0\x36\x9E\xC8\x16\x59\xC8\xC6\xBB\xE2\x7F\x1D\x55\x5E\x69"
"\xC6\x57\x87\x70\xF0\x2B\x38\x04\xAB\xBD\x86\x87\x39\x1B\xD2\x2E\xEF\x6B\xBA\xE6\xA3\x7B"
"\xE8\x0B\x7C\xD3\x50\xEF\xF7\x33\x75\x64\xF4\xE5\x98\xAA\xFF\x98\xEE\xF0\x43\xEE\xC7\xF0"
"\x53\x54\xF1\x9F\x7B\xBF\x4B\x94\x5F\xCA\x7F\x43\x9F\x3C\x1C\xDB\x3F\xBF\x8B\x3C\x93\x4D"
"\xBC\xA3\x30\xFA\x17\x50\xA0\xB3\x09\x00\x0C\x1E\x44\x98\x50\x61\x42\x2F\x02\x05\x9A\x13"
"\xA1\x70\x96\xC3\x80\xB3\x16\x5E\xC4\x88\x51\x84\x39\x8A\xFF\xBC\x64\x04\x19\x52\xA4\xC1"
"\x89\x14\x19\x8D\x44\xB9\xB1\xE3\x4A\x8A\x16\x51\x62\x1C\x32\x8F\xE2\xBC\x21\x12\x3B\xBA"
"\x7C\x79\x11\xA0\x43\x8B\x0D\x79\x02\x88\xE9\x10\x62\xCE\x8B\x2A\x1D\x12\x04\xB0\x33\xA0"
"\x1C\x67\x14\x3F\x12\x5D\x38\xE1\x14\x4B\xAA\x1D\x87\x42\x25\xD9\x11\x69\xC2\xA0\x0E\x69"
"\x62\x0D\x69\xD4\xE1\x53\xB0\x39\x27\x34\xB5\x1A\xB1\xEC\xC5\xAE\x0F\xD5\x22\x54\x2A\x10"
"\x27\x58\x95\x5F\xC5\xFE\x3B\x69\x70\x82\x89\x84\x3B\xB7\x82\x6D\x1B\xF0\x2A\xDC\x9B\x6B"
"\x0D\x1F\x46\x9C\xF8\x6E\xD5\x9F\x88\x17\x33\xAE\xA8\x98\x23\xE4\x96\x89\xE3\xFE\xB3\x3B"
"\x59\x6E\xE2\x97\x25\x1B\x1F\xBE\xFC\xEF\xAF\x5E\xB4\x0E\xF3\x72\x3E\x18\x18\x73\x4D\xD4"
"\x39\x1F\x93\x45\x1C\x9A\xF2\x68\xAC\x3E\x85\xBE\x35\xF8\x1A\xB1\xE7\x80\x27\x6D\xAF\x4E"
"\x5A\xF9\xB0\x6A\x97\xBF\x53\x69\x06\x7E\x98\x37\xE5\x95\x73\x89\x9E\x2D\xAC\xF0\xB7\x60"
"\xDC\x9C\x55\x7F\x6D\x8D\x71\xF9\xD8\xEC\xD3\x45\x17\x44\x08\xDD\xA4\xE1\xBA\xAC\x79\xCF"
"\x93\xA3\xA3\x8C\xB6\xBF\xE2\x4F\x83\xF5\x4E\x5B\xBC\xE9\xEC\xF5\xED\xA3\x96\x0D\x99\x36"
"\xD8\xFC\x8C\xF7\x63\xED\xAF\xAA\xFF\xA0\x9A\xEE\xAB\xCB\x06\xBB\x2F\xA1\xF9\x04\x7A\x6F"
"\xAD\xED\x9C\x03\x40\xB7\xFA\xBC\x43\x30\x41\xB6\x64\xF2\x8A\x35\xC7\x90\x63\xEE\x9F\x0A"
"\xA1\x0A\x8D\xB6\xEB\x34\x2C\x6B\xC1\xAF\xDA\x72\x69\xB9\x06\xE1\xEB\x28\x2F\xB1\x9C\x41"
"\xEE\x43\x10\x3B\xD2\x06\x09\x00\xCE\x13\xC6\x16\x1D\x77\xDC\x51\x8A\xB2\x1E\x83\xF0\xC6"
"\xE8\xBA\x4B\xCB\xC2\x83\x02\x1C\xB0\xAC\xF8\xC0\x3B\x68\x31\xEC\x4A\x44\xEB\x29\xEF\xB8"
"\x33\xC8\xA7\x27\x59\xA4\x88\x36\x27\x49\x34\xB2\x4B\x2F\x15\x7A\x8C\x32\x19\x89\x0A\x13"
"\xB2\x31\x5D\xE3\x90\xB9\x33\x73\x0A\x8C\xA6\x05\xF1\xFA\xB2\xC9\x34\x61\x83\xB2\x45\x85"
"\x46\xB4\x6F\xBB\x24\x2D\x1B\x50\x4F\x26\x41\xEB\x90\xA2\x35\x47\x7A\x50\xBA\x22\x0D\x0B"
"\x6C\xA8\xAE\xBE\x7A\x93\x4E\xFE\x3A\x7A\xEA\xCD\xCF\x7E\xE4\x70\x2B\xDE\x06\xA5\x2B\x4D"
"\x08\x25\x5D\x31\x31\x3F\xBB\x9C\xD2\xA9\xD6\x28\xAC\x2E\xC4\x3F\xC1\x2A\x29\x2F\x49\x07"
"\x2A\xC8\xA8\x20\x89\x22\xB5\x2F\xAD\x4E\x8D\xB3\x56\x0B\x03\xAC\x0A\x53\x91\x70\xA5\x4A"
"\xD7\x90\x78\x65\xC9\xD7\xB0\x38\xF4\x62\x3A\x61\x39\x8B\x75\x38\x0C\x05\xBA\xD2\x20\x53"
"\xEB\xE3\xD4\xC2\xA9\xBE\xBB\x73\x59\x06\x39\x2B\x13\xB2\x66\xC9\x9C\x53\xA1\x67\x0D\x9B"
"\x6E\xC0\x36\xB9\x44\x75\x26\x0D\xB7\xBB\x16\x5C\x73\x0F\x3A\x8F\xDC\x0D\x67\x0D\x0F\x5D"
"\x47\x11\x8B\xD6\x48\xD5\x56\xDA\x13\x2A\x3C\xE5\xB4\x13\x50\x6A\x01\xA8\x21\x4D\xCC\x00"
"\xC9\x2A\xB9\xB5\xF6\xCD\x2D\xCD\x4E\x6D\x65\xB8\xB5\x6C\x19\xDB\x96\xDB\x40\x33\x24\x4F"
"\x60\xCA\x22\x86\xEA\x4D\xA6\x44\xB5\xF5\x5B\x75\x05\xAD\x4E\x48\xE1\x0E\x33\x41\x07\x93"
"\x4D\x46\x22\x4D\x40\x4E\x3E\x99\x33\xA9\x1C\xD2\xA6\x0C\x84\xE4\xB0\x36\x20\x8C\xB1\xDA"
"\xCE\x1C\x24\x58\x46\x99\xC3\x9B\x47\x42\x98\xDD\x21\xD7\xBA\xEC\x55\x00\x8C\x0D\x19\xAA"
"\xC5\x06\xEB\x6F\x5E\xA2\x0E\x7C\x6B\x39\x3A\x27\xA0\x35\xE3\xD2\xA8\x04\xF8\x6A\x66\xDD"
"\x85\xAA\x64\x96\x53\xEE\x68\x65\x9E\xB3\x73\xD2\x0A\xAD\x3D\x42\xED\xDE\xAD\x6A\x38\xFB"
"\xE7\x97\xBA\x22\x4B\xAA\x65\xE7\x71\x04\x3C\xA5\x16\x26\x4A\x6D\xF0\xD8\xEE\xC8\xED\x86"
"\xFF\x2E\x2B\xE7\x9D\x79\x06\x9B\x62\x07\xAD\x1A\xFC\x6B\x9F\xB9\xEE\x0C\x71\x9E\x75\x28"
"\x7C\x6B\x4F\x29\xDA\x26\xCB\xAA\x8D\x2C\x34\x36\x78\xC3\x3B\x1B\x6F\x34\x27\xA6\x8E\x5E"
"\x74\xFF\xD9\xA6\x72\x96\x8C\xD6\xB7\x66\x38\xC1\xEC\x56\xC9\x43\xF9\xE5\xD8\x30\xA9\x31"
"\x2A\x1A\x31\xD5\xFE\x0A\xD5\xEF\x5D\x3B\x92\x03\xE0\x5A\xFA\x96\xA3\x20\x1D\x1C\x99\xC7"
"\xF3\xC6\xFB\xAE\x85\x8E\xDF\x59\xCA\x77\xA4\x87\x7B\x4D\xBA\xCE\xF1\x96\x74\xF9\xEC\x80"
"\xCE\x39\xE7\xF4\xC4\xC4\xDB\xEF\x54\xA5\x9A\x1F\x69\xD5\x7F\xB0\xD7\x1E\x70\xF3\xAD\x53"
"\xBD\x53\x09\x01\x4B\x7F\xA1\xF5\xB1\xBA\x57\xFD\xD6\xFD\xA5\xCA\x69\x0B\xEB\x55\x6E\xE8"
"\x84\x21\xB5\x5D\xF5\xD9\x2E\x87\x15\xE8\x3C\x14\x3D\x9C\xF5\xCD\x5D\xEF\x9B\x91\xE5\xB8"
"\x52\x33\xDD\x85\xC4\x44\x8C\x53\x11\x62\xBC\x33\x97\x30\x1D\x8B\x76\x02\x3C\x0A\x00\x5F"
"\x02\xAC\xE6\xF4\x4F\x80\xE0\x43\x89\xA4\x90\x82\x40\xC3\x70\xD0\x2D\xC8\x92\x0B\x00\x5F"
"\x16\x10\x6D\x10\x30\x81\x1D\xB2\xE0\xF9\x64\x78\x91\xED\x44\x8C\x84\x39\xA9\xE1\x01\xE7"
"\x57\xC0\x75\xB1\x8E\x7F\x12\x14\x90\x06\xEF\x73\x43\xAB\xF5\x0B\x21\x41\x2B\x8B\x09\x47"
"\x46\xBF\x0E\xD9\x2F\x75\xFA\x83\x1D\x7D\x02\x07\xC5\x64\x1D\xCC\x5A\x63\x6A\x94\xE6\x62"
"\x07\x80\x55\xA1\x6E\x83\x18\xC4\x1A\xA5\x04\x68\x3C\x94\x28\x71\x52\xF9\x03\xD9\x91\x36"
"\xF7\xAE\x26\xB6\xC6\x33\xDA\xA8\x81\x42\x26\x40\x3C\x81\xB4\x10\x35\xCF\xDB\xE2\x0C\xF5"
"\xC8\x26\xD5\xBD\xEA\x31\x64\xCC\xC8\xBD\xFC\xA8\xB0\xB2\x08\xB2\x28\x84\xF4\xE0\x4A\x1A"
"\x48\xA4\x34\x2A\xEB\x87\x84\x51\x20\x1A\x41\x07\xC8\x97\xC8\x21\x50\x94\x44\x89\xBC\x0E"
"\x09\xC5\x97\xE0\x4F\x8D\x91\x5C\x4B\xB8\x2E\x37\xAE\xDD\xF4\x50\x68\x46\xB4\x62\x55\xB2"
"\xE7\x1F\x21\x8E\x04\x57\xF3\x10\x44\xCD\x9C\x78\xBC\x49\x72\x46\x36\xB0\x21\x22\x96\x28"
"\x83\xC9\x4E\x5E\x6D\x1E\x3B\x12\xC6\x2A\x05\x72\x8A\x56\x12\xA8\x43\xBC\xDC\x63\x32\x0B"
"\x96\xC7\x28\x6E\xA6\x5C\x8F\x4C\x08\x90\xA6\x08\x4D\x84\x48\x93\x8D\x9C\xF4\x92\xC7\x42"
"\xF9\xBA\x53\x9E\x11\x2C\xE2\x83\x18\xE3\x00\xA3\x0D\xC8\x68\x43\x9C\x4F\x04\x65\x34\x35"
"\x55\x48\x06\x92\x2B\x73\x25\x1C\xCF\x45\x90\x76\x98\xA5\x95\x6A\x25\xB3\xFC\x22\x4B\x88"
"\x89\xAB\x53\x4C\x8E\x25\x70\x24\xA5\x61\xC0\x59\x95\x45\x86\x64\x4A\x10\xFA\x94\x2D\xB5"
"\xD5\x3B\x68\x4D\xAB\x2A\x35\xBA\x0F\xAF\xD0\xA3\x4C\x8A\x02\x4D\x75\x03\xB2\x26\x3A\x33"
"\xB8\xC9\x25\xF2\x71\x8D\xEA\xC4\x66\x11\x0D\xD8\x30\x49\x79\x31\x9F\x1B\xE5\x1C\x2A\xC5"
"\x08\xBA\x18\x8A\x64\x8E\xFE\xC3\x4C\xDD\xDC\xB8\x12\xBC\x89\xB0\x98\xF2\xE4\x66\x84\x76"
"\x38\x4D\x81\xD8\xAF\x76\x8E\x44\x69\x6A\xDA\xC9\x19\x87\xD6\x51\x66\x06\xA9\x01\x39\x3B"
"\x52\x8B\x38\x72\x06\x10\x0C\x0C\x1E\x50\xAC\x05\x42\x90\xE0\x71\x25\x2D\x5D\x88\xDE\xAA"
"\x45\xCD\xC3\x24\x95\x25\x74\xBB\x69\x59\xF8\x86\xBC\xA6\x26\xC8\xAB\x8A\x94\x69\x45\xD5"
"\x9A\x11\x74\xD5\xF4\x6C\x54\x4D\x48\x5B\x31\x62\x53\x1E\xC6\x33\x2A\x6F\x0D\xEB\x5A\x2F"
"\xC4\x55\xBD\xF6\x55\x21\x26\x30\x83\x23\x74\x44\x87\x2B\xE4\xD5\xAF\x87\x45\xEC\xF6\xCC"
"\x90\x8A\x54\xD0\x81\x2F\x72\x34\x03\x27\x6C\x41\x07\x1B\xD9\xE7\x0A\x82\xA5\x43\x59\x13"
"\xBB\xD9\xB9\x5E\x41\x10\x83\xBD\xC2\x63\xBF\xA4\x03\x33\x94\x56\x07\x86\x3D\xCC\x04\x3C"
"\x0B\x5A\xD1\x72\xD6\xB5\xAF\x85\xED\xF9\x26\x40\x87\x53\x49\x0A\xAB\xB1\xC5\x6D\x6E\x75"
"\xBB\x5B\xDE\xF6\xD6\xB7\xBF\x05\x6E\x70\x85\xEB\xDA\x86\xCC\xA3\x16\x83\x5B\x0F\x4D\x87"
"\xBB\x5C\xE6\x36\xD7\xB9\xCF\x85\x6E\x74\xA5\x3B\x5D\xEA\x76\x69\xA0\xB7\xA9\x6E\x76\xB5"
"\xBB\x5D\xEE\x76\xD7\xBB\xDF\x05\x6F\x78\x1F\xC5\x1C\x7C\x8A\xD7\xBC\xE7\x45\x6F\x7A\xD5"
"\xBB\x5E\xF6\xB6\x77\xA5\x90\x41\xA6\x7B\xE5\x3B\x5F\xFA\xD6\xD7\xBE\xF7\xC5\xAF\x5A\x69"
"\xA6\x2D\x82\xE5\xD7\xBF\xFF\x05\x70\x80\x05\x3C\x60\x02\x3B\x90\x8E\x2C\x61\x6A\x81\x15"
"\xBC\x60\x06\x37\xD8\xC1\x0F\x86\xAE\x09\xE8\x90\x8A\x1D\x39\xA2\xB2\x10\xC6\x70\x86\x35"
"\xBC\x61\x0E\x77\xD8\xC3\x1F\x06\x71\x88\x45\x3C\x62\x12\x97\xD8\xC4\x27\x46\x71\x8A\x55"
"\xBC\x62\x16\xB7\xD8\xC5\x2F\x86\x71\x8C\x65\x3C\x63\x1A\xD7\xD8\xC6\x37\xC6\x71\x8E\x75"
"\xBC\x63\x1E\xF7\xD8\xC7\x3F\x06\x72\x90\x85\x3C\x64\x22\x17\xD9\xC8\x47\x46\x72\x92\x95"
"\xBC\x64\x26\x37\xD9\xC9\x4F\x86\x72\x94\xA5\x3C\x65\x2A\x57\xD9\xCA\x57\xC6\x72\x96\xB5"
"\xBC\x65\x2E\x77\xD9\xCB\x5F\x06\x73\x98\xC5\x3C\x66\x32\x97\xD9\xCC\x67\x46\x73\x9A\xD5"
"\xBC\x66\x36\xB7\xD9\xCD\x6F\x86\x73\x9C\xE5\x3C\x67\x3A\xD7\xD9\xCE\x77\xC6\x73\x9E\xF5"
"\xBC\x67\x3E\xF7\xD9\xCF\x7F\x06\x74\xA0\x05\x3D\x68\x42\x17\xDA\xD0\x87\x46\x74\xA2\x15"
"\xBD\x68\x46\x37\xDA\xD1\x8F\x86\x74\xA4\x25\x3D\x69\x4A\x57\xDA\xD2\x97\xC6\x74\xA6\x35"
"\xBD\x69\x4E\x77\xDA\xD3\x9F\x06\x75\xA8\x45\x3D\x6A\x52\x97\xDA\xD4\xA7\x46\x75\xAA\x55"
"\xBD\x6A\x56\xB7\xDA\xD5\xAF\x86\x75\xAC\x65\x3D\x6B\x5A\xD7\xDA\xD6\xB7\xC6\x75\xAE\x75"
"\xBD\x6B\x5E\xF7\xDA\xD7\xBF\x06\x76\xB0\x85\x3D\x6C\x62\x17\xDB\xD8\xC7\x46\x76\xB2\x95"
"\xBD\x6C\x3D\x96\xE1\x9C\xB5\xD2\xC1\x9D\xE7\xE0\x42\x5B\xB5\x96\xD9\xD7\xFE\x12\x40\x0A"
"\x7A\x9F\x1A\xD4\x62\xDB\x64\x9E\x0A\x5C\xB9\xAD\x8D\xDB\x62\xDB\xDC\x39\x51\x8A\x39\x34"
"\xCB\xB0\xA7\x46\xC6\x48\x35\x28\x6D\xBC\xE3\xBD\x6E\x1F\x4F\xC0\x33\xE2\x6E\xCD\x0A\x57"
"\x67\x21\x78\xCB\x3B\xDE\xA8\x3D\x37\xAC\x0F\x44\x6F\x2F\x9D\xB5\xA7\x16\xBA\x57\x40\xF0"
"\xDD\x49\x47\x94\xAE\xBF\x33\x2B\x1D\x31\x09\xFC\xA6\x85\x23\x26\xB9\x92\x4B\x50\xA8\xFE"
"\x61\xD2\xB5\x48\xA5\x74\x0C\x3D\xC8\x1C\x3F\xFE\x5C\x40\x3C\x7B\xB9\x35\x00\x78\xC0\x01"
"\xA7\x6F\xA1\x10\x3C\x41\x2C\x67\x15\xB7\x2D\xD6\x9B\xFB\xF0\x66\x2E\x45\xE5\xB8\x7C\x57"
"\x55\x71\xB1\x2E\xAF\xA3\xA3\x82\xA9\xC1\xF2\x7D\xB5\xB8\x5D\x2D\xBE\x9C\x9D\xC0\xEF\x78"
"\x9E\x5B\x9A\x2D\x5D\xE5\xB6\xDA\x6F\x4E\x13\x14\x75\xE5\xD6\xE7\x79\xE5\xCE\xC8\x3C\xA5"
"\x8A\x5D\x01\xE7\xC7\xE9\x0C\x0F\x7A\x79\xE1\x17\x74\x85\xA7\xFC\x57\x91\xBC\xCC\xD7\xD7"
"\x3A\x04\xA5\xEE\x3B\xBA\x4A\xC9\xF9\xD3\x67\x68\x70\xAE\xBF\x7C\x74\x01\x49\x30\xD9\xD2"
"\xB4\x8D\x9A\x1D\x5D\x24\xCB\xB9\xCA\x65\xBE\xBD\x5E\xAA\x07\x75\x88\x6D\xEF\x9B\xC4\xB3"
"\x73\x1D\xD3\x85\x71\x7B\x5A\xB3\x54\x23\x81\xDB\xEE\x13\xBE\x9D\x99\x05\x9E\x40\x19\x84"
"\x51\x3A\x67\x38\xC2\xDA\x80\xDE\xB9\xD9\xDF\xE6\xBF\x53\x7C\x5E\x31\x88\xFF\x47\xCC\xB6"
"\x8E\x71\xD4\x2C\x07\x27\x69\x17\x3D\x7A\xE9\x9E\x42\x23\xC9\x06\xAC\xF6\x51\x0D\x1C\x83"
"\x53\xF7\xC7\xC7\xF3\x4D\x71\xDF\x6C\xD2\x3B\xF8\x5C\x98\x0B\xDD\x3E\x13\xF0\xF7\xBF\x9B"
"\x4B\x79\xBB\xE2\x3E\xAD\xD3\x9D\x00\x12\x90\x10\x7B\xE7\x5E\x46\xF7\x5D\x8A\xCB\x3C\x14"
"\x6F\x9F\xA2\xFE\x63\xFB\x81\x01\x3E\x4A\x7E\xF3\xA4\xF1\x8B\xBD\xBE\x30\x57\xBB\x4B\x7D"
"\x19\xD5\xE3\xFB\xF2\xE1\x00\x28\xBC\xDF\x41\x72\xA9\xB7\xC4\x05\xEB\x6B\x1D\x9D\xF9\x71"
"\x2B\xBE\xFB\x83\x44\x7C\xE1\x77\xAD\xBB\x43\x9B\x9A\x8B\xA9\xCB\x31\x81\x0B\xEB\x2D\xB6"
"\x73\x88\x5A\x60\x12\x39\x28\x9D\x1C\x31\x39\xE7\xEA\x8A\xF4\x0B\x9F\xA6\xB8\x3D\x23\xD9"
"\x2F\x73\x52\x88\x80\x29\xC0\xFA\x68\xB7\xEB\x3B\x88\x0C\x8C\x40\xFC\xA2\xBC\xED\xB3\x17"
"\x99\x38\x07\x90\x7B\xB9\x4D\x50\x38\x7A\xF3\x02\x99\x50\xBD\xEC\x58\x21\x06\x4C\x88\x0F"
"\x74\xB9\xDD\xB2\xB7\xAB\xA2\x36\xDD\x12\x9F\x79\x78\x3F\x19\xB4\x9E\x83\xC3\x3D\x67\xD8"
"\x06\x67\x58\x37\xB6\x29\xC2\xA3\x9A\x10\x87\xD8\x84\x09\xE0\xC0\xB2\xB3\x8F\xF1\x53\x42"
"\xA4\x52\x3A\xEA\x4B\x26\x4B\x1A\xA9\xF9\x18\x3C\xE1\x4A\xAA\x59\xB0\xC2\x9C\x90\x02\xF6"
"\x2B\x38\x41\xB8\x9C\x1A\x78\x3E\x22\x8B\x09\xF9\x2B\x8B\x32\x98\xC2\x2E\x29\x03\x15\xE4"
"\x8A\x33\xC4\x3C\xEB\x51\x43\xBF\x9A\xBD\x81\xB8\x41\x7A\x09\xC2\xCA\x1B\x15\xC3\x39\x1A"
"\x6B\xD1\x3F\x1C\x8A\x39\x91\xF9\x17\x87\x41\x24\x24\x20\xBA\x04\x0C\xBA\x73\xB8\xA2\x1D"
"\xFC\x12\x24\x88\xB7\xC2\x92\xBB\x83\x20\xAD\x78\x33\xBD\x04\xA9\x44\x33\x08\x2D\x68\x8B"
"\xC4\x4B\xBC\x8F\x4C\xDC\xC4\xE8\x92\x94\x2D\x3C\x2C\x74\x99\xA8\x97\xDB\x43\x6F\xA2\x27"
"\x0E\x51\x15\xAD\x01\xC0\x0A\x8C\xB9\xF9\xA0\x40\x59\x59\x09\x6D\x40\x3D\xB7\xDB\xBF\x54"
"\x54\x29\x86\x99\x00\x39\x10\x26\x98\x41\x40\x3D\x04\x1D\x52\x54\x10\x5D\x54\xA4\x11\xF4"
"\x3F\x63\x1C\xA9\xD4\x52\x46\x53\xC2\x2D\xD9\x38\x87\x22\x4C\x85\x60\xBC\x8F\x8B\x9B\x09"
"\x31\xB4\x0F\x6B\xF4\x0A\x6C\xAC\x0F\x6D\x64\x16\x6E\xCC\x0E\x6F\xB4\x19\x70\x5C\x45\xBE"
"\xAA\x15\x11\xB8\x45\x38\x84\x96\x09\xDB\x3C\x61\x48\x85\x32\xF8\xC2\xAA\xE2\x90\xBC\x3B"
"\x3C\x1A\x11\x84\x5B\x0C\x44\x91\xF0\x8E\xBC\x20\x8E\x3C\x91\x9C\xB8\xC8\xC7\xF0\xF1\x39"
"\xC6\xA0\x47\xDD\x4A\xB8\x60\x71\xC4\xFB\x78\x29\xC6\x30\xC1\x8A\x61\xA9\x84\x1C\x96\x87"
"\xBC\x26\x18\x82\x48\x79\x94\x48\xDD\x12\xC0\x61\xF2\xC4\xC3\x10\x47\x8A\x00\xC1\xD6\xE8"
"\x48\x98\xC9\xC3\xB5\x08\xC9\x3A\x1A\xC9\x35\xBC\x45\x8F\x3C\xC9\xBC\x19\xAA\xF3\x11\x0B"
"\x62\x74\x29\x5F\xA4\x8A\xD2\x43\x38\x0C\x39\x45\xBB\x9B\x09\x99\xA2\xB8\x78\xAC\x92\x1F"
"\x52\x8D\x3A\xCC\xBA\xAA\x78\xC5\x97\x28\x49\xEF\xDB\xC8\xD7\x8A\x0B\x67\x90\xBE\x94\x1C"
"\xC0\x86\xB9\xC3\xF2\x49\xA4\x40\x49\xBF\x83\x0C\xA2\xA8\xEC\x90\xA9\x24\x3B\xE6\xE1\xC9"
"\xBF\xB9\x2E\x66\xF9\x41\x7A\xE9\x3E\xAA\x80\xC9\xA8\x08\xCB\xAF\x42\xC6\xF0\x29\xCB\x63"
"\xCC\xB7\xB4\x5C\xC6\xC4\xA8\x22\xF3\xE1\xC0\x59\x5C\x88\xA2\xB4\x99\x80\xCC\x89\x86\x68"
"\xC8\x7A\x0C\x08\x9A\x84\xA4\x42\x94\x0C\x94\x5A\x10\x3B\xB2\x0F\xE6\xF3\x4A\x23\x41\x47"
"\x96\x00\xCA\x8A\xF2\x0C\xEC\x80\xB9\x9B\x64\x98\x17\xBC\x24\xB7\x1C\x23\xC9\xAC\x25\x20"
"\xAA\xCC\xC3\xD0\xB8\xAA\x48\x4C\x19\xB2\xAA\x61\x42\x8D\x1C\xBC\x4A\x9E\x04\x4D\xE6\x98"
"\xC5\xD1\xFC\x1F\x97\xC9\xC8\x74\x82\x27\xD5\x04\x9C\x21\x68\xC2\x04\x61\xCB\x7B\xB2\x90"
"\x68\x8B\x93\x8D\xF8\xC8\x99\x99\x07\x2F\xAC\x0F\xAF\xD2\xBE\x3F\x11\xBE\x7F\xA0\xC1\x97"
"\x73\x04\x22\xDC\x06\x61\x80\x47\x0B\x31\x81\xD8\x1C\xCB\xB5\xD2\x01\x6B\xAB\x01\x0A\xB3"
"\x85\xE3\xFC\x9B\xCC\xD4\xCA\x52\x02\x1D\xBB\x5C\x88\xD4\x94\x4D\xEB\x9C\x18\xEC\xB4\x89"
"\xEB\xDC\x2D\xAA\x44\x4C\xCE\xD0\xCE\xE6\x93\x9D\xCB\x94\xA4\x63\x22\x4F\xF4\xEC\xB8\xB3"
"\x09\x06\x7F\x93\xC4\xE0\x32\x4D\xCA\x10\xCC\xDE\x3A\xCA\xA3\xAC\xAF\x6E\xA3\x8C\xA1\xF4"
"\x2F\xF1\x5C\x89\xBC\xC4\x8A\xAE\x6C\xCB\xF6\x1C\xC6\xB3\x9C\xAB\x66\xF4\x43\x02\x9D\x98"
"\xE5\x94\x21\x33\x1A\x20\x2D\x9A\x98\xFE\xDB\xBD\x08\xAD\xC8\x8C\x70\xD0\x07\x65\x22\x8A"
"\x9C\x48\x82\x92\x43\x8C\x9C\x18\xB9\x7C\xB2\xBB\x88\x99\x5B\xDA\x30\xF1\x31\x42\xBD\x60"
"\x41\xCC\x50\xC7\xF7\x12\x88\xF4\x78\x1C\x96\xC1\xCF\x94\x48\x13\x17\x7D\x51\x93\x89\x51"
"\xE7\x99\xD1\x1A\x3D\x99\x1B\x15\x89\xC7\xA0\xD1\x1A\xE5\xD1\xBE\xCA\x1C\x24\x60\xCA\xC4"
"\x4C\xB8\xEB\x1B\xAB\xCB\x63\xC9\x5A\x6C\xAA\x24\x75\xBC\xB1\x63\x52\xA4\xB2\x1E\xEF\x14"
"\xAA\x28\xCD\x9A\xED\x44\x94\xAC\x74\xC6\x7C\xBB\x02\xC9\x12\x84\x2B\x30\x92\x50\x89\x19"
"\x94\xF1\xB6\xBD\xDC\xCA\xF0\xE8\x52\x5B\xF8\xD2\x5A\x51\x2D\x2F\x05\xD3\x38\x69\x53\x35"
"\x7D\xD3\x2F\x89\xD3\x35\xCD\xA6\x16\x24\x8D\x90\xD2\x2D\x48\xA4\x30\x47\x30\x83\x20\x8D"
"\x28\x96\x50\x47\x46\xD0\x40\xF4\xD9\xD2\xFB\x40\x22\x44\x6D\xC9\x13\x3C\x54\xF9\xEC\x9C"
"\xBE\x34\x3C\x91\x6A\x89\x3F\xC9\xA8\x6F\xB2\x1E\xDD\x6C\x26\x77\x93\x9E\x49\xAD\xA6\x75"
"\x52\x50\x4E\xCD\xD4\x8D\xB3\xCC\x40\x61\xD0\x84\x20\xD2\xBE\x91\xA9\xD9\x71\xC8\x99\x68"
"\x43\xA9\xDA\xCC\x85\x38\xD5\x9C\x2C\x08\x55\x4D\x8C\x58\xF5\x8A\x54\x55\x52\xB0\xB0\x55"
"\x66\xC1\xD5\x27\x5D\x8B\x5D\xB5\x99\x5E\x15\xC2\xC4\x18\x82\x54\x58\xB7\x44\xA5\x0B\xE2"
"\x2C\x9D\x65\x65\xD6\x66\x65\xD6\xAF\x5C\x0B\x27\xDD\xC6\x33\x7D\x89\x30\xA1\xD2\x97\xA0"
"\x1E\x50\xF9\xA8\x8C\xDB\xD6\xFB\xC8\x56\xE6\x7A\x9F\x51\x34\x50\x86\xC0\x17\x5A\x49\x28"
"\x5D\x8A\x54\x42\x1C\x44\x74\x5D\xD7\x6E\x6A\x57\x63\xEA\xD6\x73\x4D\x22\x01\x92\x50\xBD"
"\x88\x4D\x67\xB0\x02\x6B\x59\xCE\x9C\x59\x49\x97\xB9\xD7\x7C\x4D\xD0\x8E\xFB\x57\x7D\x1D"
"\xD7\x8B\x28\xBE\xA3\x00\x58\xD6\x13\xA8\x81\x0D\x58\x68\x79\xD4\x0D\x55\x4F\xC4\xD0\x4F"
"\xC6\xB8\xCD\x6C\xAB\xBA\x2E\x79\x27\xCC\xD1\xD3\x99\xFA\x39\x02\xEC\xD8\xE0\x42\x22\x12"
"\xE5\x29\x85\xFD\x24\xDE\x83\x8A\x1C\x5A\x88\xD0\xC0\x3A\x94\xF5\x16\xA9\x13\xC4\x46\x55"
"\xD9\x0A\xBD\x2B\x0C\xBA\xD6\x26\x61\xCA\x5C\x91\xD9\xAD\xCA\x55\xAB\xBB\x59\xE8\x71\x8C"
"\x9E\x45\xC8\x9F\xBD\x48\xF2\x00\x5A\x1D\x74\x19\x41\x70\x86\x55\xDA\x86\xE3\x9A\x50\x67"
"\x2A\xC7\xC9\xC4\x4C\x2D\xB5\x99\x82\x5D\x8B\xC7\xA8\x57\x07\x7A\x58\x23\xF1\x24\x54\xDC"
"\xC5\xF6\xEB\xDA\xE0\xD2\xA6\xA3\xC1\x52\x8D\x7A\x57\x67\x19\xD0\x25\x65\xCD\xA6\x9D\x5A"
"\x76\xEA\x56\xB5\x35\x3E\x8F\x4A\xDB\xD0\x18\xCB\xC7\xD8\x04\x79\x2B\xD3\x8D\x0D\x21\x04"
"\x55\xC5\xA7\xC1\xDB\xCF\xD4\x5B\xA7\xFD\xD4\x40\xE1\xCF\x62\x14\xA0\xC1\x4D\x29\xD0\x31"
"\x5C\x84\x48\x4E\xAA\xD0\x06\x3A\xA8\x99\xF4\xEB\xCC\xAF\xBD\xCB\x0F\xA5\x56\x90\x98\x92"
"\x57\xED\xD1\x34\xA9\xDB\xE4\x2B\xAD\x39\x85\xD8\xCD\xE5\x5C\xCF\x7D\x5A\x26\xE4\xDC\xCE"
"\xBD\x23\xCD\x2D\x5D\x4D\xF4\xAD\x8C\x35\x88\x7B\xF1\xCE\x29\x71\x1A\xEF\x20\x46\xD8\xC5"
"\xA9\x46\x15\xBF\xB1\x45\x08\xD9\xA5\x5A\xB1\x35\x47\xDD\xCD\xD2\x2D\xD5\xAA\xF3\x84\x5A"
"\x16\x4D\x0E\xD5\x32\x2D\x8F\x65\xCF\x67\x4A\xDE\xBA\x9A\x98\xCD\x2C\x4F\xC9\xCD\x89\xC2"
"\x53\x93\x9C\x75\x9F\x99\x63\x0C\xA0\xF4\xCF\x8B\xF5\x12\x96\xED\x92\xEC\xDD\x5B\xF6\x11"
"\xDC\xB4\x91\x5A\xC0\x05\x2A\xE6\x48\x5C\x30\x51\x56\x67\x55\xDF\x67\x35\x0C\x69\xFD\x87"
"\x4D\x60\x99\xD6\x6D\x1F\xE5\xE5\x43\x5A\x6C\x58\x5A\xAA\x5F\x48\x5D\x5B\xFA\x0D\x9D\x94"
"\x3D\xDB\x97\x35\xD9\x92\x25\x59\x78\x0D\xE0\xB0\x25\xE0\x99\xA8\x85\xC8\x82\xA9\x6B\x5D"
"\x12\x99\xA4\x88\x82\x1C\x55\x04\x56\x60\x96\xA8\xD9\xDC\x49\x60\x4E\x58\x60\xCC\xFC\xAA"
"\x0B\xCE\xE0\x8F\x41\x9E\x09\xC6\x5D\xAC\xC0\xC2\x02\xA5\x97\x2B\x48\xDD\x13\x36\x83\x7E"
"\xD5\x08\x8B\x49\x1E\x47\xF8\xC5\xFC\xE5\xDA\xB4\xB5\x0F\x33\xC2\x5C\xB7\xBD\x5E\xFC\x68"
"\x5E\x1C\x8E\xCC\xD3\xC5\x20\xF9\xF3\x5E\x45\x51\x1D\xEC\xA4\x2B\xFF\xB5\x5D\xF5\x6B\x5B"
"\xB7\x25\xC5\x21\x6E\xD9\x22\xC6\xDA\x23\x96\xDB\xDD\x35\xDB\x8E\xFD\x56\xAC\x08\x93\xED"
"\x9B\xCF\xB7\xE5\x5B\x8A\x48\x85\x9B\x75\xCC\x55\xA5\x08\x2B\xE6\xDE\x4C\xF9\x4F\x26\xB9"
"\xE2\xB9\x15\x18\x30\xFE\x5F\x89\xE9\x08\x34\x66\x62\x8B\xC2\xA0\x52\x6D\x18\xD9\x00\xC1"
"\x55\xA9\x59\x19\x85\xDE\xEC\x78\xDE\x80\xA8\x63\x77\xA5\x8C\x3D\x5E\x26\xF2\x6A\xBD\xEE"
"\x34\xC4\x1E\x1E\x2F\xFD\x28\x08\xD7\x15\x63\xF3\x44\x88\x9C\xA1\x5E\x9D\x92\x5C\x46\x4E"
"\x64\x29\xCA\x4E\x97\xC5\xD1\x47\xA6\xE4\xBC\xED\xDA\x29\x7E\x21\x6F\x7A\x4B\xE6\x6D\x23"
"\x08\xE5\xE4\x4B\x2E\xA3\xE1\xCB\x5D\x51\x76\x25\x52\x3E\x88\x4E\xDE\x64\xF2\xE5\xDD\x00"
"\xFE\x9C\x0F\x36\x03\x3A\x08\x42\x38\xB6\x15\xAB\xAD\x8E\xF8\xF9\x12\x44\xF6\x12\x01\x1D"
"\xE0\x4D\xBD\x18\x28\x26\xDC\x0E\x81\x63\x5E\xDE\x5F\x6C\xB1\x5E\xCD\xE4\x5F\xAA\x28\x8E"
"\x34\x76\x63\x45\xCE\x53\x19\x16\x09\x5C\x9E\x59\x68\x0E\x09\x69\x96\x23\xBC\x02\x5F\x67"
"\xE6\x22\x6C\x26\xDE\xA6\x5C\xE4\xBE\xCD\x08\xDB\x0A\x99\xD0\x48\x5C\x62\x4E\x57\x49\x85"
"\x61\x72\x16\xA8\xB3\xF9\x10\x75\x0E\xDC\xFE\xD5\x5F\x51\x7D\x67\x0C\x8D\xE7\xC4\x95\x0D"
"\xDA\xB8\x43\x5A\xAE\x15\xDA\x0D\xE6\xEF\x5D\xBC\x20\xFE\x92\xC8\xA5\xE7\xD1\x15\x93\x46"
"\xAE\xDE\x40\xB9\x5A\x81\xBE\xDA\xFD\x19\x5E\xA2\xF0\x9A\xED\x08\x06\x96\xB1\x1B\x53\x0E"
"\x4A\x73\xAC\xD4\x00\xB2\x68\x4F\xAD\x8D\x10\x66\x68\x7F\x36\x28\x8E\x76\xE4\x8F\x1D\xBD"
"\x43\xCD\xA5\x66\x96\xE4\x90\xCB\xDA\x48\xEE\x88\x1C\x11\x06\x0A\x2E\xDF\x74\x39\xDC\x93"
"\x86\x52\x45\xDE\x5A\xB2\xA5\xB9\x7E\x86\xE9\x6C\x96\xE9\x6D\xBE\xE3\x26\x4E\xDB\x2D\x89"
"\x2D\x79\x7D\x66\x8F\x16\x5F\x73\xAC\x8F\x7B\xC9\x11\x1E\xE1\x91\x0E\x65\x5B\x8A\x48\x6A"
"\xA5\xD6\x11\xA6\xD6\x69\x81\x78\x6A\xA8\x96\xEA\x99\x76\x88\xAA\x56\xEA\xAB\xFE\x26\x13"
"\x46\xE1\xD2\x55\x61\x83\x4D\x69\x3E\xF6\xCB\xC9\xB5\x5D\x6B\x3E\xE0\x62\x5E\xA0\x9E\xAE"
"\xE8\xFB\x5D\xBD\x9D\xC6\x56\x66\x46\xEB\x8D\x96\xBC\xA1\x86\x61\x74\xFB\xDF\x92\x36\xE9"
"\x6F\x8C\xE9\x9C\x2E\xE4\x01\xD6\xEB\xDD\x21\xE9\x9D\x5A\xE5\xB7\x0D\xEC\xB3\x1B\x6C\xA3"
"\xDE\x6B\x2C\x0E\xE9\xBB\x56\x9A\xF4\x5D\xDF\xF5\x85\xD6\x4A\xEE\xD8\x92\xCA\x65\x80\xBE"
"\xD3\xBA\x4E\x90\x98\xCD\x6C\x57\xAE\x0F\xCE\x6E\x2E\x12\xBA\x68\xB3\x76\xEB\x27\x76\x1D"
"\xDB\x35\x6D\x76\x65\xEC\xD4\xA6\xEB\xD2\x66\xE6\x93\x1A\x88\xAF\xB9\x5B\x91\xCE\xA4\x6E"
"\x45\x56\xB8\x1D\xE0\x09\x4A\x4F\x28\x5C\x6B\xB7\xC6\x5F\xDE\x3E\xA2\x45\x4D\xE6\xFD\xB8"
"\xED\xDF\x2E\xEB\xB7\x56\xEB\xB4\x3E\x6E\xF9\xA5\xE6\x6A\x3D\x66\xAA\x90\xBF\x1B\xAA\x69"
"\x45\x65\x6B\x7F\x22\xEA\xF5\xA4\x6D\x8E\xBD\x6E\xEB\x66\x65\xE1\x4A\x54\x91\x6D\xED\x5E"
"\x16\xE7\xD3\xBE\xDF\xF1\x56\xED\x88\x31\xEF\xF0\x4E\x6E\xBB\x86\xE7\x00\xFD\x5B\xC7\xC6"
"\x64\x29\xA6\xE8\x6A\xEE\xBB\x83\xDE\xEE\x70\x3E\x9B\x20\x51\x65\xB3\xC8\xEF\x85\xD8\xEF"
"\x5E\xE2\xA4\xFF\x8E\x6F\x55\x14\xF0\x53\xD6\x66\xB7\x3D\xDF\x8E\xCE\x61\xAC\x1E\xD6\x4E"
"\xAD\x6E\x88\x4D\x70\x23\x3E\xF0\xA1\x7B\xF0\x75\xAE\xF0\x79\xAE\xE1\xB5\x02\xED\x50\x2D"
"\x37\x5D\x26\xD7\x0B\xD7\x59\x5F\xBD\xDC\x54\xBA\xBC\x11\x6F\x6A\x11\xD7\x5E\x2A\x7E\x6E"
"\xB5\xAC\x5A\x8D\xFE\xE6\xEC\x5E\xEC\x4E\xF9\x49\x2F\xEE\x6E\xD6\x55\x1A\x17\x27\xEB\xC4"
"\x1D\x6D\x75\xD5\x54\x95\xEE\xF1\x1C\x5F\x4D\xB8\xE6\xE9\x09\x7F\xE5\xE5\x5D\x6C\x6F\x4E"
"\xE5\xD7\x06\xC2\xF9\x26\x68\x3D\xF6\x92\xC3\x86\x58\x3F\xB6\xC8\x9D\x5D\x5D\xFD\xB9\x62"
"\x5C\x54\xE3\x9D\x7E\x0C\x98\xFC\x23\x1F\x6A\xE3\x88\x54\xE4\x2D\x87\xE2\x2E\x07\xA9\x2F"
"\xA7\x6F\x12\xA6\xF1\x1F\x1F\x72\x21\xC7\x6D\x35\x6F\xE5\x06\x57\x71\x28\x9A\xEE\x22\x67"
"\xE5\x39\x77\x6E\x39\x1F\xEB\x1B\xC7\x73\x10\x5F\x62\x21\xF7\x5D\x88\x65\x0E\x1F\x9E\xDF"
"\xBE\x6E\x6F\x8D\xE5\xA4\x1A\xE0\x04\x9E\x2C\xEE\xD6\x58\xF4\xA2\xF6\x6D\x46\x17\xEE\xE1"
"\xF2\xA4\x55\xC1\x3A\x25\xE6\x22\x74\x29\x67\x6E\xD6\x0B\x4C\xB7\xF0\x74\xBA\xF2\x4C\xFF"
"\xA8\x4F\xD7\xE0\x89\x81\x60\x1F\xF7\xCB\x2B\xAF\xD9\xC5\xD8\x8F\xE5\x30\xE3\x50\xD7\xA4"
"\x16\x77\x75\x90\xBE\x73\x4F\x7F\xF5\x6E\x1E\x0D\x54\x0F\xF2\xB2\x35\xA4\xED\xF1\xEA\xAF"
"\x4E\xBE\xB0\x2E\x73\x6F\x92\x8D\x0C\xFF\x68\x7C\x29\xAB\x85\xC4\xDC\xD0\xA8\x11\x1D\xB5"
"\x51\xCB\xA0\x91\xC4\x01\x52\x67\xF7\x48\x68\x7F\x51\x40\xB5\xD0\x67\x67\xF6\xE6\xDC\x2D"
"\x09\x31\x81\x03\x53\xEC\xDA\xEE\x88\xD7\x04\x98\x94\xEC\x3F\x74\x11\xF7\xA7\x2C\xF7\x95"
"\x38\x77\x72\x37\x68\xB2\x7E\xDF\xBD\x61\xF7\x0C\x25\x28\xBE\x14\xC6\x47\x72\x5F\xC6\xE6"
"\x6F\x6A\xD2\x64\x74\x1E\xD6\x7B\x1F\x4B\x3A\x3E\x08\x7F\x07\x66\x80\x97\x52\x16\xF7\xE5"
"\x7E\xB7\x9E\xB1\x9C\x12\x38\x2C\x03\xD5\xD1\x67\x36\x9D\xD2\x78\x1E\x68\xEB\x4A\xC5\x6D"
"\xF8\xC5\x52\xCD\xE3\xB2\xF5\x64\xD2\xFC\xC2\x8C\x07\xEE\xC3\x01\x1D\x10\x65\x98\x7B\x21"
"\x1F\xA1\xB4\x4A\x87\xE0\xBB\xFA\x39\x79\x81\x48\x79\x97\x7E\x69\x94\x0F\xBB\x95\x0F\x88"
"\x96\x97\x75\x00\xF7\xC8\xAD\x8E\x4F\xED\xF6\x8A\xE4\x19\xC8\xE6\xBE\xDD\x6B\x0C\x41\xCC"
"\x16\x5E\x04\x56\x1E\xAA\x50\x3B\x53\xE4\x79\xA3\xB7\x42\xA4\x2F\xFA\xEA\x1C\xFA\x9D\x6F"
"\xFA\x72\x4D\x73\x85\xA3\x03\x33\xB8\x47\xA8\x8C\xAD\xFC\x68\xE1\x17\xF6\x6B\x2F\xA1\xCE"
"\x23\xCE\x77\xC4\xAD\xF7\x89\x49\x70\x73\xEE\x6E\x7E\x37\xDF\xDD\xBA\xD0\xF4\x33\x7B\x79"
"\x66\x46\xB1\x1F\xFB\x0E\x89\xF0\xB6\x4F\x70\x28\x07\xE5\xF0\x05\xF4\xF1\xC1\x7A\xA2\xC1"
"\xA0\x04\xBF\x50\xB7\xE7\xFB\xC2\xBD\x7B\xB9\xE7\x4E\xA9\xAC\xDC\x73\x5C\x71\x18\x47\xDE"
"\x40\x6F\x72\x40\x6E\xFC\x3E\xCE\x7B\xC6\xA8\x63\x81\x86\x73\xD8\xF2\x78\x00\x9D\x6A\xC8"
"\x88\x70\xE6\x26\x7C\x43\xED\x7C\x62\x1D\x5F\x37\x67\x70\x7C\xD7\xBB\x86\xF6\xE0\x82\xFE"
"\x4B\x23\xCF\xF2\x1D\x9E\xFA\x5D\x8A\x7C\x64\x7E\x7C\x9C\xE5\xAD\xAF\xF7\x79\x85\x7C\x5E"
"\xB5\xF3\x5E\x33\x8F\xE6\xD0\xEF\x65\x9B\xFE\x65\x99\x0F\x27\x1E\xD4\xDB\x2E\x8E\xE0\x1B"
"\xEE\x43\xC6\x3F\x7E\xD7\x4F\x7E\xF8\x42\x21\xCD\xBE\x15\x88\x89\x25\x2A\xCF\xE2\x72\x6A"
"\xF7\x3E\xFF\xAA\xE8\xF7\x55\x00\x81\x7E\x59\x92\x76\xB1\xC4\xFE\xCA\xFF\x6B\x45\xFA\x7E"
"\x27\x97\xA0\xD0\x17\x79\xC0\x89\xCD\x07\x3E\x7C\xD8\xFE\xAA\x15\xD5\xFE\xA1\x0D\x7C\x0A"
"\x1D\x7C\xD4\x97\x77\xFA\xC7\xAD\xCE\xEC\x4D\xFB\x90\x5E\x1A\x69\xD5\xC4\xD8\x7F\x8F\x2C"
"\x03\x20\xA0\xC0\x81\x04\x0B\x1A\x24\x28\x67\xDE\xBF\x85\x0C\x1B\xFE\xD3\x06\xF0\xA0\xC4"
"\x89\x08\x15\x3A\x74\x08\x91\xA2\xC6\x82\x8C\x2E\x3A\x9B\xB0\x31\xA4\xC8\x59\x17\x19\x6A"
"\xAB\x31\xC4\xE2\xC2\x79\x43\x44\x8A\x4C\x58\xB2\x61\x2D\x90\x2E\x43\x92\x8C\x79\x32\x65"
"\x43\x96\x35\x29\xDE\x2C\x99\x53\xE5\x3F\x9E\x3D\x25\xFE\xBC\x18\x74\x67\xCB\xA2\x07\x8F"
"\x62\x44\x29\x94\x28\xD3\x82\x43\xB4\xC5\xDC\xE9\x88\xE6\xD4\xAD\x5C\x35\x76\xBC\xBA\x52"
"\x4E\xD7\xB1\x02\x6B\xD4\x8A\x39\x2F\x2B\xD9\x80\x4E\xC1\x36\xFC\x48\xB6\xAD\xDB\x85\x70"
"\xC7\xCA\x9D\x5B\xB7\xEB\x5D\xB7\x79\xD7\xFA\x75\xA9\xF3\xEA\xBC\x6D\xA9\x90\xFC\x3D\x68"
"\xE2\x54\xCC\x73\x62\x0F\x13\x4C\xBC\xB8\xB1\x63\x81\x90\x4B\x32\x9E\x3C\xB0\xF2\xC5\xCB"
"\x7F\x27\x38\xBB\x38\x0B\x33\x45\x40\x42\x87\xCA\x01\x19\x98\xAE\x56\xBF\x66\x71\x1A\xC6"
"\x4C\xDA\xE1\xBC\xD3\x00\x52\xFF\xEB\x3B\x36\xF6\x4E\xDA\xB6\x71\x77\xD5\xCD\x70\x36\x6A"
"\xA1\xBE\xB9\x02\x0F\x3B\xFC\xED\xEA\xB1\x13\x1C\x95\x66\x78\x4E\xAD\xE8\xE9\x1B\x5B\x97"
"\x4C\xBB\x9C\x7A\xC8\x1A\xE6\x18\x9E\x32\x63\x42\xBB\xF8\xF1\xE4\xCB\x9B\x3F\x8F\x5E\x20"
"\x12\x3A\xB6\x6C\xD1\xB9\x92\x7D\xFA\xFA\xF6\xEF\xE3\x8B\x9E\xEF\x1E\x7E\x79\xFC\xF5\xD3"
"\x9B\xBF\xE2\x88\x7B\x35\xF8\xB7\x5E\x2A\xF9\xD9\x77\x18\x80\x02\x9E\xA7\x20\x1D\x03\xFE"
"\x17\xA0\x83\x0C\x46\xF8\xA0\x79\x26\x98\xC1\x89\x2D\xA9\xD0\x81\x04\x82\xFE\xDD\x47\x87"
"\x81\x82\xE8\xF7\xE1\x44\x3F\x15\x57\x62\x8A\x2A\xAE\xC8\x62\x8B\x2E\xBE\x08\x63\x8C\x32"
"\xCE\x48\x63\x8D\x36\xDE\x88\xA3\x8C\x5F\x0D\xE5\x45\x8E\x3E\xFE\x08\x64\x90\x42\x0E\x49"
"\x64\x91\x46\x1E\x89\x64\x92\x4A\x02\x56\xDA\x49\x4B\x3E\x09\x65\x94\x52\x4E\x49\x65\x95"
"\x56\x5E\x89\x65\x96\x00\x94\x21\x4C\x69\xE6\x88\xA0\x65\x98\x62\x8E\x49\x66\x99\x66\x9E"
"\x89\x66\x9A\x35\x4E\x70\x94\x54\x6A\xBE\x09\x67\x9C\x72\xCE\x49\x67\x9D\x76\x06\xB9\xE3"
"\x3F\x5F\xDE\xC9\x67\x9F\x7E\xFE\x09\x68\xA0\x82\xD2\x69\xC2\x26\x0E\x85\x36\x68\xA2\x8A"
"\x2E\xCA\x68\xA3\x8E\x3E\x4A\xDE\x71\x26\x81\x09\x69\xA5\x96\x5E\x8A\x69\xA6\x9A\xDA\x99"
"\xA7\x77\x1E\x6E\x0A\x6A\xA8\xA2\x8E\x4A\x6A\xA9\x2C\xEE\x38\x8F\x30\x65\x7C\x6A\x6A\xAB"
"\xAE\xBE\x0A\x6B\xAC\xB2\x0E\x34\x81\x0E\xAC\xCE\x8A\x6B\xAE\xBA\xEE\xCA\x6B\xAF\xBE\xFE"
"\x0A\x6C\xB0\xC2\x0E\x4B\x6C\xB1\xC6\x1E\x8B\x6C\xB2\xCA\x2E\xCB\x6C\xB3\xCE\x3E\x0B\x6D"
"\xB4\xD2\x4E\x4B\x6D\xB5\xD6\x5E\x8B\x6D\xB6\xDA\x6E\xCB\x6D\xB7\xDE\x7E\x0B\x6E\xB8\xE2"
"\x8E\x4B\x6E\xB9\xE6\x9E\x8B\x6E\xBA\xEA\xAE\xCB\x6E\xBB\xEE\xBE\x0B\x6F\xBC\xF2\xCE\x4B"
"\x6F\xBD\xF6\xDE\x8B\x6F\xBE\xFA\xEE\xCB\x6F\xBF\xFE\xFE\x0B\x70\xC0\x02\x0F\x4C\x70\xC1"
"\x06\x1F\x8C\x70\xC2\x0A\x2F\xCC\x70\xC3\x0E\x3F\x0C\x71\xC4\x12\x4F\x4C\x71\xC5\x16\x5F"
"\x8C\x71\xC6\x1A\x6F\xCC\x71\xC7\x1E\x7F\x0C\x72\xC8\x22\x8F\x4C\x72\xC9\x26\x9F\x8C\x72"
"\xCA\x2A\xAF\xCC\x72\xCB\x2E\xBF\x0C\x73\xCC\x32\xCF\x4C\x73\xCD\x36\xDF\x8C\x73\xCE\x3A"
"\xEF\xCC\x73\xCF\x3E\xFF\x0C\x74\xD0\x42\x0F\x4D\x74\xD1\x46\x1F\x8D\x74\xD2\x4A\x2F\xCD"
"\x74\xD3\x4E\x3F\x0D\x75\xD4\x52\x4F\x4D\x75\xD5\x56\x5F\x8D\x75\xD6\x5A\x6F\xCD\x75\xD7"
"\x5E\x7F\x0D\x76\xD8\x62\x8F\x4D\x76\xD9\x66\x9F\x8D\x76\xDA\x6A\xAF\xCD\x76\xDB\x6E\xBF"
"\x0D\x77\xDC\x72\xCF\x4D\x77\xDD\x76\xDF\x8D\x77\xDE\xE5\x22\x21\x48\x7B\x7E\xDB\x22\xDD"
"\xA3\x66\x6D\xB3\x8D\x64\x01\x0D\x5E\xF8\x78\x35\x98\x61\xC6\x6B\x00\xE8\x00\xF9\xAD\x39"
"\x36\x47\x78\xE0\x00\x50\xBE\xCD\x29\x92\x4F\xD6\xE9\x6D\x9B\xEB\xDD\xF5\x04\x9B\x3C\xB7"
"\x10\xA2\x8F\xDA\xD6\x63\x40\x22\x74\xC7\x10\x23\xD4\x1D\xA7\xCD\x10\x3B\x9A\x6E\xA4\x67"
"\x0D\x99\x6E\x3B\x43\x28\x52\x97\x7B\x43\xAE\xBF\x8A\x04\xE3\x66\x90\xB8\xAD\x09\x57\x08"
"\xDF\x21\xDB\xBD\x97\xF4\x3B\x66\x3A\x08\x7F\x45\x78\x53\x2E\xFF\x8F\xE9\x4E\xED\xDE\x15"
"\xF5\x2B\xA9\x94\xFA\x91\x9D\xEE\x09\x80\x17\xB2\x2D\x65\xDE\xEA\x17\x75\x7F\xDE\x04\x57"
"\x18\xB8\x8D\x33\xB6\x08\x22\xBD\x76\xE6\x5F\x04\x3E\x66\x13\xC8\x71\x0E\x50\x8E\xAF\x35"
"\xBF\x43\x84\xBB\xF7\xB9\x9E\x68\x6F\x2E\x6E\xE2\x4A\xE7\x08\x48\xBE\xBF\x98\x85\x74\x19"
"\xF9\xCB\x01\x19\x42\x38\x61\xD0\x21\x80\x21\x19\xE0\x5C\xAA\x67\xB0\x07\x32\x04\x7D\x7E"
"\x29\x83\x55\x2E\x22\x1C\xF2\xAC\x4F\x18\xDB\x10\x46\x2A\xAE\x30\x1D\xDB\x78\x0E\x00\xFD"
"\x53\xCD\x64\x2C\xA8\x14\x24\x51\x0F\x7C\x4E\x29\xE0\x78\x54\x68\x43\xF1\x78\xF0\x2A\x4E"
"\xA2\xCE\x03\x73\x48\x96\xE6\x90\xAE\x21\x9A\xF3\x8B\x0A\x81\x12\x91\xC3\xB4\xF0\x82\x7A"
"\xA2\x54\xF6\x3E\xC3\x44\x86\xD4\x6F\x2D\xD6\x01\x4B\x11\xD7\xB2\x17\xA4\x24\x91\x2C\x4B"
"\x8C\x62\xF3\x04\xB6\xC4\xE8\x20\x01\x72\x3A\x70\xCC\x0E\xC1\xD2\x43\xD1\x54\x51\x36\x57"
"\x3C\x8C\x0A\x7F\xB7\x44\xDA\x39\x50\x36\xC2\xC8\x5F\x43\xA6\x48\x24\xEA\xD5\xC5\x29\x78"
"\x1C\x8F\xF8\x1C\xD2\x47\xEA\x9C\x11\x2C\xF3\xE0\xA0\x12\x59\x07\xC2\x04\xB2\xE6\x83\x73"
"\x91\x23\x57\xFE\x78\x41\xEC\x31\xE5\x88\x78\xA1\xE0\x41\xBA\x58\xC9\xBF\x48\xEA\x2A\x92"
"\x14\x09\x0C\x63\x72\x0A\x23\x0E\x71\x2E\x86\xFC\x17\x24\x5D\x68\x3F\xC5\x5C\x10\x88\x64"
"\x81\x09\x21\x15\x19\x44\x28\x2E\xA4\x7E\x6D\x82\x25\x59\x6C\x33\x0B\x9A\xE4\xA9\x93\x39"
"\xEA\x54\xF7\x4E\xF9\x8F\x2F\x96\xA7\x73\xBC\x5C\xCB\x04\x54\xB9\x4A\x5B\xAE\x45\x83\xFF"
"\x28\x65\x57\xBC\x30\x4A\xE6\x61\x31\x8A\x4D\xFC\x0B\x30\x99\x28\xCC\xAD\x50\xD2\x2D\x8E"
"\xE4\x0A\x32\x99\xD8\xCD\xA2\x60\xD2\x2D\xD9\x9C\x0A\x33\x5F\x59\x30\xA7\x38\x33\x88\x59"
"\xF4\x88\x25\x37\x72\xCE\x86\xAC\x73\x2B\x13\x38\xCB\x3F\x6A\x51\xA1\xCB\xA9\xD2\x19\xF9"
"\x9C\xA3\xEE\xB4\x92\xA7\x70\x0E\x29\x36\xB1\xAB\xC8\x3F\xCE\xB1\xC5\xF2\x68\xAF\x9C\xF6"
"\x93\xE5\x5B\xFC\x56\x1A\x81\x76\x65\x9C\x0B\x99\x27\x53\xAE\x99\xC9\x27\x52\x73\x85\xD3"
"\xDC\x68\x33\xD7\x82\xD1\xB9\x30\x94\x29\xED\x04\x4A\x3F\x2F\xEA\xD1\xA1\x28\xB3\x27\x25"
"\x8D\x49\x31\xED\xB5\xBC\x40\x76\x94\x9A\x23\xDD\x4A\x48\x63\x92\x4B\x25\x2D\xEF\x8B\x47"
"\xB1\xA8\xA5\xBA\xE8\x53\xFE\x31\x12\x39\x08\x89\xA1\x63\xCE\x59\xD3\xA2\x6C\xF3\x2A\x6D"
"\xE4\x0A\x45\xAF\x92\x54\x97\x7C\x12\x2D\x2B\xED\x49\x3C\x13\xB9\x4C\x8F\xBE\x94\x22\x07"
"\x24\x5C\x34\x25\xEA\x49\x87\x46\x51\xA6\xFD\x6A\xE1\x56\x6B\x72\x55\xFA\x39\x31\x96\x5E"
"\x7C\x52\xFF\xA4\xD2\x3B\x56\x62\x4A\x85\xE0\x53\x5F\x2A\x36\x14\x3F\x63\x8A\x15\x45\x3D"
"\x75\x4C\x0B\xCD\x91\x8A\x43\xF9\xC5\x82\xFC\x0C\x88\xE8\xC2\x22\xCA\xF1\x01\x20\x31\xA4"
"\x23\x6B\x4D\xBA\x28\x07\x32\x4A\x56\xB2\x79\xE5\x8A\xF6\x36\x31\xD9\xCC\x96\xF1\x96\xA4"
"\xC3\x8E\x61\x0D\xB5\x90\xA8\xBA\xA4\x2D\xB4\xAB\x81\x58\x51\xC9\x15\x13\x68\x96\x8C\x80"
"\xB8\x4E\x55\x2D\x7B\x85\x0C\x8D\xC8\x3C\x13\x30\x83\x88\xF6\x87\x1E\xBB\xBA\xA7\xB2\x8E"
"\x51\x9F\x6C\x51\x68\x1E\x5C\x62\x86\x92\x3D\x34\x6D\x49\x82\xEA\x12\x8C\x42\x44\x07\x48"
"\xB0\xE7\x6C\xA0\x94\x1A\xA9\xF4\xCF\xB1\x97\xBA\x66\x68\x8C\x8B\x91\xD7\xA2\xF5\x50\x08"
"\x3A\xA5\x68\xAD\xEA\x10\x46\x74\x0A\xAC\xDB\x2D\x89\xE1\x02\xC2\x88\x82\xFA\xE5\x9A\xF5"
"\xA3\x24\x72\x35\x82\x43\xED\xF2\x0F\x91\x1B\x14\xCF\x00\xD3\x28\x90\x84\xC8\x37\xAC\x17"
"\x11\xA6\xF6\xA8\xDB\x15\xF7\x4E\x06\x09\x43\x5D\x89\x5A\xD4\xF9\x97\x41\x06\x07\x10\x6C"
"\x31\xEA\x33\x05\x0B\x80\x35\x2E\x44\xBD\x87\x21\x30\x08\x0F\xEC\x90\xF7\xD6\x04\x98\xDF"
"\x15\xE0\x69\xAB\xB7\x9A\x2E\x92\xB7\x26\x6D\xE9\x8B\x7E\xA3\x14\x5D\xF2\x9D\xF2\xAC\x31"
"\x5A\xAA\x3C\x53\xD4\x16\xF1\x0A\x46\xC3\x13\xE9\x8D\x87\xFA\x37\xE2\xC7\xD2\x97\x25\x9D"
"\x62\xF1\x25\xE9\x5B\x5F\xF1\x90\x96\x20\x18\xED\x30\x45\xAE\xE9\xE3\x49\x96\x46\xAE\xEB"
"\x2D\x09\x80\xB9\x08\xE4\x8F\x12\xA4\x73\x4F\x9E\x0A\x26\x73\x5C\x93\x63\x82\xC5\x19\x56"
"\x88\xCA\x7E\xAB\xF3\x61\x86\xCC\xC2\x36\x55\xD6\x88\x53\x42\xE3\x4A\x10\xD2\x58\x23\x5A"
"\xE6\x64\x97\x1D\x6C\xCD\x0C\x4F\x06\xA3\xBE\x29\xF1\x3B\x0D\x42\x3D\x26\x2F\xC9\x36\xBF"
"\x5B\x1E\x96\x6B\x52\x03\x6D\x48\x34\x25\x46\xE6\x6A\x32\x4B\x94\x67\x3B\x5E\xA5\xCC\x12"
"\x89\xE9\x5A\x0D\x82\xE3\xC3\xF4\x78\x02\x93\x26\xCB\x01\x0B\x4D\xCF\xD3\x0A\x53\xC4\x71"
"\x01\x0D\x79\xD8\xFB\xE8\x17\x7E\x78\xCD\x53\x01\x35\x47\xD4\xDA\xD0\x92\x24\x79\x22\x22"
"\x28\xF0\x05\x19\x5D\xE3\x68\xBA\xF4\xCE\xB4\x12\xEB\x2C\xCE\x09\x6B\x56\xBB\x7A\x2E\xB9"
"\x0E\x49\x9E\xF4\x4C\x52\xAC\x9E\x1A\x90\xA1\xB6\x32\x90\x7B\x3D\xA4\x25\x3A\x43\xD3\x8E"
"\x71\x25\x43\x75\x43\x6A\x83\xB4\x74\xD5\xF3\x4D\xE9\x9F\x0F\x02\x4C\x9F\xF6\x0F\xD3\x14"
"\x59\x62\x8F\xBE\x57\xEC\x9E\x74\x11\xD9\xE2\x8C\x32\x07\xB5\x47\x6D\xC3\x32\x7B\x3C\x9D"
"\xBB\x76\xA9\x4B\xE2\xEE\xAD\x10\x33\x3B\x76\xC6\xCC\x01\xC9\xDD\xE8\x30\x73\x93\xB3\xD6"
"\x86\x72\xBF\x99\xA3\x6F\xB0\xC4\xDB\x26\x77\x0C\x37\x57\x8E\x58\x9C\xCE\x01\x3B\x24\xCA"
"\xA6\x75\x90\x4A\xBA\x70\x4F\x82\x36\xC8\x02\x69\xF3\x4A\xBE\x9C\xEF\x0B\x0E\xFC\x2F\x2E"
"\x5E\xB4\xC1\x09\xFE\x4F\x8D\x94\x81\x7B\xFE\x94\x22\x98\x80\x89\x6F\x81\x14\x99\x3C\xF1"
"\x2D\x48\xBD\x9D\x1A\xE5\x4D\x08\x6F\xE6\x8C\x03\xAE\x5E\xFB\x2B\x1E\x85\x63\x5C\x2F\x9E"
"\x26\xC8\x11\x37\xAE\x11\x8C\x46\x7C\xB4\x29\x0D\xE6\x58\x9E\x0A\x16\x6E\x1B\xA4\xE3\x31"
"\x49\x79\x83\x53\xAA\x74\x36\x3B\x34\xDD\xD8\x3E\x6E\xD5\x15\xEB\x6F\xE5\x68\x49\xE8\x8A"
"\x76\x7A\xAD\x1D\xD2\x97\x40\x43\x18\xE6\x17\x8C\x76\x9C\x71\x22\x08\x3A\xEC\x7A\xE8\x54"
"\x11\x8A\x33\x6B\xE0\x08\x67\x2C\x79\xE7\xDD\x06\xF2\xEF\x80\xC9\xF6\xA6\x08\x5B\x3C\xA6"
"\x26\xC8\xCB\xB5\x29\xEB\xB1\x67\xFD\xA1\x7F\xFB\x9B\x23\x6E\x0E\x76\xAD\xD4\x96\xE6\x33"
"\xC7\x6D\x51\x16\x4A\x10\xB1\x9F\x6F\x32\x02\x3E\x4C\x48\xE7\x51\x0B\x0C\x0D\xD1\xEC\x03"
"\xB9\xCB\x3C\x38\x61\x86\x5A\x74\x96\xEE\x07\xD1\xA0\x36\xD2\xBE\x76\xD2\x13\x19\x2D\x99"
"\xE7\xC4\xE6\x29\x2F\x14\xA0\x9B\x08\xD5\x06\xD1\x79\xB5\xB5\xAE\xA5\x34\xDF\xB3\x06\x3B"
"\xA2\xBA\x40\xE8\xBA\x56\xDD\x73\xF4\xE0\x84\x2B\xFE\x36\x14\x1D\x1C\xD5\xFF\xE5\x2E\x92"
"\x19\x20\xE7\xF3\x84\x47\x09\x13\xDB\x2F\x9D\x22\xCA\x35\x39\xAF\x6E\x77\x92\x67\xC8\x2E"
"\xD7\xBE\x01\x37\x1A\xF5\x83\x30\xDD\x77\xB7\x27\xBF\xCA\x93\x3E\x51\x73\x07\x84\xB9\xA2"
"\x57\xB5\xC3\x7F\x2C\xCD\x43\x96\xA4\x8D\x6C\xDA\xFB\x54\x28\xB9\x09\xAD\x70\x87\xF6\x3C"
"\x37\x6F\xC5\x47\x4D\x76\x17\x41\x7F\xA7\x95\x77\x1B\x41\x3D\xD8\x77\x10\xE8\x66\x1F\xB6"
"\xC7\x15\x65\xD0\x1E\x1F\x66\x7C\x84\xE3\x0C\x1F\x27\x43\xC7\x43\x3C\xCD\x36\x77\x03\x41"
"\x65\x14\x68\x53\xFC\x97\x1E\xCE\xB7\x7A\x38\xC7\x14\x7E\x46\x2B\xDF\x34\x6B\xE5\x57\x3A"
"\xE7\x27\x67\x01\x68\x7E\xF6\xB5\x6E\x5F\x97\x78\xFD\x17\x45\x08\x18\x82\x33\xB8\x16\x47"
"\x84\x3E\xCC\x84\x80\x37\xE5\x16\x05\x28\x75\xF0\xC6\x39\x40\x58\x83\x26\x27\x83\x2D\x28"
"\x10\xF3\x06\x70\x56\x37\x10\x2B\x27\x6F\x42\xB8\x84\xDE\xB7\x16\x3A\x70\x0A\xA5\xE1\x7B"
"\x05\xD1\x45\x23\xD5\x16\x29\x87\x74\x31\xC8\x28\x16\xF7\x62\xD9\x87\x75\x41\x28\x78\xE9"
"\xC1\x69\x3E\xF7\x1C\x51\xD7\x42\xDD\xD3\x6A\x96\x81\x7C\xB2\x37\x65\x93\x17\x10\xD7\x14"
"\x7E\x01\x81\x83\xE4\x01\x54\x05\xA1\x3D\x6E\x38\x55\x61\x68\x69\xD4\xE4\x83\x06\x71\x4D"
"\x70\xA5\x6F\x4E\x97\x56\x70\x78\x18\x72\xE1\x75\x78\x78\x5A\x7D\xD4\x6E\xE9\x07\x85\x02"
"\xC1\x7D\x8E\x38\x86\xB5\x71\x86\x99\xE6\x81\x4F\x77\x3B\x33\x65\x7F\x89\x15\x5E\x09\x78"
"\x5A\xE9\x36\x7E\x62\xE6\x28\x72\xD1\x3C\x20\x98\x6A\x9D\x58\x22\x75\x68\x86\x22\xA8\x54"
"\x2A\x51\x57\x62\x55\x0B\xAF\xD1\x57\x83\x87\x5A\x72\x18\x60\xCF\x41\x83\x22\xD1\x72\x04"
"\x71\x85\x92\xC8\x44\x89\x08\x86\xBF\xC8\x81\x22\xC1\x80\x2C\x14\x65\x21\xC7\x15\x2D\x25"
"\x1B\xE7\x95\x55\x9B\x78\x83\x95\x48\x10\x90\x77\x70\xD0\x08\x83\x46\x08\x78\x86\xF8\x7B"
"\xD4\xD8\x8A\xAC\xF8\x7F\xDC\xB8\x15\xE3\x84\x5F\x67\xB7\x82\x56\x18\x65\x6E\x58\x88\xA1"
"\xD5\x28\x79\x38\x10\x65\x88\x19\x4B\xF4\x87\x4D\x36\x7D\xAB\x38\x8E\x3D\xB1\x62\x34\x71"
"\x4A\x82\x98\x7C\xCD\x28\x13\x33\xE7\x08\x3D\x77\x8D\xF3\x48\x1D\x7D\xF7\x84\xD8\xA8\x64"
"\x17\x21\x0C\x85\x67\x78\xEF\xB7\x8E\xC7\xC8\x49\x0A\x89\x5E\xFC\xB7\x54\x7A\x18\x70\x25"
"\x81\x4F\x73\x16\x13\xB9\x58\x7B\xCE\x78\x87\xDF\xC7\x87\x74\x98\x81\x63\xB1\x81\x6D\x47"
"\x90\xE5\x05\x67\xAA\xA3\x7E\x63\x71\x44\xCF\x25\x1A\x81\xA8\x4C\x47\x34\x87\x00\x20\x07"
"\x7F\x83\x7C\x43\x81\x90\xCA\xF7\x26\x0D\x37\x10\x2A\x54\x85\x12\x21\x90\xFE\xF1\x77\x2A"
"\x08\x90\x2E\x11\x50\xC1\x68\x74\xD9\x48\x84\x47\xC7\x90\x02\x77\x8B\x23\x29\x1A\x3F\xF9"
"\x90\xF1\xD8\x84\x50\x49\x1D\x47\x74\x90\x08\xD9\x1E\x0C\xA6\x8F\xF9\x78\x38\x7E\xD3\x25"
"\xA8\xF8\x8D\x49\x89\x14\x27\x85\x82\xAD\xD3\x94\x8F\xE8\x91\x1D\x59\x14\x59\x18\x6A\x3D"
"\xB9\x15\x4E\x19\x3E\x4A\x18\x6C\x5C\x98\x93\x1F\xF9\x60\x27\x68\x91\x68\xF9\x94\x25\x59"
"\x84\xC3\x07\x29\xB6\x51\x40\x28\x37\x8C\x1C\x99\x89\x88\x76\x5A\xDD\x54\x8C\x2C\x35\x98"
"\x69\x38\x90\xA8\x25\x98\xD4\x04\x8A\xDA\x38\x1D\xD2\xB8\x90\x66\x99\x96\xFE\xA8\x1D\x6C"
"\x89\x19\x2C\xB9\x74\xA5\xB1\x83\x96\xB1\x0D\xCF\x01\x8C\xD1\xF8\x61\x6E\x38\x11\xEA\x58"
"\x10\x98\x89\x98\x52\x99\x97\xC8\x68\x59\x85\x99\x91\x78\x59\x41\xAE\x39\x6C\xB8\xD7\x15"
"\x8B\x23\x08\xC2\x10\x7F\x8E\xA1\x99\x8A\x78\x89\x2C\x88\x8E\xD5\xD5\x91\xE0\x16\x99\x2F"
"\xE8\x1F\xBD\x28\x9A\x94\x39\x12\xE6\xC7\x67\x65\x31\x54\xA4\x69\x8C\x29\xA5\x85\xE5\x38"
"\x1E\x1B\xA9\x81\x70\x39\x15\x92\xA9\x1D\x6E\x79\x97\x5E\xB9\x98\x17\xD7\x15\x48\xE8\x92"
"\x93\x21\x17\x3B\x09\x69\xD2\xD9\x7D\x93\x58\x99\xAA\x09\x00\x91\xE8\x9B\xBF\x59\x8D\xAC"
"\x29\x6E\xE6\xE9\x77\x96\x89\x78\xA2\x08\x7B\x4C\xC9\x84\x59\xA9\x52\x98\xD2\x88\x9D\xE7"
"\x8D\x6E\x44\x97\xFE\xB1\x8B\xDD\x49\x96\x53\x71\x14\xBF\xA3\x42\x07\x39\x93\x52\xF6\x9D"
"\x45\x97\x72\xFF\x15\x98\x4B\x59\x92\x18\xE5\x74\xD4\xC9\x3B\xB2\xA9\x1D\x08\x97\x1D\xC2"
"\x99\x8C\xFE\xA8\x9D\x8D\x79\x94\xED\x28\x9F\xDD\xC8\x9D\x06\xBA\x89\x07\x94\x8B\x03\x0A"
"\x94\xD6\xA8\x63\xF4\x79\x39\xC4\xC9\x89\x8C\xE9\x17\xC6\x39\x99\xB0\xC9\x14\x71\x94\x29"
"\xBB\xB9\x9A\xB3\x14\xA1\x45\x81\x9A\xE6\xC1\x96\x5D\xF4\x87\x3B\x45\x94\x82\x61\x93\x02"
"\xB1\x85\x54\xB5\x97\x29\x58\x10\x35\xC0\x09\x0E\x19\x87\x1E\x28\x7C\xEE\xF9\x8F\x5A\x29"
"\x3F\x27\xA9\x1D\xA6\x48\xA2\xF6\x69\x89\x5E\x89\x51\x18\x19\xA5\xD6\x39\x19\x5D\xD4\x17"
"\xF5\xC7\x94\xE0\xE5\x11\x0F\x82\x5D\x36\x4A\x92\x21\x6A\x92\xCE\xE8\x12\x64\xBA\x1A\x66"
"\x1A\x94\xB4\xE8\x9C\x78\xF6\x89\x73\x2A\x17\x77\xFA\xA2\x72\x79\x29\x31\x36\x9F\x25\x5A"
"\x72\x6E\x9A\x1E\xA4\xF8\x9E\xF0\x99\x65\x0E\xD5\x3C\x3F\x94\x0A\x16\xE1\x75\x59\x38\x46"
"\x93\x85\x04\x40\xF6\x8E\x61\x9A\xA6\x15\xE7\x1C\x45\xD9\x69\x5C\xA8\x60\xB4\x19\x95\x0D"
"\xA1\x0D\x91\xBA\x5A\x3A\xC0\x5B\xF7\x17\xA0\xD4\x21\x17\x2A\x79\x96\x2C\x1A\x9F\x86\xC8"
"\x8E\x28\x49\x3A\x2F\x69\x80\x00\x78\x38\x1F\x56\xA9\x96\xBA\x51\x89\x68\xA8\x5B\xEA\xA9"
"\x1E\x06\x97\x6B\xAA\x97\xFC\x56\xA0\xE2\x59\x12\xF9\x77\x38\xBB\x06\x8C\x33\x64\x05\xA3"
"\x0A\xA5\x65\x32\x43\x6B\xA5\x47\xCD\x1A\xA8\xC1\xAA\x50\x61\x76\x0E\xA0\xD7\x7E\x70\x4A"
"\x74\x5C\x4A\xA7\xC9\x17\x18\x54\x17\x9E\xE4\x78\xA6\x52\x15\x70\xC7\x47\xAD\xBE\x7A\x11"
"\xDB\xD0\x83\x47\x0A\x89\x29\x55\x85\x3F\x7A\x9F\x31\xE1\x55\x62\xEA\xA3\x1E\xD8\x16\xB7"
"\xFA\xA6\xEE\xAA\x90\xA9\x5A\x0B\x74\x60\x4F\xEE\x87\x94\xFA\x9A\x84\x96\x81\xAD\xA3\xB7"
"\xA4\x43\xD1\xAF\xFF\x8A\x9C\x63\x91\x6D\xA2\xB1\x4D\x9F\x79\x15\x18\x39\x72\xE0\xE7\x28"
"\x4B\x24\x4C\x2A\x04\xA6\xD3\xBA\x13\xA0\xC7\x09\xE7\x10\x9A\x0C\x07\x96\x4A\xD9\xA1\xF0"
"\x89\x3F\x0B\xB1\x0D\x6A\xB1\x78\x8D\x63\x17\x70\x6A\xA1\xEF\xE6\x98\x0A\x99\xA4\x6C\x4A"
"\xAE\xFF\xB6\xB2\x7E\x9A\x9D\x1E\x75\xAB\x48\xB8\xA2\xC3\x3A\xB2\x34\x0B\xA2\x51\x74\xA7"
"\xE7\xC8\xA5\xED\x09\xB4\x20\x59\x74\x7C\xAA\xB1\x1F\x7B\x9C\x1B\xE5\x9C\x92\xB7\x51\x19"
"\x5B\x26\x36\x36\x84\x7C\x49\x7D\x08\x14\x5C\x81\x07\xB0\x8D\xA9\xB4\x14\xF1\x73\xF0\x27"
"\xA8\x71\xD9\x56\x12\x1A\x45\xF8\x9A\xAF\x4F\xCB\x56\x5F\x3B\x1D\x31\x4B\xA8\xE9\x39\x98"
"\x48\x1A\x65\x15\x1A\xB2\x60\x91\x8B\x6A\xCB\xAA\x23\x38\x91\x5D\xF9\x85\x62\xFB\xB2\x01"
"\xEB\x51\xB2\x5A\x9E\x6D\x3B\x5C\x58\x3B\xB4\x8F\x94\x52\x64\x9B\x26\xA7\x14\x8E\x00\xB0"
"\x4B\x3D\xCA\x24\x22\x65\x1E\x42\x2B\xA3\x05\xC9\xB3\x37\x7B\xA6\xAF\x4A\x4F\xCA\x48\xB5"
"\x28\x45\x4D\x33\x11\xA3\x63\xCB\xAE\x65\x4B\x71\x2C\x27\xB8\x0B\x11\x4A\xAD\xF9\x9F\x72"
"\x81\x80\xA1\xA8\xAD\x45\x71\x4E\xF3\x20\x08\x9C\x39\x58\x61\x06\x11\xD5\xF7\xB9\x8A\x2B"
"\xB0\x7D\x48\x48\x9C\x30\xAE\x84\x5B\xB7\xE2\xE8\xB8\xFA\x29\x8C\x95\x72\x13\x9C\x2B\x6D"
"\xA4\x2B\xAD\x6F\xB8\x6F\xE5\xD1\x16\x9C\x00\x96\x4D\xF5\x95\x05\x77\x43\xCF\x81\x22\x96"
"\xFB\xB3\x20\xC4\x8C\x26\xCA\x44\xA1\x2A\x69\xD0\xC9\xB8\x12\xA1\xA2\xE4\x01\xAC\x3C\x94"
"\x50\x37\x8A\xA5\x3B\x1B\xB9\x6D\x9A\xAB\xDD\x3B\x7B\x38\x01\x15\xE7\x3A\x15\x65\x30\x75"
"\x00\xF1\xAC\x9B\xDA\x10\xCC\x6B\x45\xD2\xBA\x17\xA1\x2A\x56\x86\xAB\xB1\xFC\x3B\x11\x53"
"\x8A\x11\xE3\xDB\xB3\x7B\x0B\x29\x13\x20\x0C\x58\x99\x80\xC2\x70\xBD\x9D\x61\x82\xBD\x29"
"\x1A\xDA\xE3\x05\xF5\xA4\x3F\x83\x8A\x41\x42\x96\x9B\xBC\x69\xB3\x5C\x21\x7D\x06\x06\xA5"
"\x53\x55\x42\x13\x44\xAC\x5A\xE5\x90\xF0\xAA\x1D\x9D\x2A\x13\x62\xA9\xB9\xD0\xCB\x8B\x51"
"\x56\xA9\x98\xBB\xB0\x53\x21\x29\x21\x24\xB5\xE2\xA1\x93\x0A\x09\xC1\x12\x8C\x14\x8E\x47"
"\x16\x31\x2C\x16\x35\xEC\x57\xF4\xB5\xB5\x88\xD1\xC0\x0B\xC1\x19\x33\x1A\xB7\x17\x6C\x2D"
"\x00\x3C\x14\x96\x43\x1D\xEE\xB8\x14\xBE\xF5\x3E\x17\x38\x96\xCE\x4B\x19\x56\x12\x3C\x06"
"\xE2\x08\xE0\xC1\x2D\xEA\xC3\x1E\x80\xA3\xC5\x9A\xD2\x20\x28\xEC\x18\x35\xE0\x21\x9D\xE3"
"\xB7\x4E\x6C\x58\xB1\x15\xC5\xC7\x5B\x10\x61\x7C\x84\x2E\x2A\xAC\xE7\x2B\x1F\x5D\xDC\x1F"
"\x11\x53\x03\x21\x62\x0B\xA0\x97\x3C\x57\xAB\x9E\xD3\xD1\x39\x0D\x54\x71\x8A\x01\xB5\xA0"
"\x73\x25\xAB\x03\xC8\x45\x25\xB3\xBA\xE8\x25\xEA\x5B\x96\x68\x5B\x97\x88\x1A\x37\x3A\xBB"
"\x7D\x2E\xD5\x1E\x5D\xC7\xC8\x84\x5C\x26\xA8\xE2\x08\xA2\x4A\x07\x1F\x56\x85\x92\x9C\x22"
"\x2D\x0B\x52\xCB\x68\x37\xEC\x39\x1E\x7B\x38\xB9\x98\x6C\x27\xAA\x1B\xBA\x03\xCC\xA4\x2B"
"\x02\x7C\xF1\xEA\x3F\x84\x53\xBA\x6E\x83\x9D\xE4\x71\x58\x17\x44\xC5\xAA\x2C\x27\xA8\xEC"
"\xC8\xE8\xDA\xBB\xE8\x81\x64\x6C\xDC\xA7\x50\x05\x37\xA2\x0C\xBE\x0A\x7B\xA9\xBC\xCC\x27"
"\x3C\x08\x4A\x46\xBC\xBB\xE7\xD1\x9F\x73\x36\x4A\x83\x1C\x35\xDF\x9B\x3E\x65\x90\x0A\xC6"
"\x97\x0A\xAB\xC2\xCC\x7F\xE2\xB4\x3D\xB8\xC0\xA6\x9A\xC8\xB8\x0C\xA3\x87\x61\x16\x0B\xEA"
"\xBF\x53\x03\xCA\xDF\xDC\x2C\x48\x10\x70\x9E\x45\xC1\x99\x5B\x9C\xE5\xEB\xCE\xF7\x3C\x2F"
"\xF8\xD1\x1E\x8E\x20\xC5\xF8\xEC\xCF\xFF\x0C\xD0\x01\x2D\xD0\x03\x4D\xD0\x05\x6D\xD0\x07"
"\x8D\xD0\x09\xAD\xD0\x0B\xCD\xD0\x0D\xED\xD0\x0F\x0D\xD1\x11\x2D\xD1\x13\x4D\xD1\x15\x6D"
"\xD1\x17\x8D\xD1\x19\xAD\xD1\x1B\xCD\xD1\x1D\xED\xD1\x1F\x0D\xD2\x21\x2D\xD2\x23\x4D\xD2"
"\x25\x6D\xD2\x27\x8D\xD2\x29\xAD\xD2\x2B\xCD\xD2\x2D\xED\xD2\x2F\x0D\xD3\x31\x2D\xD3\x33"
"\x4D\xD3\x35\x6D\xD3\x37\x8D\xD3\x39\xAD\xD3\x3B\xCD\xD3\x3D\xED\xD3\x3F\x0D\xD4\x41\x2D"
"\xD4\x43\x4D\xD4\x45\x6D\xD4\x47\x8D\xD4\x49\xAD\xD4\x4B\xCD\xD4\x4D\xED\xD4\x4F\x0D\xD5"
"\x51\x2D\xD5\x53\x4D\xD5\x55\x6D\xD5\x57\x8D\xD5\x59\xAD\xD5\x5B\xCD\xD5\x5D\xED\xD5\x5F"
"\x0D\xD6\x61\x2D\xD6\x63\x4D\xD6\x65\x6D\xD6\x67\x8D\xD6\x68\x3D\x04\x08\xDC\x2D\x22\x40"
"\x04\x69\x0D\xD1\x1D\xB1\xCE\xC0\xC2\x1D\x73\x0D\xD7\x74\xD3\x3B\x48\x0B\x2C\xDF\x4A\xCC"
"\x77\x0D\x37\x18\xBB\x2D\xD0\x04\xB8\xC9\xB2\x38\x8C\x67\x73\x03\x13\x3C\x8C\x27\xC6\x7F"
"\x91\xD8\x34\xB7\xD8\x00\x7D\x6F\x97\x4C\x2C\x72\x80\xC4\xC6\x22\xD8\xAB\xBB\x2F\x94\xED"
"\x5A\xD4\xA1\xD9\x98\xFD\xCF\x21\xA5\xD7\xBA\xF2\x43\xB5\x5B\x2A\x9D\x9D\xB5\x49\x72\x4C"
"\x95\x33\xA7\x8E\x40\xCB\x7D\x5D\x22\x8B\x63\x20\xA9\xF0\xC5\xDA\x61\xDA\x2F\x3C\x16\xB5"
"\x9D\xC1\x03\x7D\x40\x76\x9D\x22\xA9\x7D\xB2\xAB\xDD\xDA\x50\x32\xC4\x0B\x41\xBC\xC6\x82"
"\xDB\xFF\x49\x24\x6B\xC8\xAD\x0E\x15\xDA\x1F\x72\x4C\x9D\xC5\xC4\xDB\xEB\x16\xD6\x6C\xBB"
"\xD3\xDD\x2F\xA6\x1C\x2A\x07\x44\x9E\x2B\xA2\xDC\xAF\x4C\x82\x3A\xE5\x79\x02\x2C\x2C\xC7"
"\xED\xD9\x3E\xC2\x47\x94\x42\xBB\x48\xA2\xC4\x26\xF1\xD8\x9F\x0A\x16\x5B\x7B\x55\x41\xFC"
"\x2A\x17\x22\x3C\x9B\x25\x6A\xC8\x2D\x1E\x8D\xDD\xCF\x53\x72\x69\x4B\x72\xDE\x3B\xCA\xDB"
"\xE9\x11\x52\xBB\xFC\x23\x3F\xA1\x86\xAC\x23\xDF\xE8\x71\x40\xA7\x30\x71\x90\xEC\x18\xAA"
"\x95\x59\xA5\xDA\xA5\x47\x59\x43\xA4\xBD\x7E\xA3\xAA\x59\xF3\xDC\x74\x92\x2D\x11\x0B\xDE"
"\xC0\x7A\xED\xE1\x70\x4C\x16\x23\x54\x42\xDD\x4C\xCC\x30\x34\x18\x84\x71\xD8\x4B\xB2\xC1"
"\x0F\x21\xDE\x44\x4B\xDD\x09\x58\xB2\x5A\x84\x25\x1F\xEE\xDA\xE9\x23\x56\x34\x54\xCE\xE6"
"\x9D\x5D\x47\x32\x3F\xF5\x03\x49\xDB\xFD\x21\x2A\xD4\x43\xC2\x17\xE3\x98\x98\xDB\xD7\xB9"
"\x57\x34\xF1\xDF\xA3\xEC\xB9\x4E\x0E\x4E\x96\x57\x1A\x15\x09\x93\x51\x01\xA6\x97\xCD\x10"
"\x54\xAE\x7B\x85\xF4\x17\x9A\x71\x11\x54\x0E\xCD\x4C\x74\x0A\x12\x2E\x24\x5E\xC8\xBE\x1C"
"\x77\xAA\xD3\xB1\xDE\x72\xFC\x24\x07\xBA\x24\xD1\x8A\xE4\xD5\xA4\x53\xB2\x64\xAC\x47\x12"
"\xE4\x5A\xF1\x13\x7E\x7B\x2A\x26\x91\x50\x4E\x3B\xCE\xC0\x3B\xB8\x46\x6B\xA5\x0D\xEB\x17"
"\x2E\x9C\x88\xAC\xAC\xB4\x3B\x72\xC8\x94\x88\x58\x25\xB7\xE8\x81\xA1\xAA\xAD\x24\x6B\x91"
"\x0E\xAB\x7E\x68\xE1\x25\xD2\xDD\xBF\x8B\xBB\x2A\xCC\x3B\xC3\x8D\x14\x1C\x8E\x23\xF5\x17"
"\xE0\x1F\xF2\x6B\x2A\x56\xA7\x46\x62\xC8\xED\xCD\xE3\xEE\x39\x3F\xA3\xAE\xE0\xF2\x2C\x9A"
"\xAE\xCE\x83\x7A\x5E\x71\xA3\xF3\x10\x8A\x44\x50\x2F\x6E\xB7\x04\x7C\xB0\xCE\x30\x46\xC1"
"\x50\xDE\x69\x09\xEB\xB5\x66\xD7\xB3\x30\xEC\xFF\xE7\xBF\x85\x08\xA6\x90\xEB\xEA\x2E\x48"
"\xB1\xF4\x1B\xE8\xF7\x5D\xB4\x56\x32\x01\xA9\xA0\xEA\x41\x22\x3A\x0A\x41\x61\x01\x91\xEB"
"\x52\x62\x02\x37\x7E\x1E\xAD\x6E\xEA\x6C\x3E\x24\x64\x1E\x10\xE6\x4E\x16\x58\x4E\xAF\x41"
"\xC2\xCA\xCE\xD9\xB5\xA0\xBB\x9F\x87\x31\x01\xE8\x8E\xEE\xF4\x44\xEF\xBE\x6B\xB5\xD0\x1E"
"\x45\x42\x2E\xCD\x29\x45\x83\xB7\x2C\xED\xD4\x74\xE4\x60\x73\xE7\xED\x4A\xA5\xA7\x13\x4D"
"\x09\x5E\x1E\xCE\x8C\xDF\x68\xEA\x60\x79\x76\xE9\x5A\x42\x49\xF3\x2A\xE2\xC0\x1C\x1C\x84"
"\x83\x4E\x43\x62\x41\xE7\x00\xB1\x02\x08\xB3\x94\x1A\xF1\xC5\x2B\xC2\xEE\x9C\xE7\x5B\x3A"
"\xF0\x61\x82\x74\xFC\x7E\xEE\x0A\xB2\x21\x3A\x5C\xE8\x66\x5B\xB3\x80\xBB\x44\xF2\x6D\x3C"
"\x01\xD2\xF2\xE4\x71\xC5\x5E\x5C\xEF\xD8\x7B\x3B\x5A\x81\xDB\xF8\x6A\xA1\x00\x4C\xEB\xE8"
"\xA1\xA1\x65\xA1\xB0\x7A\x1E\xCB\x97\x63\x5B\x78\x05\x8F\x5F\xAE\xA6\xAE\xD6\xEC\xA3\x92"
"\xF3\x59\xBC\xF3\x6B\x31\xF5\xB3\xFD\xA2\x43\x0F\x25\xEA\xC3\x38\x74\x80\x48\x59\xCC\x38"
"\x99\x3A\x14\x74\xC0\x38\x2E\xBF\x61\xB7\x3B\x8D\x65\x77\xA1\x0E\xB1\x09\x40\x16\xDA\x42"
"\x14\x13\x60\x1E\xBB\x49\x1E\xE6\x79\xFB\x96\xE8\x99\x3D\x62\xEF\xF4\x6A\x14\x66\x21\xD4"
"\xB9\x54\x6B\xC6\x95\x5E\x92\xEF\x3E\xE1\xA9\x8C\xDD\xF5\x8A\x96\x09\x41\xE9\x3F\x7B\x5D"
"\xAE\x96\xB8\x8F\xF7\x61\x17\x0B\x99\x3F\x02\xF0\x87\x1F\x24\xE1\x1B\x1C\xB4\x81\x19\x98"
"\x8F\x1C\xCA\xFD\x92\x95\x5F\xF1\x2D\xC2\xCA\xA9\xCC\xBA\x3E\xEB\xDE\x46\x3A\x9C\x87\xF2"
"\x46\x87\xB1\x49\xB2\x01\xB5\x16\x9B\xA1\x74\x09\xF1\xAC\x3F\xE9\x83\xDC\xE2\xA0\x7A\xED"
"\xBE\x86\x96\x2A\x44\x9A\x21\x79\xA8\x15\xFC\xBC\x00\x09\xF0\x88\x5F\xA7\x52\x70\xE9\x6D"
"\x21\x07\x9E\xCE\xE5\xD5\xEB\x48\xA6\x29\x24\x2D\x3B\xFC\x3D\x11\x68\x35\x45\x68\x9B\xAF"
"\xCC\x26\x35\xC6\xD7\xBF\x19\x8A\xF6\xE7\x20\x4B\x90\xD1\xEF\x22\x90\x1B\xEF\x85\x1F\xB6"
"\x07\x6B\xDB\x31\xCF\xA3\xD7\x37\xF7\x4C\x94\xB1\x78\x17\xF2\xA7\xC9\x7F\x6D\x91\xB1\xBE"
"\xCC\xA0\xE9\x2E\xB8\x64\x0B\xE7\x2B\x4C\xF7\xC9\x39\x89\xCE\xEF\xB2\x25\x29\xC2\xDC\x3F"
"\x81\x03\xBD\x00\x30\x78\x10\x61\x42\x85\x08\xBD\x0C\x74\xE8\x6C\xC2\x42\x89\x13\x29\x1A"
"\x9C\xE0\xCC\xE1\xBF\x79\xE7\x32\x76\x34\x27\xA2\x62\xC5\x8B\x1D\xE7\x0D\x59\x38\xAB\x23"
"\xC4\x90\x2B\x59\xB6\x74\x09\xA0\x61\xC6\x92\x09\x01\x76\x2C\xF8\x52\xA1\x9C\x79\x02\x6F"
"\x2A\x64\x44\x10\xE7\x4A\x2F\x3B\x3B\x16\x9D\x19\x74\xE2\xD0\xA2\x4B\x35\xF6\x44\x6A\x30"
"\xA6\xC3\xA3\x07\x6B\x66\x74\xFA\x14\x2B\xCB\x91\x4C\x99\xAA\xCC\x5A\x95\x6B\xD1\xAB\x48"
"\xB7\x86\x9D\x95\x35\xE4\x4F\xA9\x26\x51\x3A\xFC\x88\xF6\x60\xD9\xB0\x02\xDF\xC2\x35\xA8"
"\x76\x60\x5D\xBB\x13\xF1\x0E\x3C\x7B\xB7\x23\xA3\xBD\x16\x31\xCE\xCD\x0B\xD2\x6E\x54\xC3"
"\xFF\xBC\x7E\x0D\xE8\xF0\x6F\x42\xB9\x8C\x23\x62\x9D\xFC\x4F\xB0\xE4\xC2\x0E\x33\x63\xED"
"\x2B\xB0\x31\x54\x8F\x88\xB3\x0E\x21\x9A\x51\x5B\x8D\xC1\x0B\xC1\x2E\x16\xD8\x39\xA8\xE9"
"\x8E\x91\x13\x7E\xFE\xA7\x17\xEE\x84\x2B\x66\xCC\x54\x56\x28\x45\xCE\x60\xDB\xA1\x61\x8E"
"\xCE\xDA\x77\xEA\xC1\x53\x6E\x49\x27\x76\x0D\xDA\x37\x5A\xC5\x86\xE7\x8D\x45\x3A\x3C\x7A"
"\xF1\x8C\xB8\x57\x0F\x16\x21\x6C\xDB\xB6\xD3\xFF\xC2\x87\x1F\x5F\x7E\x13\x5C\xD9\xCF\xFF"
"\x69\x6B\xFE\xB4\x35\x53\xEB\x7B\x6D\x0B\x9E\x4C\xFC\xE9\xE5\xB9\xB0\xB3\x4E\xD6\x56\xAB"
"\xBC\x6D\x52\x29\xA3\x3B\x00\xDA\xE2\xCC\xA0\xF5\xFC\x5A\x4D\xBF\xB0\xF8\x7B\x4A\x41\xD7"
"\x1E\x0C\x2A\x3E\xDA\xA8\x7A\x6C\x20\xFC\x5E\x8A\xEF\x9F\xB1\x22\xE4\x09\xAD\x03\x17\xAC"
"\x2D\xA5\xEC\x90\xE2\x50\xA0\x79\x00\x29\xF0\xA0\x0F\x17\xE3\xCE\x25\xDB\x92\x43\xC8\x36"
"\x18\xC9\xAA\x25\x23\x67\x54\x43\x68\xA4\x79\x1C\x31\x31\x28\x11\x05\xB2\x10\x00\xEC\x4A"
"\x1B\x8F\xBB\xE9\x34\x44\xCA\xC5\xFD\xEC\x6A\xD2\x41\xBB\x84\xFC\x87\x48\x23\x59\x64\x11"
"\x2F\xDA\x0E\x9C\x10\x2B\x29\x6C\xF9\x12\xCC\x30\x39\xEA\xC8\xBD\x27\x03\x0C\x6F\xCC\xB5"
"\xAE\x9C\x0E\x33\x83\x2A\xA4\x6F\xA9\x53\x4C\x00\xC0\x04\x1C\x73\x04\x92\x42\x0C\xB9\x9A"
"\x27\xB8\xBD\x38\x2C\x68\x32\x1B\x3D\x8B\x73\xCE\x3A\x4B\x44\x0B\xC5\x7F\x6A\xA1\xC3\x91"
"\x34\x99\x43\x54\xCF\xDB\xDE\x9B\x60\xCA\x25\x5B\xFA\x70\x46\x03\x8D\xB3\x6C\xB3\x81\x1E"
"\x9C\x92\xC8\xA7\x6C\x73\x28\x35\x2C\x99\xD2\x46\x90\x46\x8D\x32\x29\xA8\xCB\x96\xAC\xF1"
"\x3D\x26\xC7\x1B\x88\x4F\x86\x1E\xE5\x34\x30\x85\x40\x85\x4B\xC8\xD0\x26\x0B\x35\xCF\xA5"
"\x16\x55\x75\x53\xAC\x50\xD4\xA6\x0C\x1D\x74\xD0\xA9\xD8\xFC\x3A\x7D\x4D\xD7\xD9\xAE\x64"
"\xB1\xAC\x9E\xAA\xCA\xF4\xCA\x51\x2D\x85\x8B\x4D\x41\xD1\xFA\x30\xB2\x0F\xB9\xC4\xC9\xC5"
"\xE4\x26\xC3\x36\x28\x36\xB9\x1A\x97\xDC\x59\x67\xFA\xD0\xDB\xD8\x66\xD5\x88\x55\xC2\x64"
"\xAA\x57\xD4\xA2\x4A\xB5\xD7\x26\xB4\x2E\x9B\xC5\xB7\x1A\xB4\x29\x6A\xDB\x95\x60\x45\xA8"
"\x86\x67\x87\x84\xB4\x5F\x1E\x15\x66\xF7\xA5\x06\x53\x5C\xB1\xBB\x29\x35\xEA\x13\x00\xFD"
"\xE6\x0B\x89\x43\x60\x35\xDD\x2E\x56\x9C\x12\x15\xA8\x16\x24\x26\x60\xD6\x53\x86\xAD\xD2"
"\x2C\x57\xE9\x5A\x3E\x88\x4D\x88\x59\x1A\x75\xDF\x8C\x15\xEE\x10\xAD\x51\x61\x6B\x72\xE3"
"\x96\xFE\x64\x39\x23\x99\xA7\x95\x97\x2E\xD2\xA2\x2A\x18\xCE\x43\xA7\xB5\xCD\xE3\x23\xEF"
"\x84\xB9\xE1\x9C\x49\xC2\x17\xB0\x95\xE1\x1A\x95\xAB\x9E\x5D\xEA\x16\x24\x17\x85\x6E\x49"
"\x46\xAA\x8B\x8C\xFA\xC4\x48\x25\x4D\xC8\xEB\xAB\x97\x32\x8F\xA9\xA6\x59\x9A\x72\x1E\x31"
"\x97\x42\x77\xEB\xA9\x69\x32\x5B\xEB\x97\x6A\x30\xFB\xE9\xBD\x34\x4E\x48\xDD\xBC\x25\x4A"
"\x5B\xA2\x4A\xF1\x74\xC9\xE2\xB9\xE2\x65\x89\xCD\x19\x7F\xF6\x57\x61\xA7\x1E\x87\xCF\x6C"
"\xEE\x08\xA7\xFC\x65\x00\xA0\xFC\x9A\xA2\xC6\xA9\x9E\x7C\xE8\xA4\xA9\x44\x68\xCB\xD0\x0D"
"\x5A\x4E\xE9\x2B\x2F\xE3\xDC\xA5\xF8\x70\x13\x72\x71\x96\x3A\x5E\xC8\x36\xC1\x57\x4A\x9C"
"\xA9\xD8\x0D\x3E\xB4\x49\x8C\x1D\x93\xD6\x27\xB2\xD3\x15\x4B\xA1\x7F\xD5\x9B\xD7\x30\xD6"
"\x17\x92\x38\x4A\xA9\xFB\x6E\xD1\x5D\xB1\xB3\x12\x38\x2C\xA4\x7D\x36\xFB\xC1\xCB\x5F\x0A"
"\x5C\x22\xE3\xB3\x62\x53\xBC\xB9\x6C\xAF\xC8\x4A\xE8\xEF\x75\xEE\xFC\x83\x0E\x7E\x8A\x7B"
"\xA0\x21\xFB\xBE\x58\xA5\x96\x72\x7B\xF7\xE7\x13\x8C\xDE\x74\xBF\x37\xB3\xF6\x31\xBA\x07"
"\x43\xDD\x7E\x2C\x8A\x8F\xFF\xC8\xF2\x2C\x73\x3D\xCB\x7A\x21\x51\x97\x6B\xC6\x27\x92\xCD"
"\x9C\x03\x4C\x37\x03\x51\x88\x5A\xD6\x20\xDF\xB1\x8F\x3D\x56\x7B\x8A\xE1\x8A\xA7\x30\xFA"
"\xCD\x2C\x83\x38\x33\x16\xDF\xE6\x72\x0A\x29\x01\x8F\x46\xA9\xF3\x1B\x00\xE7\xB7\x17\x4C"
"\x89\xCD\x45\x0D\x4C\x61\xFA\x14\xC2\x21\xE5\x75\xF0\x21\x95\x41\x59\x51\x4C\xC8\x2B\x14"
"\xAA\x4F\x85\xB8\x52\xD3\x85\x40\x86\x15\x0E\xBA\x6F\x44\x1B\x7C\x99\xFC\xCC\x61\xA7\xF7"
"\x65\x65\x57\x24\x0A\x60\xFE\x70\x02\x88\x2F\x09\xE3\x34\xC2\x00\x93\x30\x68\xA5\x45\x5B"
"\xA4\xE2\x70\x59\x61\x61\x86\xC2\xB8\x17\xAE\x31\x68\x4A\xB5\xE0\xCD\x1A\xE9\x30\x2B\x6D"
"\xF0\xE6\x0A\x65\x24\x5F\x08\x53\x24\xBD\xA7\x00\xE2\x14\xD9\x49\x58\x51\x6E\x58\x43\xBC"
"\x41\x6D\x29\x32\xA4\x1D\x1D\xE9\x35\xC2\x1F\xC6\xC5\x83\xA2\x23\x89\x23\x0C\x68\xC7\x4B"
"\x21\x6F\x4F\x14\x83\x5C\xE6\x0C\x12\xC5\x02\x51\x4F\x3E\x76\x59\x9F\xAD\x84\x07\x36\xBB"
"\x2D\xA4\x7D\xF0\xE1\x62\x1D\x11\x36\x30\x4A\x3A\xEB\x94\x96\x54\xDB\xAD\x80\x98\x43\xCC"
"\x65\x24\x54\xDE\x2B\x5B\xC3\xE4\x30\x10\xF7\x30\xAD\x3F\x0F\x8B\x16\x2C\xA9\x28\x44\xF6"
"\x24\xD0\x25\x94\x2A\x0A\xC0\xF2\x87\xCB\xD5\x2C\xD0\x35\xC0\x3C\x09\x21\x75\xF7\xAD\x79"
"\x7D\xB0\x22\x2F\x44\xC8\x18\x0F\x03\x45\x66\x86\xEC\x7A\x9D\xB4\xD9\x29\xB1\x52\x83\x5A"
"\x8C\xC7\x47\x13\xF8\x90\x32\x07\xF9\x9C\x5A\xEC\x08\x2E\xA0\xDB\x66\xD0\x86\xB6\x43\x5E"
"\xFA\xF0\x9D\x80\xFB\x24\x4E\x36\x29\x45\x56\x76\x13\x47\x0F\x3A\xD9\x69\x74\xE4\xA7\x3F"
"\x3A\x8C\x9B\xF9\x72\x25\xE9\xE2\x19\x2C\x0D\x02\x94\x9D\xAF\xAC\x66\x2D\x05\x52\xA6\xFA"
"\xFC\xEE\xA0\xEB\x44\x50\x2F\x65\x15\xC2\x3E\x8A\xC4\x62\xC4\x34\xDD\xEA\xBA\x83\x35\xD7"
"\x40\x73\x22\xB8\x9B\x0B\x39\x0B\x78\xC8\xE1\x15\x71\x86\x01\x6D\x89\x48\xAB\x27\x47\x8A"
"\xC4\x90\x35\xD8\x2B\xD0\x04\x94\xE5\x9B\x87\x5A\x73\x2E\xF3\x70\x86\x20\x5C\x5A\x37\x1A"
"\xBA\xE9\x9F\xD3\xDA\x63\xB3\x4A\x9A\xD0\x84\x4C\xA9\x99\xC1\x43\x29\x12\xA1\xB3\x17\x13"
"\xF4\xD4\x8C\xF3\x04\xAA\x36\x91\xC2\x26\x0B\xDD\xB4\xA2\x11\x9D\xAA\x51\x89\xC6\x1C\xBC"
"\xA8\x84\xA3\x58\xF1\xDC\xDD\xA8\x4A\xD1\xB4\x84\x90\x80\x38\xD1\x4F\x0F\xF3\x27\xCD\xC1"
"\x30\x2F\x79\x38\x75\x08\x04\xC3\x54\xD7\x30\x11\x68\xA3\xBA\x3C\x4E\x10\x01\xC0\xD0\x29"
"\x22\xAE\x23\x74\xB5\xAB\x5D\xF1\x0A\xA1\x79\x59\x67\xAC\xA1\x1B\xA0\x23\xB5\xA2\xB0\x53"
"\x28\x0B\xB2\x4B\x0B\xA2\x5B\xE1\x52\x03\x74\x32\xB5\x90\x10\x75\xC8\x58\x66\x57\x55\xA9"
"\x02\x52\xAB\x66\xDD\x6B\x00\x29\xEB\x34\xAE\x86\xB2\xAB\x9B\x05\xE5\x67\x5F\x02\xAF\x54"
"\x90\x71\xAB\xB4\x62\x6C\xFD\x06\x6A\xBE\x21\x8A\xD6\x25\x72\xF8\x92\x29\xFF\x21\x58\x5B"
"\xF0\x56\xB0\x60\x7C\xEB\xCD\xD8\x9A\xBF\x33\x7A\x87\x84\x8B\x49\x6B\x45\x8E\x48\xC5\x1A"
"\x1C\x4E\x9D\x41\x0A\xA8\x5F\x61\xAB\xC4\xBF\x76\x47\x7B\xFC\xBA\xE7\x95\x54\x39\xCB\xD0"
"\xB2\xA8\xBB\x97\x49\x6A\x34\xE7\x21\xA8\xB0\x39\xF3\xA7\x55\xFB\xEE\x4A\x60\x8A\xD9\xF1"
"\xE2\x96\xB9\x87\x14\x2F\x36\x37\x64\xB6\x79\x48\xC1\xB6\x6E\xB9\x6C\xBB\x4E\x39\x5F\xAC"
"\x40\x89\x32\xAD\xDC\x2E\x4E\xC2\xAB\xB0\xF7\xC2\xB7\x92\x29\xD3\xAE\x20\x1B\xCB\x43\xB3"
"\xD6\xF3\x78\x84\x3C\xDB\xA0\x96\x6A\xBA\x9F\xBC\x8A\xA8\x22\x0B\x2A\x53\x0F\x9C\xD2\x6A"
"\x2A\xD6\x6C\x55\xE2\xA3\xDF\xF0\x74\x5E\xD3\xCA\x36\x7F\x61\xD5\xEE\x13\xA5\x43\x14\x73"
"\xEC\x57\xBD\x1F\xA6\xF0\x76\x5D\xD4\xE1\xD8\x2A\xD8\xC3\x38\x46\xB0\x2F\x75\xAC\x1F\x90"
"\x52\xE4\x32\xDA\xA8\x17\x87\x6A\xE6\x5D\x16\x0B\x78\xA2\x0A\x85\xA5\x6F\x6C\x98\xCB\xCC"
"\xF9\x78\xC7\xF5\x25\xE5\x56\x97\xAB\xD6\x9B\x5D\x54\xAE\x28\x5E\x0D\x64\xB9\xDC\x65\x1D"
"\x94\x61\x56\x8C\x50\xD6\x9C\xE0\x67\xD2\x8C\xE9\x84\xC1\xDD\x03\x60\x91\x63\x9C\x44\xC3"
"\xA6\x6F\x02\x97\x8D\x0F\x49\x39\x59\xD0\xB8\xA0\xD9\x2E\x7F\x43\xB2\x8C\xA7\xA7\x8D\x17"
"\x4B\xC6\x89\x47\x16\xE8\x80\x05\x68\x36\xAF\x94\x81\xB7\x5C\x7D\x0A\x75\x35\xF2\x23\x84"
"\xB8\xB3\xA9\x59\x1E\x88\xEF\x9A\x84\x65\x89\xE6\x05\x9D\x13\xD8\x04\xC1\xA0\x1A\x65\x89"
"\x70\xE8\xD0\x89\x4E\xB2\x11\x53\x77\x99\x3C\x4E\x92\x6C\xA3\xB2\x31\x22\x87\x19\x30\x51"
"\x4F\x58\xC9\x91\x46\xF4\x52\x2C\x6D\xD6\xA3\xF9\xE6\xD6\xDD\x69\xD0\x39\xCE\x14\x20\x67"
"\xD0\x57\xD2\x29\xE2\x84\x19\x38\x71\x8E\x55\xFB\x54\xB5\x76\x39\x56\x19\x22\x32\x01\x24"
"\x7C\x33\xD2\x4E\x46\x8D\x23\x78\xC3\x09\xE4\x55\xB9\x73\x9B\x62\x44\x38\xDB\x3C\x3A\x43"
"\x92\x89\xD9\x19\x7B\x36\x51\xE8\x5C\xCE\x8E\x0C\xCB\x51\xA3\xFE\xEF\x69\x16\x65\x06\x3A"
"\x8C\x32\xC3\xD2\xBD\x6E\x77\x50\x34\x8F\xF0\x65\x32\x2B\x8C\x9E\x6B\x78\xDA\x86\x6A\x32"
"\x09\x82\x0E\x12\x2C\x37\x68\xA5\xA2\x46\x62\xA5\xD7\xD3\x1A\x36\xCA\xBD\x03\xE9\x3C\x75"
"\x7F\xA6\x56\x9A\x14\x16\xA3\xD2\xAD\xE3\x41\x3F\x04\x09\xCA\x72\x04\xF2\x6A\x0D\x80\x7A"
"\x33\x9C\x78\x09\xBF\x9D\x8E\x4B\xB7\x1A\x11\xBC\xDA\x30\x03\x9F\x63\x58\xB0\x3D\xE3\xA2"
"\x0D\x86\xA5\x21\x1F\x6D\x06\x3B\x3E\xB6\xA7\x29\xA8\xE2\x13\x24\x35\x7B\xD2\xEC\xC7\x0C"
"\xFE\x98\x22\xFA\x66\xF9\x6C\x1B\xAC\xE8\x69\x8D\x6C\x4F\x44\x0F\x09\x5C\xE7\xA6\xF4\x8A"
"\x20\x9D\x29\x2D\xEF\x9E\x04\xD7\x25\xF2\x6F\xB3\x47\xEA\x0A\x99\x4E\xC4\x09\x9E\x59\x65"
"\x27\xB7\xDF\xE9\x04\x7B\x0B\x55\x86\x75\xA7\x7B\xFA\x5A\x43\xEE\xDF\xD9\x5B\x82\x4C\xB3"
"\x5C\x09\xC0\x16\x9F\x29\x02\x3B\xCD\xB1\xB1\xF3\x55\xAD\x31\xEF\x48\x71\x51\xC9\x4B\xA6"
"\xAB\xFC\xC6\x29\xAF\x7B\x52\x7E\x39\xF8\xD5\x3E\x27\xEB\x9F\xDE\xF0\xD0\x98\x3E\x0F\x78"
"\xBF\xBC\xEC\x12\x8A\x70\x06\x7B\x2E\xCF\xE7\xD4\xDC\xD3\x8D\x7F\x3C\xAC\xAF\x43\x2A\x18"
"\x8B\x08\xF0\x87\x4F\xA6\xE1\x97\x47\xF5\xA5\x84\xFE\xD2\x73\xDB\xFC\xB1\x29\x9A\x6B\xD1"
"\x44\x5B\x91\x97\x97\xEC\xDB\x87\xF6\xA6\x63\x42\xB2\xE9\xB9\xD1\xBB\xDC\x8D\x0C\x14\xB7"
"\x4F\xB9\xC5\x88\x67\x7B\x45\xA8\xC9\x94\x5A\x90\xDE\xDC\x73\x61\xF3\xBA\x11\x3E\xFB\x53"
"\xD5\xA0\x57\xC8\xA7\x09\xCA\x99\xC2\xF7\x8B\xBB\xE6\x82\x33\x67\xB9\x24\xAD\x7E\x7D\x32"
"\x41\x7F\xDE\x2B\x15\xC8\xA9\x71\xF8\x0F\xF2\x77\xA7\xF8\xC2\x92\x3E\x42\x5D\x73\xFC\xD8"
"\x7F\x3F\xFA\xDD\xA7\xC8\x81\xB4\xE4\xE6\xBD\xEC\xBE\xF9\x2B\x0C\x0B\xEB\x43\x22\xAE\x02"
"\xC5\xDD\x21\xCE\x69\x30\x00\x01\xF7\x6C\x69\xF8\x5E\x0A\x7F\xD2\x4F\xCB\x9E\xA4\x00\x03"
"\x10\xC6\xB4\x6F\x6E\xB2\x0F\x2D\x20\x8D\x87\xD6\xCF\x9E\xF8\x2C\x74\x24\xE6\xD4\x84\x04"
"\xF3\x2C\x42\x01\xA5\x42\x02\x91\xA2\x57\xAC\x00\xF7\x12\x6F\xE5\xB8\x62\xF9\xE4\x2F\x62"
"\xA8\x6E\x03\x8D\xAE\x55\x84\x81\x5D\x44\xC0\x19\x42\xF0\xFD\x48\x82\x06\xAD\x6C\x20\xB6"
"\x21\xA7\x6E\xB0\x55\x58\x30\x22\x38\x50\x05\xA7\x0E\x28\x16\x4C\xD7\x4C\x2F\x77\x80\xCD"
"\x2E\x28\x30\x45\x1C\x6D\x5A\xD8\xA4\xF2\x80\x6C\xE3\x98\xE2\x1C\x98\x90\x41\x4E\x01\x92"
"\x90\xE5\x98\x36\x65\xD6\x48\xE2\xFC\xFC\x26\x0A\x97\x62\x0A\x2D\x50\x22\xBC\x69\x6E\xA8"
"\x70\x35\xC8\xD0\x28\xE4\xA4\x62\xCC\x8C\xF1\x02\x0D\x34\xD0\x49\x48\x9E\x70\x21\xD0\xD0"
"\x28\xCC\x50\xDA\x80\x82\x0E\x69\xC5\x0E\xF7\x22\x0F\x49\xA5\xB0\x82\x30\x3F\xDC\x90\x31"
"\xE0\x70\xBD\x00\xB1\x22\xFA\x50\x0F\xC5\xF0\x20\xF6\x06\x5A\x10\x71\x09\x15\x11\xD0\x52"
"\x82\x10\x93\xCD\x10\x2B\x31\xE1\x6A\x80\x0E\x52\xC1\x16\x86\xCD\x64\x2C\xF1\x29\x4C\xC0"
"\x0C\x1C\xE1\x4B\x04\xC1\x0C\x74\x20\x7F\x4C\xE0\x0A\x04\xE1\x8B\xE8\x00\x09\xE0\xCB\xD9"
"\xE8\x60\x15\x5B\x71\x68\x40\x51\x14\x6D\x81\x14\x4D\x31\x7F\x90\x20\x13\x6D\x31\x8E\x72"
"\x11\x16\x79\x91\xCC\x3C\xD1\x32\x32\x31\x15\x7A\x11\xB7\x68\xF1\x4B\xE8\xC0\x18\xA9\x48"
"\x37\x38\xC1\x16\x58\xD1\x74\xBA\x4B\x18\x23\x86\x18\x97\x71\x1A\xED\x42\x17\x35\x51\x10"
"\xAC\x71\x30\xF6\xE6\x82\xB2\x91\x17\x21\x71\x22\x26\xA0\x1A\xC5\xF1\x1A\xCF\x11\x1D\xD3"
"\x51\x1D\xD7\x91\x1D\xDB\xD1\x1D\xDF\x91\x5B\x46\x0C\x1E\xE7\x91\x1E\xEB\xD1\x1E\xEF\x11"
"\x1F\xF3\x51\x1F\xF7\x91\x1F\xFB\xD1\x12\xF5\x63\x0A\x95\xE5\x0A\x38\x21\x3D\xFC\xD1\x20"
"\x0F\x12\x21\x13\x52\x21\x17\x92\x21\x1B\xD2\x21\x1F\x72\x21\x00\x30\xC0\x20\x92\x22\x2B"
"\xD2\x22\x2F\x12\x23\x33\x52\x23\x37\xB2\x22\x3D\x6A\x01\x39\x12\x24\x43\x52\x24\x47\x92"
"\x24\x4B\xD2\x24\x4F\xF2\x25\x3E\x50\xE7\x50\x92\x25\x5B\xD2\x25\x5F\x12\x26\x63\x52\x26"
"\x2D\x91\x00\xAB\x6E\x26\x6F\x12\x27\x73\x52\x27\x77\x92\x27\x79\xD2\x11\x17\xA6\x27\x83"
"\x52\x28\x87\x92\x28\x8B\xD2\x28\xF7\x71\x20\xC1\xC4\x11\xB8\xF1\x28\x9B\xD2\x29\x9F\x12"
"\x2A\xA3\x52\x2A\xA7\x92\x2A\xAB\xD2\x2A\xAF\x12\x2B\xB3\x52\x2B\xB7\x92\x2B\xBB\xD2\x2B"
"\xBF\x12\x2C\xC3\x52\x2C\xC7\x92\x2C\xCB\xD2\x2C\xCF\x12\x2D\xD3\x52\x2D\xD7\x92\x2D\xDB"
"\xD2\x2D\xDF\x12\x2E\xE3\x52\x2E\xE7\x92\x2E\xEB\xD2\x2E\xEF\x12\x2F\xF3\x52\x2F\xF7\x92"
"\x2F\xFB\xD2\x2F\xFF\x12\x30\x03\x53\x30\x07\x93\x30\x0B\xD3\x30\x0F\x13\x31\x13\x53\x31"
"\x17\x93\x31\x1B\xD3\x31\x1F\x13\x32\x23\x53\x32\x27\x93\x32\x2B\xD3\x32\x2F\x13\x33\x33"
"\x53\x33\x37\x93\x33\x3B\xD3\x33\x3F\x13\x34\x43\x53\x34\x47\x93\x34\x4B\xD3\x34\x4F\x13"
"\x35\x53\x53\x35\x57\x93\x35\x5B\xD3\x35\x5F\x13\x36\x63\x53\x36\x67\x93\x36\x6B\xD3\x36"
"\x6F\x13\x37\x73\x53\x37\x77\x93\x37\x7B\xD3\x37\x7F\x13\x38\x83\x53\x38\x87\x93\x38\x8B"
"\xD3\x38\x8F\x13\x39\x93\x53\x39\x97\x93\x39\x9B\xD3\x39\x9F\x13\x3A\xA3\x53\x3A\xA7\x93"
"\x3A\xAB\xD3\x3A\xAF\x13\x3B\xB3\x53\x3B\xB7\x93\x3B\xBB\xD3\x3B\xBF\x13\x3C\xC3\x53\x3C"
"\xC7\x93\x3C\xCB\xD3\x3C\xCF\x13\x3D\xD3\x53\x3D\xD7\x93\x3D\xDB\xD3\x3D\xDF\x13\x3E\xE3"
"\x53\x3E\xE7\x93\x3E\xEB\xD3\x3E\xEF\x13\x3F\xF3\x53\x3F\xF7\x93\x3F\xFB\xD3\x3F\xFF\x13"
"\x40\x03\x54\x40\x07\x94\x40\x0B\xD4\x40\x0F\x14\x41\x13\x14\x26\x75\x03\xB7\x18\x94\xA2"
"\x6A\xC0\x11\x14\x54\x42\xAF\xF3\x22\x4C\x90\x53\x2C\x34\x28\x74\x02\x43\x27\x94\x43\x77"
"\x13\x93\xF8\xCF\x25\x3E\x14\x09\xF3\x0C\x80\x50\xAF\x43\x4F\x54\x36\x23\xC4\x44\xFB\x6F"
"\x3C\x56\x74\x0C\x45\xAD\x03\xC3\x72\x37\xD6\x68\x8D\x1E\x10\x45\xFD\x85\xCB\x6E\x74\x35"
"\xB2\x8B\x45\x78\x74\x30\x28\x70\x43\xC7\x12\x6B\x40\x54\x47\x0F\xE2\x40\x82\xB4\x48\xFB"
"\x0A\x92\xE4\xB0\x22\x94\x50\x84\xFE\x0F\x79\x80\x0E\x2D\x3D\x52\x4A\x5B\xC2\x9B\xC2\xE3"
"\x82\x26\xE0\x14\xC2\x63\x0F\xED\xB3\x2C\x5C\x74\x79\x36\x61\xB0\xEA\xAA\x4B\x25\x53\xD3"
"\xC6\x34\x4C\xCA\x14\x2E\x4C\x80\x91\xC6\x64\x1B\x1C\x21\x18\x9D\x4F\x12\xE5\x34\x47\x6C"
"\x14\x7D\xCA\xCA\x2D\x3D\x72\x25\xFD\x29\xC9\x4E\x4E\xD0\xEE\x13\x2C\xAA\xB4\xB5\x1A\xD0"
"\xDB\xC4\x0E\x4F\x6F\xF2\x3B\x7A\xAD\xD7\x62\x34\xF0\x86\x89\x45\x7E\xB2\x4D\xA6\x25\xFD"
"\xB8\x8E\x45\x26\x95\x07\xEF\x94\xD0\xDC\x52\x25\x21\x0F\xE6\xFA\x06\x76\x46\x14\x2D\x69"
"\x4A\x59\x82\x52\x41\x18\x55\xF4\x6C\x32\x1E\x2B\xAC\x27\x25\x92\x49\x2D\xAF\x79\x56\x03"
"\x65\xE6\x61\xD8\xDC\xCD\x89\xAC\x2F\xAA\x8A\x42\x00\x9B\x50\x58\xEC\xB4\xA3\x1C\x75\x2E"
"\xA9\xC9\x47\x04\x51\x50\x27\x62\xCE\x9A\xED\x59\x88\x14\x77\x78\xCD\x19\x1C\x81\x57\x3B"
"\x95\x12\x0F\xB2\x2D\x90\x74\x23\x15\xA3\x55\x29\x42\x4F\xF7\xD4\xE5\x60\xAF\x27\x7F\xCF"
"\xEB\x6A\x30\xFF\x28\x6C\x1E\xFE\xD0\x20\x18\xF1\x49\x7B\x15\x04\x8B\x49\x26\x2E\xD5\x5C"
"\x6B\x4B\x26\x93\xD2\x19\xB6\x61\x13\x65\xB1\x97\xF4\x2D\x57\x21\xEE\x00\x29\xC2\xF6\xEE"
"\x43\x0C\xA1\x2E\x11\x8F\x4E\x4F\xA4\xF5\x1A\xB7\x82\x48\x31\x92\xA6\x82\xE1\x23\xC1\xEB"
"\x21\xBC\x6C\x54\xEF\x8F\x0D\x75\xF2\x5A\x07\xF6\x20\x4C\x40\x61\x37\x0D\x03\x5D\xA6\x3D"
"\x44\x40\x62\x23\xEB\x7E\x26\xB2\x40\x0E\xA4\x0B\x43\xC7\x63\xCD\xD1\x93\x06\xE2\x63\x5D"
"\x12\x09\x4C\xAF\x64\xA7\xE5\x40\xD8\x6C\x3D\x00\xD6\x48\x6F\x0B\x39\xEE\x35\x22\x09\x95"
"\x5D\xB3\x30\x53\xF5\x71\x3D\xC0\xF4\x21\x27\xE0\x0B\x65\x22\x65\xF3\xAC\x53\x86\xB5\xE8"
"\xD4\x8D\x27\xB5\x54\x51\xCF\xE4\x67\xD7\xB0\xBA\x80\x56\x52\xE2\xA3\x05\x5D\xF6\x6E\xB0"
"\x90\xA2\x00\x42\x6A\xE1\x6B\x39\x28\xF5\x1E\x69\x4A\x64\xE7\x90\xFA\xBE\xB5\x08\xB1\x76"
"\x11\xB5\x21\x05\xFD\x05\x75\xFA\x29\x2E\x36\x61\x27\xC6\xF6\xA4\x9E\x43\x67\x13\xAC\x66"
"\xFB\x31\x2A\x84\x36\x23\x9D\x94\x56\xB8\x6F\x30\x22\xA4\x5A\x15\xEF\x50\xEF\xB1\xCB\x16"
"\x52\x2E\xE4\x56\xEB\x40\x24\x6D\x62\x22\x6F\x15\xE2\xA9\x8E\x71\x6B\x71\x62\x13\x9A\xB5"
"\x1D\x31\x89\x63\xE7\xCE\x35\xA0\x16\xC8\xC2\x68\x02\x12\x57\xB4\xAE\x55\xE6\x90\xCB\x05"
"\xF3\x91\x4D\x9D\xE1\x34\x7C\x24\x4E\x5D\x12\x73\xB5\x35\x55\x81\x8F\x45\x8E\x0B\xB7\x6A"
"\x60\x8D\x42\x17\xEE\x3E\x57\x66\xDB\xB1\x35\xF2\x76\x24\x54\x22\x26\x04\x43\x2D\xCE\x42"
"\x36\x4C\x75\x2F\x8B\x75\x5A\x24\x72\x69\x6F\x12\x6E\xD0\x24\xEC\x56\xA3\x76\xFA\xF1\x64"
"\x72\x8E\x64\x2D\xD7\x1F\xB9\x35\xFC\x82\xA2\x2F\x20\x36\xF9\x48\x97\x19\x0B\x43\x72\x07"
"\xC7\x75\x15\x52\x31\x5C\xB6\x26\x32\xE3\x27\x66\xA2\x2D\x04\x23\x77\x33\x73\x54\x0A\x57"
"\xA9\x16\x83\x7C\x1F\xB2\xC9\x3C\x90\xD3\x18\xA4\x91\xCC\x4A\x37\x7E\x11\x1A\xA7\x65\x0B"
"\x5B\x8A\x45\x90\xC0\x0C\x34\x91\xDA\x58\x37\x7F\x6A\x40\x15\x97\x92\x7D\xD9\xA3\x4C\x9C"
"\x55\x7A\x05\xD8\xCD\xF8\xD7\x16\xFC\x37\x74\xD6\x03\x7A\x27\x42\x41\xAA\xD7\x12\x9F\x17"
"\x54\x1F\x49\x84\xDA\xE2\x1C\xC6\xA4\x4C\x08\x97\x45\x50\x51\x14\x53\x21\x7E\x4D\xC7\x7E"
"\xF1\xD7\x0C\xF4\x37\x83\xAF\x60\x83\x3B\x38\x74\x34\x38\x16\x2D\x4C\x1E\x55\xB6\xD1\x4C"
"\xD1\x04\x94\x50\x77\x53\x2F\x52\x09\xCA\xCE\x7A\x30\x95\x1A\x56\x82\x6F\x4B\x86\x01\x77"
"\x08\xCA\x03\x79\xA3\xEE\x75\xC7\xB1\x67\x33\x22\x57\x89\xF7\x39\x00\x37\x21\x86\xCA\x06"
"\xC5\xB1\x35\xEA\x82\x67\xDD\xC5\x6E\x99\x2F\x47\xE8\x20\x14\xE9\xEE\x7F\x79\x6F\xB8\xFA"
"\xE5\x89\x65\x22\x8A\x6D\x96\xF3\x7A\xF7\x7A\x13\x12\xF4\xC4\x11\x83\xE3\xC3\xFD\xC6\x06"
"\x6A\xB7\x18\x57\x19\xF7\x29\x94\x38\x5D\x2D\x57\x8D\xCF\x8D\x8D\xC9\x62\x88\x1D\x90\x4E"
"\xB1\x95\xDE\x78\xCA\x55\x89\xF6\xEB\x84\x47\xC5\x62\xAD\x5C\x65\xB8\xE3\x50\x77\x87\x2D"
"\x36\x84\x20\x36\x8E\xE7\xA6\x8B\xB3\x35\x2C\x02\xB8\xB2\x04\xF1\xFB\x5C\x08\x49\x40\x62"
"\x7E\x55\x6A\x7B\x54\x08\x0D\x75\x16\x6F\x6B\x2F\x52\x3E\x62\x08\xBA\x36\x86\xDD\xF6\x71"
"\xC1\xF8\x60\x8D\x37\x68\x6D\xB6\x20\x64\x63\x16\x00\x01\x5A\xB6\xC9\x45\x6B\x72\x4F\xC8"
"\x17\x52\x6D\x69\x8E\x5F\x02\x96\xA3\xEE\x7C\x6F\x79\x6E\xCE\x37\xF0\x16\x58\x76\x64\xAA"
"\x40\x12\x8B\x88\x0A\x91\x71\x3E\x2B\xBA\xE8\x49\x85\x8E\xF9\x25\xF0\x0F\x87\x71\xC2\x71"
"\x47\x4A\x11\x47\x97\x53\x83\x8F\x3A\x82\xB8\xCE\x8A\x46\x4F\x41\xD4\x98\x6A\x43\x18\xB6"
"\x36\x7B\xAD\x59\x81\x52\x82\x6E\xBF\x98\x4F\x07\x18\xBB\xC2\xF8\x20\x63\x77\x47\x77\x42"
"\x30\x6A\x77\x24\xDE\xA2\x76\xF5\x87\x81\x06\x43\x7E\x72\x0A\x9C\xD9\x4F\x7C\xB2\xD8\x7C"
"\xE1\x8E\xB7\xD4\x36\x81\x0F\xCB\x54\x02\x88\x90\x3B\x4F\xA0\xE3\x6D\x99\x0F\xA9\x7C\x8A"
"\xCA\xA2\x24\x99\x3D\x90\xB8\x49\xB4\x61\x4C\xE6\xC1\x0A\x36\x6D\x60\x99\xF7\x6D\x9D\x77"
"\x3B\x8C\x10\x8F\x71\x42\x5D\x42\x39\xF9\x7C\x39\xC7\x7A\xCB\x30\xE4\x70\x02\x6A\x41\x18"
"\xC2\xED\xF5\x80\xD2\x20\x90\x80\x13\xBA\x19\x4A\x4B\x99\x1F\xBF\xD9\xE4\x02\x02\x22\x18"
"\x21\x3C\x4C\x02\x10\xC2\x03\x10\x6A\x82\x48\x99\xEE\x66\x2F\x99\x6D\x15\xD1\xA7\x2B\x56"
"\xA1\x0D\x03\xA4\x0D\x02\x15\x45\x98\x8A\x20\x8C\x61\x6B\x38\xA1\x45\xD0\xA4\x9E\x5A\xE1"
"\x8C\xCA\x04\xA8\x89\xFF\xF8\x15\xDF\x22\xCF\x30\x1C\x79\xE7\x82\xA6\x2A\xDE\xE2\x0A\x6A"
"\x99\x45\x69\xCE\xDF\xD8\xA3\xE6\x16\xA8\x6A\x87\x66\x8C\xD5\x9A\x8E\x06\x79\xAE\x38\xA1"
"\x06\x28\x76\x48\x4C\x40\x10\x36\xA3\x7A\x1B\xF8\x9E\xCF\x11\x82\x95\x76\x3E\xC8\xB5\x55"
"\x87\x9A\x8F\xF9\xCB\xAC\x73\x43\xA3\x2D\xB9\x25\x00\x1B\x8B\xE1\x51\xD3\x56\xF8\x8A\x89"
"\x56\x1A\x71\xD0\xE8\x1E\x7B\x50\x01\x58\xAC\x19\xF8\x5D\xCB\x03\x79\x8E\xD6\x19\xEE\x79"
"\xD7\x86\xCD\x11\x12\x0D\xF5\x5C\x04\x77\x89\x02\x89\xC9\x0A\x57\x29\xAE\x28\x58\x0F\xE9"
"\xB6\x01\x79\x6B\x6E\x64\xD2\xBA\x40\x5A\xC3\xA3\x65\xD8\x21\x58\x9B\xD6\xEE\x90\xE7\xBE"
"\x47\x51\xD3\x8D\xD7\xCE\x64\xB3\xF5\x71\xAD\x67\x5A\x20\xB2\xF4\x0B\x3B\x10\x6B\xD4\xD0"
"\x50\x9A\xD7\xEE\x26\xEE\xE0\x7E\x1A\x84\x78\xA8\x50\x04\x31\xF4\x8E\x3B\xBA\xF1\x6E\x6B"
"\x8E\x16\xBB\xCB\xE3\xB7\xCF\xD0\xDD\x52\x81\xFA\xDA\xD6\xE3\x16\xEF\x8F\x7B\x6F\x4F\xC7"
"\x7B\x6D\xA9\x23\x69\x83\xAD\xB4\x09\xCF\x06\x93\x78\x60\x4C\xF4\x60\xA2\xC2\x54\x69\x26"
"\xD3\x6E\xE6\x09\xA1\x84\xFC\x3A\x5A\xE2\x50\x50\x5C\xEF\x76\x3C\x78\x39\xBF\x32\x22\xBF"
"\x19\x3B\x28\x66\x19\x55\x3D\x0B\xAD\xF2\x5A\x05\xFF\xF6\x74\x89\xC2\xF1\xBE\x24\x4D\xC0"
"\xF6\xCD\x7E\xEA\x5C\xAC\x99\xBE\x59\x6D\x6F\xC9\x4B\xAA\x2A\xFC\xC4\x3E\x92\xC3\xC5\x8A"
"\x8E\x24\x97\xA5\x36\xC1\x72\x85\xB9\x51\xE5\xD0\xC4\xC3\x3B\xC3\x4F\xB0\x84\xE0\x58\xAF"
"\xA8\x45\x61\xAA\x63\x79\xF4\x98\xB0\x5B\xE6\x40\x0A\x97\x43\x2C\x67\x5E\x6A\x4D\x5D\x92"
"\x43\x99\x83\x62\x53\xCF\xD8\x8B\xBB\x35\x98\x57\x05\x21\x7E\xDC\x25\x2A\x79\x2E\x8A\x18"
"\x83\x12\x3C\x1F\x37\xB9\x47\xA9\x2F\xBD\x91\x19\xE1\x8A\x17\x90\x75\xDC\xB0\xCF\xAA\xCA"
"\x57\x9C\x2F\x58\xCB\xCA\x9B\x3C\x83\xA0\x76\x64\x98\xBC\x40\x9E\xBA\xB4\x08\xBA\x66\xCF"
"\x5C\xDE\x94\x4B\x4D\xAF\xCE\x74\xBB\x43\xBF\x41\x4C\x8B\xA9\x57\xC1\x53\xFA\x59\x57\x4C"
"\xA5\xD1\xFC\xCE\xD5\x9C\x91\xC9\x24\x82\x63\xC4\xB9\x1D\x6E\xCF\xF1\x27\x09\x1B\x70\x1E"
"\xA6\xBC\xED\x42\xBC\xCE\xBB\x4F\xA6\xA7\x05\x09\x52\xE1\x5D\x85\xA1\x18\xE9\x2D\xC4\xA2"
"\x37\x90\x81\x5A\xAB\x64\xC9\xA0\xFE\xD4\xE6\xEE\x5C\xCA\x6A\xB8\xD3\x87\x10\xCC\xCD\x6E"
"\x9D\x97\x02\x10\x94\x57\x94\xED\x2F\xD4\xCD\x59\xFC\x9C\xDA\xBA\xB3\xA9\xF0\xCE\x59\x55"
"\x57\x03\xA9\xFE\xDC\xCD\x0B\xE9\xAB\x6D\x7D\xE4\xA6\x48\xD3\x21\xFB\x4F\x07\x1A\x2D\x9E"
"\x79\x7D\x09\x18\xBC\x5F\xB6\x86\x81\xDD\x32\x0C\xB6\x0E\xC9\x58\xD1\xF3\x71\xAF\xDB\xD1"
"\xA2\x1B\xCE\xBA\xDE\xB6\xD7\x31\x3D\x84\x2A\x2F\xDA\x33\xF7\xBC\x85\x6F\xC8\x59\x4B\x9F"
"\x1D\xBB\x99\x57\xC2\xBC\x25\xDB\x25\x28\x6B\x9F\xC2\x9D\xA3\x5F\xBD\xAC\xF3\x9C\x94\xD5"
"\x64\x3D\xD6\xBB\x51\x63\x29\x91\x00\x79\x2C\xA4\x1A\x2E\x94\x9C\x98\x3F\xBD\x95\x55\x27"
"\x72\xCA\xF7\x77\xB5\x3A\xB1\x3F\x91\x46\xD7\xA8\x67\x7D\x64\xE0\x79\x03\xD5\x11\x2C\xB8"
"\xD9\x51\x9A\xBD\xFD\x97\xCD\xAC\xDA\x01\xBD\xD9\xBD\x2F\x72\xAD\x19\x14\x0F\x1E\xE3\x31"
"\xDE\x1C\x73\x5A\x07\xB3\x9A\xD2\xFD\xF8\xC5\xE9\x1D\xB3\xDC\x5A\x55\xE1\x45\xD7\x43\x82"
"\xDC\x0D\x35\xDF\x19\xF0\x7C\xE4\x5B\xB8\x43\xCB\xBC\xCB\x9D\xD0\x69\x98\xD3\xF7\x02\x09"
"\xA8\x0F\xDE\xA1\xBC\x75\x11\x2E\xE5\x7D\x5D\xDD\x19\xFA\xCD\xF7\x51\x2E\x66\x3B\x7F\x98"
"\x79\xD6\x61\xDD\xD3\x05\xB9\xAB\x33\xE8\xD8\x8C\x3E\xD0\xD3\xF1\x78\x1D\xDE\x90\x0F\x16"
"\xC9\x8B\x39\xBD\xAA\x9E\xB6\xFE\xFD\x32\x64\xB7\xDF\x77\x7E\xE5\x55\x5E\xB5\x6E\xBC\xD4"
"\x43\x2B\x7D\x11\x7C\xBB\xB0\x5E\x2B\x52\x21\x64\x28\x10\xDE\x1B\x7D\x4D\x88\x0A\xED\x5B"
"\xDD\xE3\xBD\x9E\xC8\xF7\x51\xE7\xD9\xD1\xE9\xFF\x5D\xE6\xB5\xA9\xEC\xD7\x3C\x83\x54\x2E"
"\xEF\x59\xBD\x9B\x34\x11\xAE\x71\xAB\xEF\x85\x63\xB2\x66\xDE\xFB\x88\x83\xCF\x0F\xBA\x86"
"\xB7\x5E\x73\x75\x58\xD6\xBF\x1E\xE0\x5F\x8C\xCE\x13\xA6\xB4\xDB\x6B\x8F\x83\x5E\xE2\xD3"
"\x5C\xF1\x51\xE9\xCF\xFC\x9D\xDD\xB5\xEF\xA8\xBB\x8D\xF1\x3F\x1F\xC4\x1F\x82\x5C\x47\xFF"
"\xA5\x39\x3F\x1F\xDD\x1E\xEF\x03\x0B\x4D\xEB\xAA\xBF\xF7\x3E\xB4\x52\xDC\xF1\xE7\x6A\xF6"
"\xEF\x2A\xD8\x7C\x6B\xF6\x6B\x7F\x95\x02\xFE\x8E\xDB\xB6\xC0\x0C\x1A\xB0\xEC\xCC\xBF\x6E"
"\xFD\xD2\x17\xCB\xBF\x8F\x1E\xE8\x03\xBB\x63\xF7\x0F\x8B\x36\x7A\xB2\x8D\x2E\xF9\xA1\xFA"
"\xD8\x8D\xFF\xB0\xED\x3A\xFB\x7A\x3E\xF7\x0B\x95\xBB\x4C\x0A\xD9\x53\x8B\x4A\x22\x02\xF6"
"\x7B\x14\x9D\xFB\xF1\xD9\xDB\xB1\xB9\xE8\x5E\xEE\xAE\xDF\xEF\x05\xFF\x84\x94\xDB\xFD\xEB"
"\xDE\x2E\x2C\xAB\xCB\xE9\x7F\x05\x9F\xEC\x66\x00\xF7\x8F\xA1\x0C\x00\xC0\x80\x02\x07\x12"
"\x04\x38\x64\xDE\xBF\x84\x09\xE7\x0D\x21\xC8\x48\xA1\x42\x73\x22\x0A\x52\xAC\x28\xD0\x0B"
"\xC4\x85\x0D\x2D\x72\xEC\x28\xC2\x5C\xC6\x7F\x12\x0B\xD6\x98\xD3\xF1\xE4\xC5\x90\x2A\x15"
"\x3A\x9B\x80\xD2\xE2\xC7\x90\xB3\x1C\xAA\x64\xF4\xB2\x60\xCC\x8C\x5E\x68\x66\x6C\x79\xB3"
"\xE0\x04\x67\x21\xE7\xA5\xA2\x63\x46\x90\x36\x95\x3B\x7F\x56\xCC\x99\xD0\x26\xD3\x9B\x41"
"\x43\x2E\x15\xF8\xB0\xA7\xCB\xA8\x03\x9D\xFE\x3B\x25\x70\x16\x44\xA8\x5A\x51\x1E\x54\xC8"
"\x70\x2C\xDA\xB4\x68\xC1\xB2\xCC\xAA\xF6\x2D\xDA\xAB\x10\x47\xC2\x6D\x0A\x32\xE3\xCC\x81"
"\x72\xC3\xA6\xDD\x9B\x90\x6E\x5D\x8A\x7E\x45\x4E\x0C\x7C\x73\xF0\xBF\xAA\x81\x0F\x9A\xAB"
"\x41\x91\x2D\x44\x9F\x86\xB9\x26\x94\x5C\x26\x69\x4D\xB5\x94\xFF\x59\xC6\x1C\x52\xEC\x58"
"\x8C\x19\x01\x03\x98\xB0\x49\xA5\x64\xB8\xA2\x33\x82\x06\x50\x46\x58\x61\xB5\x53\x43\x3A"
"\x73\x1C\x70\x82\xA3\x79\xA4\x65\x0B\x5D\x99\x39\xED\x6C\x9D\x56\x55\xEE\xFE\x59\x16\xE2"
"\xD9\x81\x90\x15\xE6\x8D\xEB\xFB\x79\xF1\xB1\xC7\x13\x2A\x36\x6C\x10\x21\xF2\x8D\x5F\x65"
"\xC2\x3D\xC5\x57\xA0\xD3\xE8\x8B\xB1\xFF\x4B\x6E\xFD\x3C\xEF\xEF\xE8\xD7\x17\x5C\x0D\xB1"
"\xB9\xC0\x09\x72\xE6\x55\xD7\x1A\x1C\xA2\x62\xC4\xE2\x5F\xBA\x67\x0E\x74\x7E\x7D\x5A\xF5"
"\x97\x10\x7C\xB7\x01\xC8\x1E\x62\xAD\xBD\x35\xDF\x42\x72\x10\x24\x87\x4A\x05\xC2\xB5\x59"
"\x79\xDB\x90\xA7\x94\x66\x77\x65\x34\x8F\x85\xCF\x05\xF8\xD3\x60\xF3\xD8\x32\xA2\x2D\xDB"
"\xF8\xF6\x61\x68\x2B\x39\x43\x07\x1D\xB5\x60\xA7\xE0\x58\x88\x25\x24\x8C\x51\xA9\x90\x07"
"\x23\x5A\xD3\x3D\xF7\xD4\x5B\x32\xD6\x42\x87\x23\xE7\xAC\x84\x23\x7F\x21\xED\xB6\x19\x8A"
"\x2F\xDD\xB7\xA3\x42\x44\x46\xE5\x9E\x79\xE8\x0D\x78\xA4\x86\x0A\x25\x29\x95\x77\xFF\xC0"
"\xB8\x5A\x2D\x6E\xA1\x37\x5D\x94\xEC\x89\x49\xD6\x85\x57\x8E\x59\x17\x85\xDA\x94\xE1\xD2"
"\x04\x48\xB8\x58\x99\x97\x31\xAE\xF4\x63\x90\x43\x66\xA8\x92\x9A\x6C\xBA\x89\x5D\x6A\x68"
"\xA5\xB9\x66\x69\x7B\xC2\xB9\xDE\x80\x61\x02\x97\x25\x72\xA9\x98\x71\x94\x67\xC2\x59\x47"
"\x21\x93\x86\x32\x05\xE9\x8E\x92\xFE\xB4\x1C\x93\xEF\x59\xA7\x23\x74\xB1\xA5\x45\x29\x71"
"\x9E\xBE\xC5\xA9\x4A\xF3\x38\xF8\x16\xA8\x2B\x49\xC8\xD4\x60\x7D\x02\xC0\xA9\xA5\x3F\x4D"
"\x80\x68\xA6\x4E\x46\xB5\xD7\x7E\x70\xB5\x1A\x27\xAC\xDA\xBD\x05\xC8\xA9\x05\xCD\xA2\xE6"
"\x99\x43\x38\xB3\x0D\xB2\xCE\xF8\x7A\x26\xB3\x14\x41\xB9\x6C\xB3\xE7\x61\x9A\xA9\x99\x27"
"\xA5\x1A\x21\x5C\xD3\x32\x59\xED\x49\xDA\xEE\xC8\xAD\x56\x98\x7A\x15\xD8\x80\x99\x12\x76"
"\xDE\x92\xA5\x0A\x33\x9A\xA8\x51\xA5\x3B\xD4\xBA\x73\xB5\xFB\xD3\xB5\xA8\xC5\xF9\xD6\xBB"
"\x2B\x81\xDB\x51\xB9\xCF\xD9\x1A\x55\x0D\xB5\xF8\x36\x8F\x23\xF7\xA2\xD5\xAF\x6F\xAE\x46"
"\x35\xAD\x84\x53\xCE\xAB\x15\x83\x95\x06\x0B\xD7\x7D\xAB\x1A\xC6\x30\x41\x0E\x47\xBB\x31"
"\xC7\x1D\x17\x84\xEB\xC3\x1E\x7F\x5A\x65\xA6\x0A\x3F\x69\x6E\x5B\x13\x92\xCC\xA4\xC9\x93"
"\xAE\xBC\x63\xCB\x70\xC9\x91\x6C\x19\xE7\xC9\xF8\xED\x7A\x37\x27\xA4\x4D\x0D\x98\xC6\x7C"
"\xD8\x8E\x3C\xFB\x6C\xF0\x4D\xA4\x32\x79\x0A\xD1\x6A\x21\x4C\x5B\xD2\xAC\xA2\xAC\x25\x7A"
"\x26\x38\xE2\x19\x51\x48\xA0\x47\xEB\x8E\x5D\xA6\xC7\x1A\x4F\x91\x35\xCD\x94\x7C\x42\xAA"
"\x74\x8E\x1C\x5F\x47\xC5\xD5\xBF\xC0\xF5\xA6\x5E\x40\xBB\x8A\xFC\x36\xDC\x62\x2E\xF7\x73"
"\xDC\x4C\x79\x71\x61\xA4\xD0\x6A\x85\xF5\x73\x5A\xD7\x75\xF7\xD3\xB1\xFE\x04\x38\xCA\x82"
"\xD7\xDD\x91\xCE\x2A\x4D\x6C\x5D\xBE\x5D\xB9\x84\x69\xDA\x27\x35\x8E\x34\x00\x90\x2B\xFD"
"\xF4\x3F\xB5\xD8\x96\x73\xA6\xC4\x06\x56\x06\xDE\x78\xEA\x1D\x98\x5C\x91\xCB\x29\x31\x5C"
"\xBD\x12\x84\xB1\xCD\x66\x39\xA2\x03\x7B\x3A\xEE\x1B\x95\xEA\xCA\x71\x77\x38\xEE\xB9\x9F"
"\x5D\xA5\xE9\xBA\x5B\x64\xB4\x4A\x9A\x93\x1E\xE9\xE2\xA9\x87\x3E\xE7\xE6\xA3\x1E\x1F\x7C"
"\xF2\xBE\xBF\x34\x44\xA3\xBE\x69\x33\x7A\x60\x13\x08\xDC\xD3\xE6\x98\xCE\x6E\x91\xF5\xB4"
"\x65\xEF\xA8\x73\x95\x6E\x93\xCA\x15\xCD\xCA\x21\x76\xF0\x56\xA3\x7B\xFE\x4A\x64\x9F\x09"
"\xD9\xF6\x4C\x05\xBC\x12\xC1\x66\x17\xC9\xEE\x56\x2B\xC7\xDF\x51\x70\xB9\xBE\xF5\xAC\x98"
"\x34\x06\x1E\xFD\x39\xAF\x80\x06\x1C\x88\xEC\x0E\x38\x16\xDC\x2C\xEF\x1F\xE7\x28\xD8\x79"
"\xE6\x57\x2A\x08\xA2\x87\x81\xBE\x79\xA0\xFD\xC0\x96\x9B\x0B\x52\x50\x81\x37\xB9\x8C\xF4"
"\x6A\xD6\xAC\x09\xD0\x21\x15\xE4\xCB\x60\x5D\x48\x68\xC2\x2B\xA0\xD0\x83\x51\x31\x81\x19"
"\x38\x31\x22\x3A\x5C\xC1\x04\xCC\x9A\xC0\x15\x04\x31\x43\x16\xDE\xB0\x37\xFE\x0B\x0C\x12"
"\x4A\x68\x0B\x41\xF0\xD0\x85\x7E\xD2\x10\xDD\xD4\x02\x32\x23\x32\xB1\x89\x1C\x03\xA0\x13"
"\x6F\x02\x43\x47\x8C\x48\x10\x66\x80\xDD\x99\x82\x98\x8A\x21\x16\xF1\x4C\x53\xAC\xE2\x15"
"\x99\xF5\xC5\x21\x86\x31\x8A\x3F\xD1\xA2\x2D\x1C\x51\x46\x33\xB2\xB1\x8D\x6E\x24\xC8\x71"
"\x92\xF8\x46\xB8\x4D\xA7\x77\xEE\x5A\xDB\x3F\x2C\x36\xC7\x3D\xF2\x51\x2F\xF2\xEA\x23\x20"
"\x03\x29\xC8\x41\x12\xB2\x90\xCE\x83\xE1\xA2\xD4\x67\x48\xB8\xB9\x67\x7F\x2F\x41\xDB\x22"
"\x23\xE9\xC4\xB9\xB5\x50\x92\x96\xBC\x24\x26\x33\xA9\xC9\x4D\x72\xB2\x5B\x66\xA1\x9E\xF1"
"\x90\x83\xAC\x51\x22\x0B\x10\x9D\x3C\xE5\x62\x48\x49\x4A\xAE\xA1\xB2\x95\xAE\x7C\x25\x2C"
"\x63\x29\xCB\xC3\xF5\x2F\x64\xAA\xA1\xD6\x2C\x73\x69\x91\xA5\x59\x49\x97\xBE\xFC\x25\x30"
"\x83\x29\xCC\x61\x5A\x27\x71\xE5\x01\x25\x31\x4F\xE9\xAD\xEC\x24\xB3\x99\xCE\x7C\x26\x34"
"\xA3\xB9\xC9\xC6\x45\xC4\x96\xD2\xB4\x24\x35\xFF\x62\xCD\x6B\x72\xB3\x9B\xDE\xFC\x26\x38"
"\xC3\x29\xCE\x71\x92\xB3\x9C\xE6\x3C\x27\x3A\xD3\xA9\xCE\x75\xB2\xB3\x9D\xEE\x7C\x27\x3C"
"\xE3\x29\xCF\x79\xD2\xB3\x9E\xF6\xBC\x27\x3E\xF3\xA9\xCF\x7D\xF2\xB3\x9F\xFE\xFC\x27\x40"
"\x03\x2A\xD0\x81\x12\xB4\xA0\x06\x3D\x28\x42\x13\xAA\xD0\x85\x32\xB4\xA1\x0E\x7D\x28\x44"
"\x23\x2A\xD1\x89\x52\xB4\xA2\x16\xBD\x28\x46\x33\xAA\xD1\x8D\x72\xB4\xA3\x1E\xFD\x28\x48"
"\x43\x2A\xD2\x91\x92\xB4\xA4\x26\x3D\x29\x4A\x53\xAA\xD2\x95\xB2\xB4\xA5\x2E\x7D\x29\x4C"
"\x63\x2A\xD3\x99\xD2\xB4\xA6\x36\xBD\x29\x4E\x73\xAA\xD3\x9D\xF2\xB4\xA7\x3E\xFD\x29\x50"
"\x83\x2A\xD4\xA1\x12\xB5\xA8\x46\x3D\x2A\x52\x93\xAA\xD4\xA5\x32\xB5\xA9\x4E\x7D\x2A\x54"
"\xA3\x2A\xD5\xA9\x52\xB5\xAA\x56\xBD\x2A\x56\xB3\xAA\xD5\xAD\x72\xB5\xAB\x5E\xFD\x2A\x58"
"\xC3\x2A\xD6\xB1\x92\xB5\xAC\x66\x3D\x2B\x5A\xD3\xAA\xD6\xB5\xB2\xB5\xAD\x6E\x7D\x2B\x5C"
"\xE3\x2A\xD7\xB9\xD2\xB5\xAE\x76\xBD\x2B\x5E\xF3\xAA\xD7\xBD\xF2\xB5\xAF\x7E\xFD\x2B\x60"
"\x03\x2B\xD8\xC1\x12\xB6\xB0\x86\x3D\x2C\x62\x13\xAB\xD8\xC5\x32\xB6\xB1\x8E\x7D\x2C\x64"
"\x23\x2B\xD9\xC9\x52\xB6\xB2\x96\xBD\x2C\x66\x33\xAB\xD9\xCD\x72\xB6\xB3\x9E\xFD\x2C\x68"
"\x43\x2B\xDA\xD1\x92\xB6\xB4\xA6\x3D\xED\x33\x6B\xE0\x88\xA5\xD6\xA0\x79\x98\x95\x83\x23"
"\xB5\x5A\x03\x41\x88\x0C\x87\x01\x9D\x8F\xE1\x7C\xCA\x98\x6D\x3A\x76\x56\xE7\x62\x2B\x83"
"\x62\xBB\x40\xA1\x08\xF7\x9C\xBE\x1D\x94\x51\x09\x27\xC7\xC5\xD6\xC0\x33\x7A\x14\xEB\x71"
"\x7F\xDB\x2C\x11\x60\x26\xB7\xF0\x6C\x2E\x2B\x89\x0A\x21\xB6\x4D\x36\x62\x1A\x49\x2B\x76"
"\xB9\x2B\xA6\x1A\x54\x69\xB9\x4E\xAC\x01\x27\x8E\xE5\x0C\x4E\xB8\xF6\x80\xDE\xFD\x24\x51"
"\x11\x53\xDC\x92\x82\x30\x21\xC2\x23\x24\x62\xCC\x8B\xD5\xF7\x7E\xB7\x58\xA1\x7B\xAE\x19"
"\x25\x98\x11\xBF\x79\xD0\x68\x00\xC6\x29\xDF\xFA\xBB\x48\xE8\xD9\x71\x98\x83\xF9\x21\x1B"
"\x65\xD4\xE0\xAA\x1A\x4D\xBF\x02\x5A\xDE\x84\x0B\x08\xBC\x3C\x32\xB1\x5F\xF3\x3D\xE9\x04"
"\x96\x49\xB9\x45\xCA\xE5\xC3\xB0\xEC\xD7\x81\xDB\x88\x18\xEB\x6A\xD5\x68\x19\x7E\xC9\x76"
"\xF1\xD4\x5E\x33\x86\x18\x67\x46\x2C\x17\x84\xDB\x38\x01\x1D\x2C\xAA\x86\xE6\xCC\xD7\xF4"
"\x22\x19\xDD\x63\x0A\x72\x02\xAF\x19\x65\x2A\x44\x38\x26\x6F\x59\xB8\x89\x09\x4E\xF1\x56"
"\x71\xCC\x5B\xAD\xC8\xC8\x54\x81\x0C\x0E\xFA\x9A\xD4\x44\xC4\x40\xD9\x89\x16\xF4\xDE\x38"
"\x65\xB4\x89\x4A\xD2\x18\x8F\xDA\xEC\xE3\x97\x37\x54\x3C\xC3\xE4\xAB\xC9\x4D\xD4\x96\x89"
"\x37\x6A\x2C\x52\x3A\x63\xCA\xE4\xC2\xD6\x79\x8C\x76\xDF\x2B\x3B\xA3\x36\x00\x20\xAF\xA6"
"\xB6\xCC\xB4\xF5\xCC\xD6\x16\xC7\x12\xC6\x09\xC5\xC4\xDF\xCF\x8C\x13\x53\x3C\x93\xE4\xBB"
"\x5E\xCC\x11\x24\xC8\x70\x1B\xCE\x18\xA2\x0D\xD9\x93\xCD\x47\x57\xD0\xCC\x5A\x36\x64\x8D"
"\x33\xB2\x09\x9B\x0E\x26\xCE\x2F\x69\x95\x9D\x41\xA4\xE6\x8D\x99\x40\x07\xAE\xD6\x01\x99"
"\x65\xE5\x96\xE5\x74\x19\x77\x7B\x19\x31\x9B\x37\xA8\xA2\x19\xAB\x25\xC1\xBF\x01\x67\x4E"
"\xE6\x61\x4A\x48\x7B\xDA\xCA\xB9\x5E\x9E\xE7\xA4\x95\x29\x16\xDF\x2A\x54\x42\x5E\x9B\xB1"
"\xFF\xB7\xE7\x8A\xA6\xCB\xCD\x4A\x84\x08\xAE\x95\x6D\xDF\x58\x8F\xA5\x06\x66\x96\xB4\xAC"
"\xF0\x68\x6A\x66\x79\x27\xDA\x86\xD9\xB0\x78\xD5\xB2\x4C\x23\xA5\x7A\x98\x07\xF1\xB3\x25"
"\xA7\xC5\xEC\xE7\x45\xEF\xD7\x77\x5E\xF6\xB8\x6F\x63\xE6\x79\xBB\x71\x2A\x9C\xBE\xA5\xB0"
"\x2F\x5A\x2E\x7E\xD7\xE5\x21\xE6\xEE\xF4\x3C\x94\x3C\x26\xA9\x65\xB9\x97\xCC\x72\x4F\x8E"
"\x7D\xB7\x09\x5E\xA7\x85\x70\xB8\xAC\x0B\xBA\x37\x84\x4C\x68\x66\xDA\x92\x21\xDA\x38\x53"
"\x16\x6D\xA7\x8B\x0D\xC5\x19\x59\xA6\xCF\x98\x8E\xEC\x8C\x0E\x4A\x52\x04\x9C\xE0\x76\x45"
"\x56\xF3\xEF\x8D\xBD\x5A\x07\x1D\x0F\xA7\xB7\xC0\x8D\x96\x4D\x80\xFC\x2D\x26\x80\xF9\x4B"
"\xAC\x90\x0A\x13\x0D\xAC\xE7\x77\x72\x78\x2C\xEB\x95\x32\x8C\x5F\x48\x1B\x23\x3A\x5E\xBE"
"\x39\x0A\xAB\x71\x1B\x93\x99\x68\x22\x59\x73\xB0\x8B\x72\x83\x42\x89\xE5\x67\x82\x78\xBB"
"\x85\x09\xBC\x88\xFF\x32\x9B\xD2\xD5\x34\x1E\x6B\x7D\xC9\x10\xFD\x08\x29\x43\x31\x3A\x4A"
"\x00\x1D\xE4\xEB\x50\x45\xA7\xE9\xCA\x77\xD5\xD3\x3D\x16\xCA\x80\xC6\x34\x70\xC7\xE7\x80"
"\xE6\xFE\xF0\x3F\x16\xB9\xCF\x49\x0B\xCA\x2C\x80\x2E\x18\x0F\x75\xF3\x5A\x6A\xB7\x0F\x1E"
"\xAD\xDD\x31\x24\x98\x61\x8B\x6A\xBC\x79\x60\x28\xD3\x98\xE1\x80\xAF\x2E\x35\x48\x85\x97"
"\x28\x43\x70\xC9\xA1\x91\x13\x6B\xE4\x18\x0E\x65\x48\x44\xC5\x1B\x10\x87\x74\x98\xA1\x22"
"\x39\x87\x97\xF5\x2C\x47\x1B\x56\x33\x8D\xBD\xAE\xAE\x71\x87\xF6\x2B\xDB\xEC\x01\x7B\xE1"
"\x91\x3B\x90\xD9\x24\xBE\x7A\x69\xA7\x75\x37\x79\xC9\xA3\xF1\x36\x4A\xF2\xD1\xF2\x36\xFD"
"\xCA\x76\x6E\xBC\x55\x87\x32\x51\x1F\xC8\x80\x9C\x5F\x90\xFA\x32\x8F\xCD\x78\x34\x8F\x80"
"\xF5\xCE\xC6\x34\x0F\x98\xE2\x47\xC4\xCA\x7A\xA6\x72\xF0\x07\x87\xDD\x2E\x2A\xF1\x3D\xD3"
"\x2F\x2E\x4D\xE8\xAD\x24\xD9\xBF\x27\x3C\x9A\x23\x1F\xA7\x8A\xB1\x3E\x20\xFD\xF1\x02\x14"
"\xC5\xDF\xB6\x4C\x9F\xFC\x15\x5C\x01\x9E\xC7\x7B\x69\xDF\x99\x84\x5F\xFD\x99\x9F\x71\x5C"
"\x48\x98\xDC\xC7\xE8\xFD\xC4\xA2\xC5\x59\x78\xED\x08\xFC\xED\x5D\x95\x24\x87\xC8\x4D\xA0"
"\xEF\x90\x5F\xA9\x0C\x9B\x61\x94\x9A\x98\x88\x80\xB2\xC0\x11\xDE\x90\x5D\x47\x78\x8B\xE0"
"\x0D\x4F\xDE\x74\x13\x08\x2A\x04\x81\x49\x09\xFE\xF1\x91\xDB\x00\x44\xBA\xAC\x59\xB8\xC8"
"\x0B\x24\xB9\x60\xA5\xFC\x1D\xE2\x2C\x1B\x10\xF2\x4F\xCD\xE9\x00\x7F\x79\x20\xFF\x5C\x0F"
"\x44\x9C\xC3\x28\x89\xA0\xEE\x58\xDC\x0F\x0A\xE0\xA7\x05\x84\x8E\xA8\xA0\xAC\x3C\xD9\x78"
"\x14\xCE\x10\x16\x44\x15\x4E\xC4\xCD\x28\x60\xDD\x5C\x20\xCB\xF4\x5F\x40\x50\xC6\xE3\x49"
"\xE1\x99\xC9\x4C\x03\x39\x0E\xC9\x8D\xE1\x37\x41\x5F\xA9\xE8\xE0\x2D\x55\x93\x20\xB9\x4D"
"\xBA\xE8\x5C\x19\x56\x49\x5E\x2C\x87\x15\x5A\xC4\xBA\x2D\x5D\x5D\xFC\xA1\xF0\xC9\x5E\x0D"
"\x06\x86\xC8\xE1\x87\xF3\x28\x1F\xFA\xA1\x0A\xC9\x44\x89\x5F\xE0\x61\x45\x88\xA1\x42\x64"
"\xA0\x56\x28\x1D\x73\xF4\x5F\x7F\x48\xC4\xD2\x5C\x5F\xB4\x64\xDC\xED\xCC\x21\x7C\x79\x4C"
"\xF6\xF5\xDF\x90\x49\x8F\x03\x2A\x89\xA7\xE1\x19\x38\x1D\xE2\xB4\xDD\x5B\x1A\x06\x52\xAB"
"\x98\x80\xA7\x41\x22\x40\xF8\xC5\x52\xD8\x62\x0A\xA5\xE2\x27\x52\x8C\x2E\xCE\xDE\x92\xED"
"\x62\xE6\xBD\x8C\xD5\xE5\x8E\x27\x32\x5A\xB6\x0C\xC5\xA9\xE8\x08\x18\x52\x84\x8B\x8D\x60"
"\xFB\xA8\x0A\x19\xFA\x8C\x15\x34\x50\x1F\xEA\x8E\x25\xEE\x4C\xFB\x55\xC4\xD0\x88\xCC\xB4"
"\x40\xA2\x20\x86\xE2\xD1\xD9\x58\x38\x95\xA2\x59\x38\x61\x54\x94\x01\x89\xA4\xE3\xF7\x09"
"\x43\x3A\x8E\x08\xE8\xCD\x51\xD5\xD1\x62\x69\xE0\x11\x5D\xE8\xC8\x19\x52\x44\xBD\x98\x5A"
"\x3E\x8E\xC9\x1D\x7E\xC9\x1A\x72\x06\x19\xEA\x5E\xF0\x00\x49\xC3\xBD\x62\x5A\x18\x8D\x36"
"\xD0\x41\xD3\x65\xE3\x49\x90\x4A\x0B\xE2\xCB\xBE\x29\x99\xD4\x90\xC7\x32\x2E\x89\x36\xD4"
"\x9B\xF8\x31\x51\xBE\x9C\x83\xE9\x4D\x8D\xD7\x04\x63\xE7\x6D\x4C\xED\x54\xDC\x86\x94\x81"
"\xAE\xB1\xDB\xA8\xA8\xD2\x36\x14\x24\x12\x22\xD0\xB1\xA8\x24\x4C\xAA\x24\x27\x8A\x8C\x24"
"\x4E\x61\xB3\x61\x8E\x41\xAA\xD8\x8E\xC8\xE3\xAB\x5C\x48\x73\x48\xE0\x16\xC2\x91\x4A\xB2"
"\x64\x50\x32\xE3\x50\xBE\xDD\x98\x20\x89\x94\xC4\x24\x29\x8D\x4B\xEE\x20\xC6\xBF\xBD\x8B"
"\x89\x55\xDD\x0C\x7A\x5F\x48\x50\x22\x5A\x2C\xC9\x6E\x30\xD0\x32\x02\x00\xA8\xD4\x0F\x40"
"\x98\x80\x20\x9C\xA2\x02\x0D\xDC\xE2\x60\x57\x57\x02\x44\x26\x32\xA4\xDA\x00\xE3\x58\x58"
"\xCE\x9F\x61\x24\x87\x9D\x87\x00\x29\x0F\x4E\x52\x47\x21\x2D\x9A\xA4\xE5\x1D\x4A\xEE\x91"
"\xAF\x41\x4D\x1B\x22\x1D\x00\xF4\x07\x4F\xA6\x04\xFE\x04\x50\x5F\xC6\x0E\xDE\xB4\x24\x20"
"\x6D\xC6\x6E\x90\x8A\x3C\xAE\xDB\xC1\x15\x93\x31\x3E\xCA\xCA\xD8\x1E\x41\xD4\x40\x40\xF6"
"\x64\xC2\x6C\x26\x2D\x15\x5B\x80\x4C\x80\x20\x78\x26\x00\xF8\xC5\x3D\xF6\x48\x62\x9E\x1F"
"\x38\x02\xC0\xA2\x31\xE6\xC7\xB8\x65\x8E\xFC\xE3\x89\x80\x5A\x30\x64\xD7\x4D\xE2\x64\x35"
"\x3A\x4F\x82\x15\x26\x57\x90\x06\x57\xA4\x25\xE7\x05\x9A\x98\x0C\xC6\x69\x02\xCD\x22\xBA"
"\x52\xB9\xD4\x47\xBA\x14\xE7\x40\xC0\xA1\x29\xA6\x9F\x99\x31\x27\xF7\xE8\x22\xC1\x60\x9E"
"\x2B\xCA\x04\x69\xD6\x4D\xB9\x14\x26\x47\xC0\xE5\x13\x61\x08\x23\x86\x24\xA0\x85\x24\x44"
"\x56\xA6\x5D\xDE\xE5\x4C\xBE\x0D\x39\xEE\xE5\x5D\x9E\x5D\xBF\xA5\x22\x70\x12\xE6\xEA\x90"
"\x67\x79\xDA\x66\xA7\x99\x27\xED\xC1\x66\x27\x4D\x8B\xC2\x2C\x27\xBE\x28\xE1\x8E\xE4\x26"
"\x47\x70\x85\x6B\x56\x44\xE2\xD8\x9F\x01\xE6\xDE\x20\x4D\x8B\x80\x82\x8D\x99\xA5\x67\x7B"
"\x84\x0E\x2D\x8A\xDE\xB2\x70\xCA\xB8\x51\x68\x16\xA2\x27\x21\x89\x9C\xA4\xA1\x63\x3B\x1A"
"\x1A\x72\xB0\x63\x3B\xBE\xE3\x1C\x35\x4E\x57\x02\x65\xC6\xF8\xE2\x64\x34\x62\x51\xA2\x04"
"\x86\x8A\x49\x3F\xBE\xD2\x66\xAC\x8A\x7F\x1E\x24\xDE\xD4\x82\x5C\xCE\xE5\xA6\xBC\x64\xB2"
"\xB0\xA5\x47\x08\x23\x44\x3C\x64\x5B\xA6\x26\x20\xD5\xE8\x74\x6D\x60\x8B\x46\xC5\xA2\x49"
"\x67\x7C\x14\x9B\x13\x5A\x9F\x75\xD4\x25\xBE\x2C\x0A\x95\x56\xA9\x95\x9A\x81\x42\x22\x62"
"\x20\x31\xA0\x42\x08\xE9\xE5\xD0\xE1\x20\x65\x53\x45\x5A\x69\x17\xDD\x06\x99\x92\xA6\x94"
"\xD2\xE0\x61\xB2\x87\x52\xCA\x28\x01\x11\x44\x8C\x4A\x07\xDE\x40\x05\xF7\x0D\xE3\x1B\x15"
"\xE3\x84\xBE\x0C\x84\x7A\x4C\x9B\x36\x4B\x17\x6E\x4C\x8C\x09\x67\x82\x86\x04\xA7\x11\x68"
"\x92\x76\x8D\x7F\xF0\x69\x95\xEC\xE9\x0D\x9D\x64\x46\x60\xE5\xC1\x14\x22\x1F\xA5\x0B\xD1"
"\x7D\x24\x20\x11\xE7\x99\x60\xEA\x98\x14\xCA\xA1\xF2\x11\xA9\x04\xC8\x66\x48\xDA\x92\xC0"
"\x07\x39\x02\xE6\x1E\x75\xCF\x00\x9E\xA7\xA0\x0A\xD2\xA7\x8A\xE4\x85\x00\x27\x47\x70\x19"
"\x69\x52\x0A\xD2\x6C\xA3\xF1\xE1\x67\xB4\x70\x05\xA3\xA6\x9C\x5C\xCE\x9C\x61\x00\x1F\x9F"
"\x31\x1A\xDF\xC0\x6A\x6D\xCD\x22\x3F\x1A\xEB\x98\xDC\xA0\x2B\xB5\x6A\x8A\xEE\x9E\x9C\xDA"
"\x29\x40\xB0\x4E\x1F\x39\xA7\x8A\x60\x22\x52\x16\x12\xB3\xFA\xE9\xAB\x66\x27\x50\x68\x4B"
"\xF1\xE5\x99\x6C\x6A\x69\x86\xAE\xE6\xC6\xE8\xEA\x1E\x71\xE9\x42\x78\xDD\xAF\x4A\xEA\x1B"
"\xC5\xE9\xB0\x72\x2B\xC7\x8C\xE4\x7A\xC8\x6B\x7E\xAA\xE8\xB2\x4A\x28\x9C\x7A\x9A\x80\xFA"
"\x85\xC2\x70\x0A\x93\xC2\x91\x67\x40\x2A\xBA\xD4\x29\xBB\x3A\xCD\x71\x0E\x12\x64\xBA\xAA"
"\xA5\x32\xDF\xFB\x31\x6C\xA6\x38\xE5\x75\xE6\x64\xAE\x2E\xEA\x1C\x1D\xA2\xAF\xD2\x65\xC1"
"\xEA\xA4\x7D\xF2\xCD\xAE\xDE\xDF\x9A\x12\x0A\x91\xA2\x0B\xB2\xBA\xA9\x5B\x26\x48\x5A\xD8"
"\xEA\x00\xD9\x2B\x28\x26\x2A\x7A\x50\x17\xFC\x91\xA3\x6B\x4A\x2B\x21\x39\xE6\xBC\x94\x04"
"\xB8\x2E\xEC\xBC\x1E\x0F\x77\xC2\xE9\x5F\x4E\x22\x7A\xB0\x9F\xC8\x98\xAB\x1B\xF5\xCB\x64"
"\x46\x4D\x95\x96\xA9\x0D\xA6\x1B\xAD\xC8\x61\x14\x01\xED\x70\x86\xAC\x65\xD6\x1D\x2C\x49"
"\x65\x70\x66\x2C\x4A\x60\x4A\x71\x0C\x08\x4F\x92\x4A\x81\xE6\xEB\xCE\xB8\xD6\x92\x30\x66"
"\xA8\x2E\xD2\xBB\xC0\x1B\x0E\xE6\x46\x83\x72\xE1\xB6\x3E\x6D\x4D\xEC\x58\x11\xBA\x9A\x75"
"\xAA\x45\x4D\x2E\x84\xC2\x05\x26\xB9\x4E\xAC\xB8\xB2\x51\xB9\xB4\x22\x37\x5D\x05\x91\x64"
"\x09\xD3\x46\x91\xBC\x75\xAA\x1F\x5E\xAB\xC7\x42\x6B\x2B\xF9\x08\x41\x8E\xDC\x5A\x80\x59"
"\x40\x80\x8E\xB3\x06\x22\xE3\xDA\x2D\x67\x00\x0A\x40\x8C\x27\x98\xC6\xA6\xD4\x1A\xD2\xCD"
"\xD0\x48\xE5\xDD\x48\xD4\x66\x2E\xE3\xF4\x6C\x67\x22\x60\xE8\xA4\xAD\x36\x96\x8A\xE9\x71"
"\xC2\x39\xA0\xAE\x8B\x52\xEC\xD0\xAE\x5A\x05\xBD\x2D\xED\xD2\x6E\xDC\x36\xAD\xAD\x9C\x42"
"\xE0\x0A\xAE\xEA\xC6\x50\xEB\xFA\xA8\xB0\xF4\x2E\xEB\x0A\xE8\x10\xC0\xE4\xF1\x30\x21\x29"
"\x49\x01\x2A\x5D\x23\x81\xA0\x26\x6A\xD8\x82\x30\x1C\xCF\xBF\xEA\xDB\xE4\x0E\xAA\x4A\x54"
"\xAA\xCA\x0A\x08\xD4\x06\xD2\x35\xBA\x6E\x1E\x22\x2E\x2F\xB6\x27\x93\x0E\x81\x39\x7A\x25"
"\x8B\x12\x62\xD1\x4D\x17\x8F\x6E\x43\xC7\x46\x29\xB6\xC1\x6B\x69\xB6\xA7\xF7\xB6\x93\x31"
"\x75\x6D\xDB\xBC\x60\x8A\xDC\xA5\xFD\xEA\x2D\xE6\x80\x21\xF3\xCE\xAF\xF9\xEA\x8B\x75\x60"
"\xAE\x16\x3A\x2F\xCE\x16\x92\x22\x66\xE4\x1D\xD1\xA7\x01\xE3\xA4\xCE\xC5\xC4\x98\xF9\x11"
"\xF8\x86\xD2\x4E\x46\x93\x68\x20\x68\xEB\xDC\x25\x00\xAF\x93\x27\x16\x66\x07\x37\xAE\x06"
"\x03\xAF\x5F\xA2\x4C\x55\x46\x6A\x01\x5B\xE5\xF6\x0E\x29\xCA\x78\xA3\x7E\x0E\x12\x5F\x9A"
"\xAA\xE4\xAE\x6A\x0C\x6B\x68\x56\xAE\x4D\x54\x9A\xD9\x06\x57\xAD\xAA\x58\x30\x1B\x26\xAB"
"\xFC\x8A\x30\x3C\x19\xD3\xF4\xEA\xB0\x2A\x3A\xA8\xF8\xC2\x52\xFD\xEE\x6E\xC8\x85\x2B\xDF"
"\xEA\x0A\x78\xA2\x07\x20\x84\x6B\xD1\x2E\xB0\x7D\x2E\x12\xE4\x06\x0D\xE1\x1A\xA6\xE8\x86"
"\xAF\xFE\xB6\xA8\xBC\x21\x4B\x11\xA3\x0B\xE9\xE6\xB0\x24\x11\x01\x59\x36\xF0\xD3\x90\x71"
"\x3A\x95\xAA\xD5\xDA\xC7\x18\x67\x23\xF3\xDA\x64\x2B\xA1\x6B\x79\xA8\x2B\x5C\x98\xC0\x29"
"\x34\x90\x33\xC4\xDE\x79\xD0\xCA\x14\x57\x0F\xFB\xD0\x8F\x1D\x6B\x45\xB6\x62\x53\x20\x87"
"\x84\xFB\xF8\x23\x03\xAB\x26\x4E\x3A\x5F\x02\x2B\x18\x7B\x1C\x22\x58\x02\xD4\x0B\xB7\x31"
"\x40\x49\xF2\x20\xAB\x05\x26\x73\x5B\x31\x3E\x71\x2C\xA1\xD1\xEA\x89\xD1\x51\x8C\x88\x1A"
"\x61\xD1\x02\x72\x42\xA2\x8D\x10\xE5\x6D\x91\xA2\x20\x01\xFC\xBA\x52\x70\x68\x03\xD2\x32"
"\x4E\x74\xC2\xE2\x0A\x3F\x9F\x10\x99\x9E\x2B\xA3\x56\x60\xD4\x40\x2E\x9B\xC1\x2E\x8F\x89"
"\x2F\x6F\x91\x2E\xBF\x32\x2F\x47\xD1\x6A\xEC\x6F\xCC\x45\x2E\x1F\x1D\x22\xB6\x1D\x33\x34"
"\x1B\xD5\x74\x40\x6C\x09\x92\x0C\xB1\xAA\xA7\xA3\x06\x69\xDD\x76\x95\x08\x08\x03\x53\x7E"
"\xB3\xA5\x65\x71\x34\x67\x55\xD8\x2A\x31\x1A\x27\x06\x21\xA9\x56\x89\x6C\x03\xA6\x91\x55"
"\x27\xA7\xF0\x38\xAF\xD5\xE7\x15\x24\x84\x6A\x1E\x10\x87\xD6\x23\xB7\x70\x3C\xBB\x55\xA0"
"\xC2\xF0\xE1\xDA\xD7\x19\x47\x73\x25\x2B\xF0\x3E\xAF\xD5\xFF\x35\x0B\x5B\xFC\x71\x41\x53"
"\x6F\x7B\xB6\xEF\x42\x23\x95\x91\x5D\x88\x1A\x13\xC4\x47\x94\xF0\x43\x6F\x85\x37\x83\x73"
"\x4C\x9A\xED\x45\xAB\x15\xFD\x0D\x85\x43\x77\xB4\x48\x37\x96\x43\x06\xF4\x48\x9F\x74\x69"
"\x4D\xC7\xCA\xDD\x2E\x4A\xB7\x74\x34\xDB\x9C\x4B\xC7\xB4\x4C\xCF\x34\x4D\xD7\xB4\x4D\xDF"
"\x34\x4E\xE7\xB4\x4E\xEF\x34\x4F\xF7\xB4\x4F\xFF\x34\x50\x07\xB5\x50\x0F\x35\x51\x17\xB5"
"\x51\x1F\x35\x52\x27\xB5\x52\x2F\x35\x53\x37\xB5\x53\x3F\x35\x54\x47\xB5\x54\x4F\x35\x55"
"\x57\xB5\x55\x5F\x35\x56\x67\xB5\x56\x6F\x35\x57\x77\xB5\x57\x7F\x35\x58\x87\xB5\x58\x8F"
"\x35\x59\x97\xB5\x59\x9F\x35\x5A\xA7\xB5\x5A\xAF\x35\x5B\xB7\xB5\x5B\xBF\x35\x5C\xC7\xB5"
"\x5C\xCF\x35\x5D\xD7\xB5\x5D\xDF\x35\x5E\xE7\xB5\x5E\xEF\x35\x5F\xF7\xB5\x5F\xFF\x35\x60"
"\x07\xB6\x60\x0F\x36\x61\x17\xB6\x61\x1F\x36\x62\x27\xB6\x62\x2F\x36\x63\x37\xB6\x63\x3F"
"\x36\x64\x47\xB6\x64\x4F\x36\x65\x57\xB6\x65\x5F\x36\x66\x67\xB6\x66\x6F\x36\x67\x77\xB6"
"\x3D\x5D\x41\x2A\x64\x74\x92\x91\x53\xCD\x79\x36\x62\xC7\xE0\x3F\x5C\xAC\x34\x1D\xF2\x44"
"\x3F\x96\x87\x92\x08\x89\x5E\xD3\x6B\xBB\xA3\x31\x47\x35\xA5\xB4\x36\xD9\x22\x81\x20\x78"
"\xDA\x35\x53\xD4\x10\x28\xAF\x37\xF9\x05\x6E\x4B\x92\x70\xDF\xF3\x56\x2F\x8D\x3C\x4E\xC0"
"\x16\xA5\x63\x51\xD4\x76\xC7\x2C\xD3\x10\x5F\x94\x6F\x29\x33\x27\x15\x77\x1F\xCD\xB6\x2D"
"\x88\xB3\x45\x58\xB7\x5D\xCF\xC2\x3C\x98\x1E\x80\xEA\xA8\xAA\x0E\x98\x73\x03\xC0\x15\x50"
"\x11\x27\x94\xCF\x7D\x56\x6F\x4B\x7D\x34\x40\x32\x4B\x0D\x5C\x29\x30\x27\xAD\x25\x77\x58"
"\x15\xA3\xAF\x7B\x52\x30\xE3\x21\xF5\x04\xCC\x9A\x0C\x87\xCF\x0E\xC3\x28\xDF\x50\x37\xA5"
"\x84\x74\x41\x69\x2D\xB3\x68\xCB\xCE\x02\xC4\xCC\xA8\x12\x47\x5B\x6F\x7E\xB7\x91\x3D\x36"
"\x0B\x77\xAF\x6B\x80\x1A\x77\x4C\xDF\x47\x9C\x49\xA6\x76\x0B\x04\xF0\x50\x77\xCD\x79\x17"
"\x75\x4B\x54\xD8\x76\xF8\xF0\x15\x9B\x89\x47\xEB\xA0\x51\x66\x7D\x2F\x8C\x3E\x87\x27\x20"
"\xB2\xED\x16\x3B\x31\xCC\x94\xF7\x3E\xE3\x71\x8B\xA3\x44\xAB\xE9\x40\x10\xD5\xDB\xF5\xFD"
"\x66\xBC\x0C\x22\x8B\x0B\x79\x7B\xE3\x4D\x74\xE3\xC4\xCA\xA8\xB1\x91\x3A\x63\x8E\xDF\xC4"
"\xD8\xA2\x5D\x93\x03\xB8\xC4\xBE\x85\x20\x1E\xB9\x3C\x35\x97\x81\xE7\xD3\x60\xA8\x76\x2E"
"\x2E\xB2\xBA\x5D\xE2\xE5\xDE\xC5\x88\xAB\x38\xCB\xC6\x54\x85\x2B\xF2\xC1\xAE\x28\xAE\xD2"
"\xF8\x8C\x8F\x37\x91\xC9\xF8\x9B\xFB\x70\x94\x5B\x0B\x90\x0A\xA6\x42\x59\x50\x96\xDF\xD3"
"\x92\x08\xEC\xD6\x40\x72\x86\xF6\x09\xFC\x40\x27\x41\xA3\x14\xDF\x21\xE6\x9A\xA3\x21\x5E"
"\x66\x70\x9B\x7F\xE9\x9C\xDB\x8D\x97\xFB\xE0\x94\xA7\xC5\xE7\xA5\x63\xF4\x32\x73\x42\x5D"
"\x60\x9E\xDB\x93\xE8\xCD\xE4\x7D\x90\x71\x89\x49\x30\x3A\xB7\x2C\xEC\xCE\x14\xCA\x2A\x7A"
"\xDE\x6E\x4A\x0A\x62\xF8\xFD\x36\x7A\x10\xA6\xF9\xCD\xCA\x31\x7E\xE3\x36\xA7\x0C\xF7\x8F"
"\x61\x4D\xA6\xDB\x13\x8F\x03\xE8\x98\x73\x66\x99\x33\x79\x98\x24\x74\x8A\x83\x49\x8A\xFB"
"\x36\x04\x0E\x3B\x83\xAA\xBA\x16\xC7\x38\xA4\x47\xF8\x97\x67\xEF\x79\x70\x85\x95\xBF\x26"
"\xAB\x1B\xE7\x7F\x13\x14\xC1\x86\x7A\x04\x0D\xDD\xF8\x98\x34\x13\x7D\x1E\xB2\xA4\x02\xB7"
"\xFB\xCE\x72\x2C\xF8\x60\xDE\xF7\x31\x26\x3A\x40\xE4\x84\x1A\x2F\x11\x4D\x2D\x09\x27\xCA"
"\xAC\xA9\x37\xEF\xCF\x7E\xAC\xCA\x1C\x3A\x0A\x13\x79\xBC\xE3\x76\x37\x9E\x09\x0E\xA5\x02"
"\x7B\x35\x4B\xA1\x59\xEE\x95\xF9\x5A\xBE\xA1\xAA\x59\xDC\x7A\xF5\x84\xF7\xD6\x19\x91\xDF"
"\x55\x6D\xB4\x93\xB9\x9F\xFB\xE0\x4F\xAE\x0D\xB9\x23\x9F\x4D\x61\xCA\xC3\xDF\x9D\xDC\x6C"
"\xEE\x90\x47\xBA\xE6\x4E\xB0\x75\xF0\x21\xB2\x23\x2A\xB3\x0B\xE4\xA9\x9B\xEE\x33\xC3\xA8"
"\xAE\x0F\x7B\xC7\x58\xAC\x76\xBF\xCB\xAE\x6F\x0C\xCC\xB3\xBC\xE7\x25\x45\xC2\xD1\x1D\xAC"
"\x9B\xFC\x7B\xA3\x39\x67\xD0\x01\x27\x90\xC7\xFC\x16\xEF\x2A\x65\x04\x29\x95\x2F\x4B\xF5"
"\xC7\x35\x6B\xE5\xC8\xE3\x20\x0E\x2F\xFD\x99\xAF\xAC\xC7\x33\x79\xC4\xE7\xFB\xD2\xE3\xFC"
"\xA2\xFF\x8D\x27\xD3\x32\x3C\x37\x11\x1D\x4F\xB2\xD4\xDB\x3B\xBE\x38\xC2\xA1\x6D\xF3\xD7"
"\x9B\xFB\x13\xCA\xE6\xF5\xE9\x08\xB9\x57\x4E\xFA\x46\xEC\x7E\xC3\xD4\x9F\x8A\xAC\xB3\xDF"
"\x6A\xB5\xB3\x79\xD4\x53\xD9\x8A\x6F\xAA\xD9\x2F\x7B\x6B\x8F\x22\x9B\xBE\xCC\xC3\xC7\x6F"
"\xD6\xB3\x11\x2B\x86\xBB\xE4\xF4\xE2\xC3\xF3\x57\xC6\x23\xBE\x0B\x89\x29\xBC\xEE\x45\xCC"
"\x97\xAD\xE1\x17\x6E\xA6\xD0\x3A\x43\xF5\xE6\xC8\x43\xE9\xDF\x3F\x7A\x5F\xD0\x3B\x95\xBF"
"\xF8\xB8\x8A\x77\xAC\x57\x3D\xDB\xCF\x3D\xD6\x2B\xA8\xD6\xDB\x5B\x80\xF5\x2A\xD9\x23\x7A"
"\xDD\x93\xA4\xEA\xBB\x7E\xAF\xB7\x5E\x2F\xF6\x76\xE9\xDF\x3D\x5C\x94\x41\x6F\x6C\x43\x13"
"\xF7\x79\x8D\xCB\x94\xA1\x8A\xFA\xB4\x93\xC9\xF0\xB7\xFA\xD5\x57\xE2\xCA\xAC\x7D\xCA\x2A"
"\x3B\xD5\x43\x39\xE7\x77\x3E\xEA\xAB\xF9\xE0\x6B\x64\x36\x2B\x44\x04\x2B\xA6\x6F\x58\x39"
"\xA4\x10\xEB\x86\x05\xBE\x75\xF0\x57\x22\x0B\xFA\xF1\x3B\x91\x09\x6A\x34\xB2\x50\xB3\x4B"
"\xA1\xE8\xB3\xF3\xCE\x98\x4C\x38\x82\x78\xBE\x8D\x5A\xBA\xF3\xE3\xFE\xB5\x15\x3F\x47\xD0"
"\x6B\xC7\x0F\x3A\xF2\x97\x0A\xCD\xE3\x77\x97\x4E\x3E\x00\x80\x01\x05\x0E\x04\x30\x64\xDE"
"\x3F\x84\x09\x13\x7A\x21\xD8\xD0\xE1\x43\x00\x8C\x14\x4E\x34\x27\x02\xE2\x45\x88\x06\x27"
"\x2A\x64\x88\xD1\xE3\x47\x90\x17\x27\xE8\x20\x39\x21\xE4\x49\x81\x13\x9C\x4D\x64\x84\xD2"
"\xE5\x4B\x98\x31\x65\xCE\xA4\x59\xD3\xE6\x4D\x9C\x27\x55\x2A\x9C\x37\x24\x27\x40\x11\xE6"
"\x12\xF6\xFC\x39\xD0\xCB\xC4\x8E\x45\x23\x52\xB4\x78\xF3\x28\x53\xA5\x0D\x67\xF1\xF4\x19"
"\x75\xA9\xC2\x8A\x51\x9F\x62\x6D\xAA\x74\x2B\xD5\xA8\x53\x37\xCE\xB2\x6A\x55\xE2\xC4\x79"
"\x72\xCA\x06\x0C\xBA\x11\xA1\x33\x93\x38\x77\xBA\xFD\x47\x34\x67\x5B\xB7\x70\xD7\xEE\x0D"
"\xBB\xB1\x16\x12\xBE\x81\x05\x0F\x26\x5C\xD8\x30\x5B\xA1\x43\xAB\xE6\xD4\xF8\x36\xAE\x56"
"\xAE\x66\xA1\xDE\x3C\xAB\x50\x2F\xDF\xCA\x08\x93\x2A\xCD\xFC\x2F\x2B\xE7\xB1\x65\xE7\x72"
"\xB4\xDA\x38\xE1\xE5\xC3\x31\x3B\x07\x7B\xBC\xB7\x33\x42\xBB\x72\x57\xD2\xFD\x9C\xF3\x75"
"\xDD\xC5\xA9\x75\x63\xFC\xBA\x71\xF3\x6E\xE0\xC1\x85\x0F\xB7\x8A\x17\x61\x6D\x9C\xA6\x5B"
"\x96\xCD\x8C\xBA\x28\xA0\x6D\xD1\xA3\x3B\xEB\x5A\x53\xAC\x42\xB2\x81\x4D\xFF\x5B\x1E\xB5"
"\x33\x72\xD9\x1B\xBB\x47\x9D\x50\x2B\xA1\xB6\x1A\x6B\x87\x68\x83\x7D\xAA\x35\x71\x8F\x9D"
"\xE7\x39\x7A\x5F\xF6\xD4\x44\xF4\x45\x47\x87\x56\x7A\x5F\x61\x7E\xF8\x02\x5C\xCF\xAD\xD8"
"\x02\x34\xF0\x40\x04\x13\x2C\xE8\xA0\x84\xC0\xB3\x69\x02\x33\x22\x34\xA3\xBE\x9F\xAE\xE3"
"\x4E\xC1\x8B\x8C\x5B\x48\x30\x0D\xB3\xF3\x6E\xB2\x9F\x34\xD4\x0C\x43\x12\x3F\xDC\x48\x9B"
"\x32\x04\x33\x41\x10\x5B\xE8\x48\xCF\xC4\x8D\x0A\xFC\x69\xC5\x16\x5F\x2C\x51\xB7\x32\xD8"
"\xDB\xC8\xC1\x1B\x7B\xF4\xF1\xC7\x98\x7A\x73\x0E\x48\x80\x4E\x91\xCE\x99\xDC\x7E\xDC\x0E"
"\x37\xC1\xF6\x1B\xD2\x36\x10\x73\xEA\xCD\xB3\xEA\x88\xB4\xF2\xA3\x25\x13\xAA\xC5\xC6\x2B"
"\x05\x12\x11\xA1\xF1\xBA\x14\x13\xA0\xFD\x26\x7A\x72\x4C\x34\xD3\x4C\xB0\x33\x0F\xD5\xEC"
"\x72\x4A\x1E\xAD\xB2\x30\x4E\x9B\xBE\xAB\x92\xB2\x8D\xCE\x74\x53\xCC\x09\xFC\x8B\x91\x3E"
"\x35\xB7\x4B\x6B\x4F\x31\x2D\x4C\x48\x18\x41\xCC\x00\x8C\x50\x46\x55\x74\xC4\x99\x6D\xFE"
"\xE2\x0B\x09\x33\x4C\x18\xCC\xD0\x30\x1B\xED\xF1\x35\x3D\x61\x64\xD2\x53\x2A\x95\x32\xF4"
"\xC2\xB5\x36\x91\x6E\x9B\x24\x9F\x3B\x75\x9B\x53\xC6\x1C\xD0\x2D\x00\xA3\xA2\xD4\xD2\xBD"
"\x26\x28\x23\x15\x4E\xAE\x58\xCB\x84\x47\x23\x5D\x54\xD3\x9A\x04\x55\x0B\x58\x62\xD7\x02"
"\x84\xC1\x84\x5A\x25\xCF\xBC\xF3\xB8\x2C\x2E\xB1\x0D\x8B\xED\x71\xD4\x36\xF9\xEA\xED\x37"
"\x28\x23\x0B\x11\xDA\x68\x9F\x55\x6C\x2D\x4C\xD1\x9C\x60\x13\xBA\xFE\x71\xEF\xA7\xF2\xFE"
"\x73\xB6\xCB\x63\x27\x52\x56\x5A\x98\x3A\xC3\x16\x5E\x7A\x67\xBA\xED\x9F\x79\x6B\xFA\x92"
"\x4E\x9C\x7A\x93\x11\xC8\x09\x1C\x61\xF0\x9C\x14\xCB\x82\xEE\x54\xEA\x6C\xFA\x32\xDF\xD2"
"\x90\x25\x15\x34\x6D\x19\x73\xF8\x53\xAB\xBE\xE2\x37\xD8\x89\x19\x06\xB2\x06\x1D\x63\x1C"
"\x56\x61\x6E\x8F\xBB\x93\xC8\x7B\x35\xAE\xD7\x21\x27\x29\x3C\x79\xE5\x90\xB2\x74\x0C\xDD"
"\xD9\xC4\xDB\xCB\xD0\x4E\x4B\x2C\x13\x5F\xE6\xA2\x94\x69\xC9\x7F\xD7\xD2\xB0\x66\x7B\x75"
"\xB6\x89\xE7\x54\x7F\x6A\x4E\x65\x9B\x6A\x08\xF9\x62\x20\xDB\x75\xCB\xE4\x90\x6E\x06\xD3"
"\xD5\x89\x4F\x43\x9A\xE5\x81\x3A\xC4\x7A\x6B\x94\x46\x6D\x70\xE4\x99\xA6\xB4\xBA\x2C\x11"
"\x33\xFD\xD1\x6B\xA0\x83\x8E\x38\xEC\x1D\xAD\x20\xE9\x6D\xB8\x49\xA2\x35\xBC\xAF\x41\x65"
"\xFA\xA5\x2C\x37\x9B\xE0\xEA\x97\x52\x8E\xAA\x8C\xAA\xA1\x26\xB2\x86\x98\x49\xAB\x49\xEC"
"\x97\xBB\xF4\x5A\x64\xAE\x2F\xDA\xCE\xEC\xC6\x23\x4F\xA9\x70\xA1\x69\xBA\x37\x54\xC9\xD6"
"\x06\xF2\x4B\xCC\x21\xAE\xBB\xA6\xCB\xCB\xFD\xA7\x5A\x9B\x2C\xEC\xB9\xCE\xCA\x69\xFA\x72"
"\x9E\x5A\xCC\x70\x84\x3D\xC1\x4F\xDA\x8E\xF4\x07\xFD\xC4\x0E\x58\x39\x32\x46\x9D\x36\xB0"
"\x6F\x94\x9A\x71\xC9\x1B\xBA\x36\x78\xE2\xB3\x0E\xD9\x32\xBE\x5F\x5A\xBC\xF3\xA2\x44\xA4"
"\xDD\x47\xC4\xEF\x56\x2D\x75\x97\x96\x17\x1D\x72\xB5\xBB\x35\x9A\x7A\x99\x7E\x57\x08\xFB"
"\x78\x27\x7A\x7E\x26\x8E\xDD\x9A\x25\x79\x3E\x99\x1D\xD1\xBA\x72\xA5\x47\x90\xF3\xC4\x8B"
"\x0F\x48\x5E\xF9\xE5\xF7\x1E\xFC\xE9\x79\x97\x13\xAD\xA2\xA1\xA7\x2B\x6D\x99\xD8\x49\x5F"
"\xC7\x13\x9D\xF6\x9C\xC2\x12\xBB\xF5\x2E\x7B\xE5\x02\x20\x48\xCA\x84\x3F\xBC\x55\xED\x61"
"\xC5\x02\xDC\xFA\x2C\xD7\x3E\x05\x92\xE8\x7E\xF5\x13\x88\xE9\xFA\xC7\x41\xAC\x2D\xCE\x7D"
"\xB2\x93\x20\xF3\xA4\xC4\x9F\x2E\xB9\x0C\x82\x0B\x34\x21\x4C\x5C\x56\xC0\xD3\xCD\x64\x76"
"\x09\x54\x0A\xFC\xBE\x35\x34\xDD\x25\xA7\x6A\xF3\x28\x18\xBD\xFA\x84\x33\x8C\xE9\x4F\x71"
"\x42\xE4\xE0\x7E\x46\x08\x42\x62\xB9\x2C\x76\x2F\xB9\x57\x03\x5D\x22\xA2\x23\x1E\xE8\x66"
"\x4E\x0C\x9F\xE6\x60\x82\xB8\x02\x52\x31\x6A\x85\xD3\x62\x48\x04\xA8\x94\x17\x1A\x30\x80"
"\xBE\xA1\x1B\xF2\xB0\x36\x04\x29\xE0\x29\x2F\xE8\x53\x90\x12\x91\x08\x80\x9F\xB1\xF1\x8D"
"\xC5\xF2\x82\xC3\xB4\xF1\xC1\xA4\xA5\x42\x18\x08\xD4\x0F\xE5\x80\x48\x35\x33\xE6\xCC\x8A"
"\x4C\x2C\x20\x5D\xC6\x47\x93\x39\x65\x30\x7F\x9F\x53\x4A\x0D\xD4\x87\x16\x40\xD5\xA4\x4C"
"\x31\x7C\xC9\x94\xBA\xF8\xC6\x1A\xE8\x91\x8F\x62\xAA\xE3\x7F\xF0\x28\xB9\x19\xCE\x31\x78"
"\x13\xA0\x83\x2D\x1C\xF1\xAB\xB5\x64\x86\x92\x31\xB9\xD9\x21\x01\x56\x06\x53\xAE\xCB\x73"
"\xC0\x73\x93\x2A\x3F\xB9\x48\x5A\x92\xC7\x0C\xA9\xB0\x05\x27\x14\x25\x47\x90\x2C\x29\x8A"
"\x17\x19\x55\x98\xE4\x00\x08\x51\x62\xC4\x96\x69\x22\xA5\x29\x51\x89\xC4\xCE\xAC\x30\x99"
"\xD3\x44\x89\xD6\x60\xB6\x23\x45\x8A\xF2\x8B\x6E\x1A\x5E\x51\xB6\x79\x25\x4B\x02\x13\x23"
"\xAD\x0C\xC8\x0F\x27\x48\x4D\xC4\xDC\x0E\x9D\xCC\x24\x17\x58\xD6\xF9\x4E\x98\x4C\xC0\x83"
"\xD7\xE4\x1F\x3C\x09\xF2\xCD\x34\x3D\x6E\x96\x2D\x04\xD2\x6B\x5C\x89\x12\xA9\x39\xC3\x16"
"\xC2\x70\xD8\xBB\xD6\x29\x4F\x77\xDA\xD3\x47\x43\x90\xCE\x39\xCC\xA7\x50\x88\x7E\xA4\x4C"
"\x4B\x0C\x49\xF9\xEA\x19\x51\x80\xE0\x13\x4D\xD6\xDC\xDE\x20\x7D\x44\x4E\x9C\x58\x6F\x23"
"\x06\x9D\xE6\x44\x31\xBA\x29\xD1\xAD\xF2\xA4\xF6\xCC\xDD\x26\x6F\x92\x25\x95\x52\x53\xA3"
"\x63\xF2\x5B\x47\x19\x69\xA5\x2F\x49\xD3\x8B\x85\xBC\x21\x35\x5B\xFA\xBD\x95\xDE\x68\x79"
"\x31\x0D\xEA\x34\x79\x55\x35\x9D\x76\xED\xA2\x2B\x9D\xE9\x98\xE6\x69\xD3\x5C\x12\x29\x6F"
"\x77\x21\x60\x8C\x6E\x49\xBC\xA3\xCA\xAC\xA8\x18\xBA\xD9\x3C\x9C\x51\x06\x71\x6E\x15\x9A"
"\x31\xEA\x21\x3D\xFF\x11\x2B\xA6\x72\xEF\x4A\xF4\x83\x2A\x3F\xFD\xB7\xD4\x9B\x58\xB4\x5C"
"\xB5\x08\x2B\xD7\x5E\xC3\x43\xB1\xE6\x55\xAF\x3D\xDA\xCE\xB9\xBC\xE5\xD7\xA2\x36\x55\x4C"
"\x26\x90\x50\x84\x64\x79\x41\x8F\x6E\x6A\x55\xDB\x10\x46\x36\x5D\x12\x30\x09\x3A\xE3\x99"
"\xC9\xEC\x6B\x5D\xF7\x7A\x59\xCC\xF2\xA5\x2D\xF3\xB1\xAC\x4B\x6A\x50\xD6\xC0\xAA\x75\x8E"
"\x82\x7D\xE3\x04\x28\x65\x86\x2B\xCC\xED\x9D\x9B\x8D\x64\x66\x5D\xFB\x5A\xE0\x5C\xA1\xB3"
"\xB0\xDD\x69\x62\x93\x49\x5A\xDA\x6E\x4D\xB6\xB9\xE5\x6D\x6F\x7D\x2B\x26\xDC\x8E\x56\xB4"
"\xBF\x25\x6E\x71\x8D\x7B\x5C\xE2\xC2\xD2\x16\xCB\xB5\x45\x2A\x66\x1B\x39\xE5\x32\xD7\xB9"
"\xC8\xA5\x6E\x75\xAD\x7B\x5D\xEC\x66\x57\xBB\xDB\xE5\x6E\x77\xBD\xFB\x5D\xF0\x86\x57\xBC"
"\xE3\x25\x6F\x79\xCD\x7B\x5E\xF4\xA6\x57\xBD\xEB\x65\x6F\x7B\xDD\xFB\x5E\xF8\xC6\x57\xBE"
"\xF3\xA5\x6F\x7D\xED\x7B\x5F\xFC\xE6\x57\xBF\xFB\xE5\x6F\x7F\xFD\xFB\x5F\x00\x07\x58\xC0"
"\x03\x26\x70\x81\x0D\x7C\x60\x04\x27\x58\xC1\x0B\x66\x70\x83\x1D\xFC\x60\x08\x47\x58\xC2"
"\x13\xA6\x70\x85\x2D\x7C\x61\x0C\x67\x58\xC3\x1B\xE6\x70\x87\x3D\xFC\x61\x10\x87\x58\xC4"
"\x23\x26\x71\x89\x4D\x7C\x62\x14\xA7\x58\xC5\x2B\x66\x71\x8B\x5D\xFC\x62\x18\xC7\x58\xC6"
"\x33\xA6\x71\x8D\x6D\x7C\x63\x1C\xE7\x58\xC7\x3B\xE6\x71\x8F\x7D\xFC\x63\x20\x07\x59\xC8"
"\x43\x26\x72\x91\x8D\x7C\x64\x24\x27\x59\xC9\x4B\x66\x72\x93\x9D\xFC\x64\x28\x47\x59\xCA"
"\x53\xA6\x72\x95\xAD\x7C\x65\x2C\x67\x59\xCB\x5B\xE6\x72\x97\xBD\xFC\x65\x30\x87\x59\xCC"
"\x63\x26\x73\x99\xCD\x7C\x66\x34\xA7\x59\xCD\x6B\x66\x73\x9B\xDD\xFC\x66\x38\xC7\x59\xCE"
"\x73\xA6\x73\x9D\xED\x7C\x67\x3C\xE7\x59\xCF\x7B\xE6\x73\x9F\xFD\xFC\x67\x40\x07\x5A\xD0"
"\x83\x26\x74\xA1\x0D\x7D\x68\x44\x27\x5A\xD1\x8B\x66\x74\xA3\x1D\xFD\x68\x48\x47\x5A\xD2"
"\x93\xA6\x74\xA5\x2D\x7D\x69\x4C\x67\x5A\xD3\x9B\xE6\x74\xA7\x3D\xFD\x69\x50\x87\x5A\xD4"
"\xA3\x26\x75\xA9\x4D\x7D\x6A\x54\xA7\x5A\xD5\xAB\x66\x75\xAB\x5D\xFD\x6A\x58\xC7\x5A\xD6"
"\xB3\xA6\x75\xAD\x6D\x7D\x6B\x5C\xE7\x5A\xD7\xBB\xE6\x75\xAF\x7D\xFD\x6B\x60\x07\x5B\xD8"
"\xC3\x26\x76\xB1\x8D\x7D\x6C\x64\x27\x5B\xD9\xCB\x66\x76\xB3\x9D\xFD\x6C\x68\x47\x5B\xDA"
"\xD3\xA6\x76\xB5\xAD\x7D\x6D\x6C\x67\x5B\xDB\xDB\xE6\x76\xB7\xBD\xFD\x6D\x70\x87\x5B\xDC"
"\xE3\x26\x77\xB9\xCD\x6D\xDF\x71\x31\x17\xB4\xE7\x66\x37\x78\xAF\x33\xCC\x76\xC7\xDB\xB7"
"\x5F\xA1\xA8\xBC\xED\xDD\x5B\xE3\x9C\xEF\xDE\xFB\xC6\xAE\xA1\xE6\x81\x4C\x7E\x07\xDC\xB8"
"\x26\xE0\x44\xC7\xC4\x28\x70\x84\xE7\x36\x94\x09\x67\xB8\xC2\x1D\x96\xD4\x86\x47\x1C\xA2"
"\x48\x30\x38\x51\x25\x7E\x71\x74\x8A\xC0\x8F\x53\xC3\x78\xC7\x57\xFA\x25\x14\x79\x5C\xE4"
"\x18\x35\xCE\x36\x38\x71\xD8\x91\xA7\x9C\x9A\x26\xD0\x81\xCA\x5D\xFE\x72\x98\xC7\x5C\xE6"
"\x33\xA7\x79\xCD\x6D\x7E\x73\x9C\xE7\x5C\xE7\x3B\xE7\x79\xCF\x7D\xFE\x73\xA0\x07\x5D\xE8"
"\x43\x27\x7A\xD1\x8D\x7E\x74\xA4\x27\x5D\xE9\x4B\x67\x7A\xD3\x9D\xFE\x74\xA8\x47\x5D\xEA"
"\x53\xA7\x7A\xD5\xAD\x7E\x75\xAC\x67\x5D\xEB\x5B\xE7\x7A\xD7\xBD\xFE\x75\xB0\x87\x5D\xEC"
"\x63\x27\x7B\xD9\xCD\x7E\x76\xB4\xA7\x5D\xED\x6B\x67\x7B\xDB\xDD\xFE\x76\xB8\xC7\x5D\xEE"
"\x73\xA7\x7B\xDD\xED\x7E\x77\xBC\xE7\x5D\xEF\x7B\xE7\x7B\xDF\xFD\xFE\x77\xC0\x07\x5E\xF0"
"\x83\x27\x7C\xE1\x0D\x7F\x78\xC4\x27\x5E\xF1\x8B\x67\x7C\xE3\x1D\xFF\x78\xC8\x47\x5E\xF2"
"\x93\xA7\x7C\xE5\x2D\x7F\x79\xCC\x67\x5E\xF3\x9B\xE7\x7C\xE7\x3D\xFF\x79\xD0\x87\x5E\xF4"
"\xA3\x27\x7D\xE9\x4D\x7F\x7A\xD4\xA7\x5E\xF5\xAB\x67\x7D\xEB\x5D\xFF\x7A\xD8\xC7\x5E\xF6"
"\xB3\xA7\x7D\xED\x6D\x7F\x7B\xDC\xE7\x5E\xF7\xBB\xE7\x7D\xEF\x7D\xFF\x7B\xE0\x07\x5F\xF8"
"\xC3\x27\x7E\xF1\x8D\x7F\x7C\xE4\x27\x5F\xF9\xCB\x67\x7E\xF3\x9D\xFF\x7C\xE8\x47\x5F\xFA"
"\xD3\xA7\x7E\xF5\xAD\x7F\x7D\xEC\x67\x5F\xFB\xDB\xE7\x7E\xF7\xBD\xFF\x7D\xF0\x87\x5F\xFC"
"\xE3\x27\x7F\xF9\xCD\x7F\x7E\xF4\xA7\x5F\xFD\xEB\x67\x7F\xFB\xDD\xFF\x7E\xF8\xC7\x5F\xFE"
"\xF3\xA7\x7F\xFD\xED\x7F\x7F\xFC\xE7\x5F\xFF\xFB\xE7\x7F\xFF\xFD\xFF\x7F\x00\x0C\x40\x01"
"\x1C\x40\x02\x2C\x40\x03\x3C\x40\x04\x4C\x40\x05\x5C\x40\x06\x6C\x40\x07\x7C\x40\x08\x8C"
"\x40\x09\x9C\x40\x0A\xAC\x40\x0B\xBC\x40\x0C\xCC\x40\x0D\xDC\x40\x0E\xEC\x40\x0F\xFC\x40"
"\x10\x0C\x41\x11\x1C\x41\x12\x2C\x41\x13\x3C\x41\x14\x4C\x41\x15\x5C\x41\x16\x6C\x41\x17"
"\x7C\x41\x18\x8C\x41\x19\x9C\x41\x1A\xAC\x41\x1B\xBC\x41\x1C\xCC\x41\x1D\xF4\x2D";
#undef DD_ALIGNED_BUFFER

static const FontCharSet fontSourceCodeProCharSet = {
	/* bitmap               = */ fontSourceCodeProBitmap,
	/* bitmapWidth          = */ 1024,
	/* bitmapHeight         = */ 1024,
	/* bitmapColorChannels  = */ 1,
	/* bitmapDecompressSize = */ 1048576,
	/* charBaseHeight       = */ 49,
	/* charWidth            = */ 34,
	/* charHeight           = */ 70,
	/* charCount            = */ 192,
	{
	 { 176, 720 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 { 778, 720 }, { 434, 720 }, { 777,   0 }, {   0, 450 },
	 { 372, 540 }, {  54,   0 }, { 300,  90 }, { 391, 720 },
	 { 322, 630 }, { 348, 720 }, { 510, 540 }, { 556, 540 },
	 { 305, 720 }, { 240, 270 }, { 262, 720 }, { 250,  90 },
	 { 977,   0 }, { 907, 630 }, { 367, 630 }, { 970, 540 },
	 { 141, 450 }, { 235, 450 }, { 624, 270 }, { 496,  90 },
	 {  46, 630 }, { 423, 450 }, { 950, 720 }, { 864, 720 },
	 { 821, 720 }, { 912, 270 }, { 592, 630 }, {  92, 630 },
	 {  48, 360 }, {  96, 360 }, {  94, 540 }, { 144, 360 },
	 { 192, 360 }, { 240, 360 }, { 288, 360 }, { 336, 360 },
	 {  98, 180 }, { 147, 180 }, { 196, 180 }, { 150,  90 },
	 { 520, 720 }, { 343, 180 }, { 392, 180 }, { 720, 360 },
	 { 470, 450 }, { 658, 450 }, { 384, 360 }, { 564, 450 },
	 { 200,  90 }, { 735, 180 }, { 522,   0 }, { 106,   0 },
	 { 210,   0 }, { 573,   0 }, { 432, 360 }, { 418, 540 },
	 { 563, 720 }, { 648, 540 }, { 772, 630 }, { 682, 630 },
	 { 547, 630 }, { 480, 360 }, { 611, 450 }, { 188, 540 },
	 { 827,   0 }, { 878, 540 }, { 877,   0 }, { 528, 360 },
	 { 464, 540 }, { 457, 630 }, {  49, 180 }, { 692,  90 },
	 { 649, 720 }, {  50,  90 }, { 326, 540 }, { 280, 540 },
	 { 576, 360 }, { 624, 360 }, { 184, 630 }, { 138, 630 },
	 { 141, 540 }, { 517, 450 }, {   0, 180 }, { 100,  90 },
	 { 588, 180 }, { 314,   0 }, {  47, 450 }, { 672, 360 },
	 { 606, 720 }, {  44, 720 }, { 705, 450 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
	 { 219, 720 }, { 692, 720 }, { 234, 540 }, { 768, 360 },
	 { 839,  90 }, { 927,   0 }, { 477, 720 }, { 412, 630 },
	 { 816, 360 }, { 686, 180 }, { 864, 360 }, { 912, 360 },
	 { 502, 630 }, { 784, 180 }, { 694, 540 }, { 602, 540 },
	 {  88, 720 }, { 637, 630 }, { 951, 630 }, {   0, 720 },
	 { 230, 630 }, { 643,  90 }, { 937,  90 }, { 907, 720 },
	 {   0, 810 }, { 132, 720 }, { 832, 180 }, { 799, 450 },
	 { 418,   0 }, { 470,   0 }, { 262,   0 }, { 735, 720 },
	 { 880, 180 }, { 928, 180 }, { 245, 180 }, { 726,   0 },
	 {   0,  90 }, { 976, 180 }, {   0,   0 }, {   0, 270 },
	 {  48, 270 }, {  96, 270 }, { 144, 270 }, { 192, 270 },
	 { 790,  90 }, { 888,  90 }, { 539, 180 }, { 741,  90 },
	 { 288, 270 }, { 594,  90 }, { 336, 270 }, { 384, 270 },
	 { 432, 270 }, { 545,  90 }, { 480, 270 }, { 727, 630 },
	 { 624,   0 }, { 447,  90 }, { 398,  90 }, { 349,  90 },
	 { 637, 180 }, { 675,   0 }, { 528, 270 }, { 282, 450 },
	 { 576, 270 }, { 672, 270 }, { 720, 270 }, { 490, 180 },
	 { 768, 270 }, { 816, 270 }, { 441, 180 }, { 276, 630 },
	 { 832, 540 }, { 740, 540 }, { 329, 450 }, { 188, 450 },
	 { 817, 630 }, { 862, 630 }, {  94, 450 }, { 960, 360 },
	 { 864, 270 }, { 294, 180 }, {   0, 630 }, { 786, 540 },
	 { 376, 450 }, { 960, 270 }, { 846, 450 }, { 924, 540 },
	 { 893, 450 }, { 752, 450 }, { 940, 450 }, {   0, 540 },
	 {  47, 540 }, { 158,   0 }, {   0, 360 }, { 366,   0 }
	}
};








// ========================================================
// LZW decompression helpers for the font bitmap:
// ========================================================

// These must match the font-tool encoder!
static const int LzwNil            = -1;
static const int LzwMaxDictBits    = 12;
static const int LzwStartBits      = 9;
static const int LzwFirstCode      = (1 << (LzwStartBits - 1)); // 256
static const int LzwMaxDictEntries = (1 << LzwMaxDictBits);     // 4096

struct LzwDictionary
{
    // Dictionary entries 0-255 are always reserved to the byte/ASCII range.
    struct Entry
    {
        int code;
        int value;
    };

    int size;
    Entry entries[LzwMaxDictEntries];

    LzwDictionary();
    int findIndex(int code, int value) const;
    bool add(int code, int value);
    bool flush(int & codeBitsWidth);
};

struct LzwBitStreamReader
{
    const std::uint8_t * stream; // Pointer to the external bit stream. Not owned by the reader.
    int sizeInBytes;             // Size of the stream in bytes. Might include padding.
    int sizeInBits;              // Size of the stream in bits, padding not include.
    int currBytePos;             // Current byte being read in the stream.
    int nextBitPos;              // Bit position within the current byte to access next. 0 to 7.
    int numBitsRead;             // Total bits read from the stream so far. Never includes byte-rounding.

    LzwBitStreamReader(const std::uint8_t * bitStream, int byteCount, int bitCount);
    bool readNextBit(int & outBit);
    int readBits(int bitCount);
};

// ========================================================
// LzwDictionary:
// ========================================================

LzwDictionary::LzwDictionary()
{
    // First 256 dictionary entries are reserved to the byte/ASCII
    // range. Additional entries follow for the character sequences
    // found in the input. Up to 4096 - 256 (LzwMaxDictEntries - LzwFirstCode).
    size = LzwFirstCode;
    for (int i = 0; i < size; ++i)
    {
        entries[i].code  = LzwNil;
        entries[i].value = i;
    }
}

int LzwDictionary::findIndex(const int code, const int value) const
{
    if (code == LzwNil)
    {
        return value;
    }
    for (int i = 0; i < size; ++i)
    {
        if (entries[i].code == code && entries[i].value == value)
        {
            return i;
        }
    }
    return LzwNil;
}

bool LzwDictionary::add(const int code, const int value)
{
    if (size == LzwMaxDictEntries)
    {
        return false;
    }
    entries[size].code  = code;
    entries[size].value = value;
    ++size;
    return true;
}

bool LzwDictionary::flush(int & codeBitsWidth)
{
    if (size == (1 << codeBitsWidth))
    {
        ++codeBitsWidth;
        if (codeBitsWidth > LzwMaxDictBits)
        {
            // Clear the dictionary (except the first 256 byte entries).
            codeBitsWidth = LzwStartBits;
            size = LzwFirstCode;
            return true;
        }
    }
    return false;
}

// ========================================================
// LzwBitStreamReader:
// ========================================================

LzwBitStreamReader::LzwBitStreamReader(const std::uint8_t * bitStream, const int byteCount, const int bitCount)
    : stream(bitStream)
    , sizeInBytes(byteCount)
    , sizeInBits(bitCount)
    , currBytePos(0)
    , nextBitPos(0)
    , numBitsRead(0)
{ }

bool LzwBitStreamReader::readNextBit(int & outBit)
{
    if (numBitsRead >= sizeInBits)
    {
        return false; // We are done.
    }

    const int mask = 1 << nextBitPos;
    outBit = !!(stream[currBytePos] & mask);
    ++numBitsRead;

    if (++nextBitPos == 8)
    {
        nextBitPos = 0;
        ++currBytePos;
    }
    return true;
}

int LzwBitStreamReader::readBits(const int bitCount)
{
    int num = 0;
    for (int b = 0; b < bitCount; ++b)
    {
        int bit;
        if (!readNextBit(bit))
        {
            break;
        }
        const int mask = 1 << b;
        num = (num & ~mask) | (-bit & mask);
    }
    return num;
}

// ========================================================
// lzwDecompress() and helpers:
// ========================================================

static bool lzwOutputByte(int code, std::uint8_t *& output, int outputSizeBytes, int & bytesDecodedSoFar)
{
    if (code < 0 || code >= 256)
    {
        return false;
    }
    if (bytesDecodedSoFar >= outputSizeBytes)
    {
        return false;
    }
    *output++ = static_cast<std::uint8_t>(code);
    ++bytesDecodedSoFar;
    return true;
}

static bool lzwOutputSequence(const LzwDictionary & dict, int code,
                              std::uint8_t *& output, int outputSizeBytes,
                              int & bytesDecodedSoFar, int & firstByte)
{
    // A sequence is stored backwards, so we have to write
    // it to a temp then output the buffer in reverse.
    int i = 0;
    std::uint8_t sequence[LzwMaxDictEntries];
    do
    {
        sequence[i++] = dict.entries[code].value & 0xFF;
        code = dict.entries[code].code;
    } while (code >= 0);

    firstByte = sequence[--i];
    for (; i >= 0; --i)
    {
        if (!lzwOutputByte(sequence[i], output, outputSizeBytes, bytesDecodedSoFar))
        {
            return false;
        }
    }
    return true;
}

static int lzwDecompress(const void * compressedData, int compressedSizeBytes,
                         int compressedSizeBits, void * uncompressedData,
                         int uncompressedSizeBytes)
{
    if (compressedData == nullptr || uncompressedData == nullptr)
    {
        return 0;
    }
    if (compressedSizeBytes <= 0 || compressedSizeBits <= 0 || uncompressedSizeBytes <= 0)
    {
        return 0;
    }

    int code          = LzwNil;
    int prevCode      = LzwNil;
    int codeBitsWidth = LzwStartBits;
    int firstByte     = 0;
    int bytesDecoded  = 0;

    const std::uint8_t * compressedPtr = reinterpret_cast<const std::uint8_t *>(compressedData);
    std::uint8_t * uncompressedPtr = reinterpret_cast<std::uint8_t *>(uncompressedData);

    // We'll reconstruct the dictionary based on the bit stream codes.
    LzwBitStreamReader bitStream(compressedPtr, compressedSizeBytes, compressedSizeBits);
    LzwDictionary dictionary;

    // We check to avoid an overflow of the user buffer.
    // If the buffer is smaller than the decompressed size, we
    // break the loop and return the current decompression count.
    while (bitStream.numBitsRead < bitStream.sizeInBits)
    {
        if (codeBitsWidth > LzwMaxDictBits)
        {
            break;
        }
        code = bitStream.readBits(codeBitsWidth);

        if (prevCode == LzwNil)
        {
            if (!lzwOutputByte(code, uncompressedPtr, uncompressedSizeBytes, bytesDecoded))
            {
                break;
            }
            firstByte = code;
            prevCode  = code;
            continue;
        }

        if (code >= dictionary.size)
        {
            if (!lzwOutputSequence(dictionary, prevCode, uncompressedPtr,
                 uncompressedSizeBytes, bytesDecoded, firstByte))
            {
                break;
            }
            if (!lzwOutputByte(firstByte, uncompressedPtr, uncompressedSizeBytes, bytesDecoded))
            {
                break;
            }
        }
        else
        {
            if (!lzwOutputSequence(dictionary, code, uncompressedPtr,
                 uncompressedSizeBytes, bytesDecoded, firstByte))
            {
                break;
            }
        }

        if (!dictionary.add(prevCode, firstByte))
        {
            break;
        }

        if (dictionary.flush(codeBitsWidth))
        {
            prevCode = LzwNil;
        }
        else
        {
            prevCode = code;
        }
    }

    return bytesDecoded;
}

// ========================================================
// Built-in font glyph bitmap decompression:
// ========================================================

// If you decide to change the font, these are the only things that
// need to be updated. The s_font* variables are never referenced
// directly in the code, these functions are used instead.
static inline const std::uint8_t* getRawFontBitmapData() { return fontSourceCodeProBitmap;  }
static inline const FontCharSet  & getFontCharSet()       { return fontSourceCodeProCharSet; }

static std::uint8_t * decompressFontBitmap()
{
    const std::uint32_t * compressedData = reinterpret_cast<const std::uint32_t *>(getRawFontBitmapData());

    // First two uint32s are the compressed size in
    // bytes followed by the compressed size in bits.
    const int compressedSizeBytes = *compressedData++;
    const int compressedSizeBits  = *compressedData++;

    // Allocate the decompression buffer:
    const int uncompressedSizeBytes = getFontCharSet().bitmapDecompressSize;
    std::uint8_t * uncompressedData = static_cast<std::uint8_t *>(DD_MALLOC(uncompressedSizeBytes));

    // Out of memory? Font rendering will be disable.
    if (uncompressedData == nullptr)
    {
        return nullptr;
    }

    // Decode the bitmap pixels (stored with an LZW-flavor of compression):
    const int bytesDecoded = lzwDecompress(compressedData,
                                           compressedSizeBytes,
                                           compressedSizeBits,
                                           uncompressedData,
                                           uncompressedSizeBytes);

    // Unexpected decompression size? Probably a data mismatch in the font-tool.
    if (bytesDecoded != uncompressedSizeBytes)
    {
        DD_MFREE(uncompressedData);
        return nullptr;
    }

    // Must later free with DD_MFREE().
    return uncompressedData;
}

// ========================================================
// Internal Debug Draw queues and helper types/functions:
// ========================================================

struct DebugString
{
    std::int64_t expiryDateMillis;
    ddVec3       color;
    float        posX;
    float        posY;
    float        scaling;
    ddStr        text;
    bool         centered;
};

struct DebugPoint
{
    std::int64_t expiryDateMillis;
    ddVec3       position;
    ddVec3       color;
    float        size;
    bool         depthEnabled;
};

struct DebugLine
{
    std::int64_t expiryDateMillis;
    ddVec3       posFrom;
    ddVec3       posTo;
    ddVec3       color;
    bool         depthEnabled;
};

struct InternalContext DD_EXPLICIT_CONTEXT_ONLY(: public OpaqueContextType)
{
    int                vertexBufferUsed;
    int                debugStringsCount;
    int                debugPointsCount;
    int                debugLinesCount;
    std::int64_t       currentTimeMillis;                           // Latest time value (in milliseconds) from dd::flush().
    GlyphTextureHandle glyphTexHandle;                              // Our built-in glyph bitmap. If kept null, no text is rendered.
    RenderInterface *  renderInterface;                             // Ref to the external renderer. Can be null for a no-op debug draw.
    DrawVertex         vertexBuffer[DEBUG_DRAW_VERTEX_BUFFER_SIZE]; // Vertex buffer we use to expand the lines/points before calling on RenderInterface.
    DebugString        debugStrings[DEBUG_DRAW_MAX_STRINGS];        // Debug strings queue (2D screen-space strings + 3D projected labels).
    DebugPoint         debugPoints[DEBUG_DRAW_MAX_POINTS];          // 3D debug points queue.
    DebugLine          debugLines[DEBUG_DRAW_MAX_LINES];            // 3D debug lines queue.

    InternalContext(RenderInterface * renderer)
        : vertexBufferUsed(0)
        , debugStringsCount(0)
        , debugPointsCount(0)
        , debugLinesCount(0)
        , currentTimeMillis(0)
        , glyphTexHandle(nullptr)
        , renderInterface(renderer)
    { }
};

// ========================================================
// Library context mode selection:
// ========================================================

#if (defined(DEBUG_DRAW_PER_THREAD_CONTEXT) && defined(DEBUG_DRAW_EXPLICIT_CONTEXT))
    #error "DEBUG_DRAW_PER_THREAD_CONTEXT and DEBUG_DRAW_EXPLICIT_CONTEXT are mutually exclusive!"
#endif // DEBUG_DRAW_PER_THREAD_CONTEXT && DEBUG_DRAW_EXPLICIT_CONTEXT

#if defined(DEBUG_DRAW_EXPLICIT_CONTEXT)
    //
    // Explicit context passed as argument
    //
    #define DD_CONTEXT static_cast<InternalContext *>(ctx)
#elif defined(DEBUG_DRAW_PER_THREAD_CONTEXT)
    //
    // Per-thread global context (MT safe)
    //
    #if defined(__GNUC__) || defined(__clang__) // GCC/Clang
        #define DD_THREAD_LOCAL static __thread
    #elif defined(_MSC_VER) // Visual Studio
        #define DD_THREAD_LOCAL static __declspec(thread)
    #else // Try C++11 thread_local
        #if DEBUG_DRAW_CXX11_SUPPORTED
            #define DD_THREAD_LOCAL static thread_local
        #else // !DEBUG_DRAW_CXX11_SUPPORTED
            #error "Unsupported compiler - unknown TLS model"
        #endif // DEBUG_DRAW_CXX11_SUPPORTED
    #endif // TLS model
    DD_THREAD_LOCAL InternalContext * s_threadContext = nullptr;
    #define DD_CONTEXT s_threadContext
    #undef DD_THREAD_LOCAL
#else // Debug Draw context selection
    //
    // Global static context (single threaded operation)
    //
    static InternalContext * s_globalContext = nullptr;
    #define DD_CONTEXT s_globalContext
#endif // Debug Draw context selection

// ========================================================

#if DEBUG_DRAW_USE_STD_MATH

static inline float floatAbs(float x)       { return fabsf(x); }
static inline float floatSin(float radians) { return sinf(radians); }
static inline float floatCos(float radians) { return cosf(radians); }
static inline float floatInvSqrt(float x)   { return (1.0f / sqrtf(x)); }

#else // !DEBUG_DRAW_USE_STD_MATH

// ========================================================
// Fast approximations of math functions used by Debug Draw
// ========================================================

union Float2UInt
{
    float asFloat;
    std::uint32_t asUInt;
};

static inline float floatRound(float x)
{
    // Probably slower than std::floor(), also depends of FPU settings,
    // but we only need this for that special sin/cos() case anyways...
    const int i = static_cast<int>(x);
    return (x >= 0.0f) ? static_cast<float>(i) : static_cast<float>(i - 1);
}

static inline float floatAbs(float x)
{
    // Mask-off the sign bit
    Float2UInt i;
    i.asFloat = x;
    i.asUInt &= 0x7FFFFFFF;
    return i.asFloat;
}

static inline float floatInvSqrt(float x)
{
    // Modified version of the emblematic Q_rsqrt() from Quake 3.
    // See: http://en.wikipedia.org/wiki/Fast_inverse_square_root
    Float2UInt i;
    float y, r;
    y = x * 0.5f;
    i.asFloat = x;
    i.asUInt = 0x5F3759DF - (i.asUInt >> 1);
    r = i.asFloat;
    r = r * (1.5f - (r * r * y));
    return r;
}

static inline float floatSin(float radians)
{
    static const float A = -2.39e-08;
    static const float B = 2.7526e-06;
    static const float C = 1.98409e-04;
    static const float D = 8.3333315e-03;
    static const float E = 1.666666664e-01;

    if (radians < 0.0f || radians >= TAU)
    {
        radians -= floatRound(radians / TAU) * TAU;
    }

    if (radians < PI)
    {
        if (radians > HalfPI)
        {
            radians = PI - radians;
        }
    }
    else
    {
        radians = (radians > (PI + HalfPI)) ? (radians - TAU) : (PI - radians);
    }

    const float s = radians * radians;
    return radians * (((((A * s + B) * s - C) * s + D) * s - E) * s + 1.0f);
}

static inline float floatCos(float radians)
{
    static const float A = -2.605e-07;
    static const float B = 2.47609e-05;
    static const float C = 1.3888397e-03;
    static const float D = 4.16666418e-02;
    static const float E = 4.999999963e-01;

    if (radians < 0.0f || radians >= TAU)
    {
        radians -= floatRound(radians / TAU) * TAU;
    }

    float d;
    if (radians < PI)
    {
        if (radians > HalfPI)
        {
            radians = PI - radians;
            d = -1.0f;
        }
        else
        {
            d = 1.0f;
        }
    }
    else
    {
        if (radians > (PI + HalfPI))
        {
            radians = radians - TAU;
            d = 1.0f;
        }
        else
        {
            radians = PI - radians;
            d = -1.0f;
        }
    }

    const float s = radians * radians;
    return d * (((((A * s + B) * s - C) * s + D) * s - E) * s + 1.0f);
}

#endif // DEBUG_DRAW_USE_STD_MATH

// ========================================================
// ddVec3 helpers:
// ========================================================

enum VecElements { X, Y, Z, W };

static inline void vecSet(ddVec3_Out dest, const float x, const float y, const float z)
{
    dest[X] = x;
    dest[Y] = y;
    dest[Z] = z;
}

static inline void vecCopy(ddVec3_Out dest, ddVec3_In src)
{
    dest[X] = src[X];
    dest[Y] = src[Y];
    dest[Z] = src[Z];
}

static inline void vecAdd(ddVec3_Out result, ddVec3_In a, ddVec3_In b)
{
    result[X] = a[X] + b[X];
    result[Y] = a[Y] + b[Y];
    result[Z] = a[Z] + b[Z];
}

static inline void vecSub(ddVec3_Out result, ddVec3_In a, ddVec3_In b)
{
    result[X] = a[X] - b[X];
    result[Y] = a[Y] - b[Y];
    result[Z] = a[Z] - b[Z];
}

static inline void vecScale(ddVec3_Out result, ddVec3_In v, const float s)
{
    result[X] = v[X] * s;
    result[Y] = v[Y] * s;
    result[Z] = v[Z] * s;
}

static inline void vecNormalize(ddVec3_Out result, ddVec3_In v)
{
    const float lenSqr = v[X] * v[X] + v[Y] * v[Y] + v[Z] * v[Z];
    const float invLen = floatInvSqrt(lenSqr);
    result[X] = v[X] * invLen;
    result[Y] = v[Y] * invLen;
    result[Z] = v[Z] * invLen;
}

static inline void vecOrthogonalBasis(ddVec3_Out left, ddVec3_Out up, ddVec3_In v)
{
    // Produces two orthogonal vectors for normalized vector v.
    float lenSqr, invLen;
    if (floatAbs(v[Z]) > 0.7f)
    {
        lenSqr  = v[Y] * v[Y] + v[Z] * v[Z];
        invLen  = floatInvSqrt(lenSqr);
        up[X]   = 0.0f;
        up[Y]   =  v[Z] * invLen;
        up[Z]   = -v[Y] * invLen;
        left[X] = lenSqr * invLen;
        left[Y] = -v[X] * up[Z];
        left[Z] =  v[X] * up[Y];
    }
    else
    {
        lenSqr  = v[X] * v[X] + v[Y] * v[Y];
        invLen  = floatInvSqrt(lenSqr);
        left[X] = -v[Y] * invLen;
        left[Y] =  v[X] * invLen;
        left[Z] = 0.0f;
        up[X]   = -v[Z] * left[Y];
        up[Y]   =  v[Z] * left[X];
        up[Z]   = lenSqr * invLen;
    }
}

// ========================================================
// ddMat4x4 helpers:
// ========================================================

static inline void matTransformPointXYZ(ddVec3_Out result, ddVec3_In p, ddMat4x4_In m)
{
    result[X] = (m[0] * p[X]) + (m[4] * p[Y]) + (m[8]  * p[Z]) + m[12]; // p[W] assumed to be 1
    result[Y] = (m[1] * p[X]) + (m[5] * p[Y]) + (m[9]  * p[Z]) + m[13];
    result[Z] = (m[2] * p[X]) + (m[6] * p[Y]) + (m[10] * p[Z]) + m[14];
}

static inline void matTransformPointXYZW(float result[4], ddVec3_In p, ddMat4x4_In m)
{
    result[X] = (m[0] * p[X]) + (m[4] * p[Y]) + (m[8]  * p[Z]) + m[12]; // p[W] assumed to be 1
    result[Y] = (m[1] * p[X]) + (m[5] * p[Y]) + (m[9]  * p[Z]) + m[13];
    result[Z] = (m[2] * p[X]) + (m[6] * p[Y]) + (m[10] * p[Z]) + m[14];
    result[W] = (m[3] * p[X]) + (m[7] * p[Y]) + (m[11] * p[Z]) + m[15];
}

static inline float matTransformPointXYZW2(ddVec3_Out result, const float p[3], ddMat4x4_In m)
{
    result[X] = (m[0] * p[X]) + (m[4] * p[Y]) + (m[8]  * p[Z]) + m[12]; // p[W] assumed to be 1
    result[Y] = (m[1] * p[X]) + (m[5] * p[Y]) + (m[9]  * p[Z]) + m[13];
    result[Z] = (m[2] * p[X]) + (m[6] * p[Y]) + (m[10] * p[Z]) + m[14];
    float rw  = (m[3] * p[X]) + (m[7] * p[Y]) + (m[11] * p[Z]) + m[15];
    return rw;
}

// ========================================================
// Misc local functions for draw queue management:
// ========================================================

enum DrawMode
{
    DrawModePoints,
    DrawModeLines,
    DrawModeText
};

static void flushDebugVerts(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) const DrawMode mode, const bool depthEnabled)
{
    if (DD_CONTEXT->vertexBufferUsed == 0)
    {
        return;
    }

    switch (mode)
    {
    case DrawModePoints :
        DD_CONTEXT->renderInterface->drawPointList(DD_CONTEXT->vertexBuffer,
                                                   DD_CONTEXT->vertexBufferUsed,
                                                   depthEnabled);
        break;
    case DrawModeLines :
        DD_CONTEXT->renderInterface->drawLineList(DD_CONTEXT->vertexBuffer,
                                                  DD_CONTEXT->vertexBufferUsed,
                                                  depthEnabled);
        break;
    case DrawModeText :
        DD_CONTEXT->renderInterface->drawGlyphList(DD_CONTEXT->vertexBuffer,
                                                   DD_CONTEXT->vertexBufferUsed,
                                                   DD_CONTEXT->glyphTexHandle);
        break;
    } // switch (mode)

    DD_CONTEXT->vertexBufferUsed = 0;
}

static void pushPointVert(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) const DebugPoint & point)
{
    // Make room for one more vert:
    if ((DD_CONTEXT->vertexBufferUsed + 1) >= DEBUG_DRAW_VERTEX_BUFFER_SIZE)
    {
        flushDebugVerts(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DrawModePoints, point.depthEnabled);
    }

    DrawVertex & v = DD_CONTEXT->vertexBuffer[DD_CONTEXT->vertexBufferUsed++];
    v.point.x      = point.position[X];
    v.point.y      = point.position[Y];
    v.point.z      = point.position[Z];
    v.point.r      = point.color[X];
    v.point.g      = point.color[Y];
    v.point.b      = point.color[Z];
    v.point.size   = point.size;
}

static void pushLineVert(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) const DebugLine & line)
{
    // Make room for two more verts:
    if ((DD_CONTEXT->vertexBufferUsed + 2) >= DEBUG_DRAW_VERTEX_BUFFER_SIZE)
    {
        flushDebugVerts(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DrawModeLines, line.depthEnabled);
    }

    DrawVertex & v0 = DD_CONTEXT->vertexBuffer[DD_CONTEXT->vertexBufferUsed++];
    DrawVertex & v1 = DD_CONTEXT->vertexBuffer[DD_CONTEXT->vertexBufferUsed++];

    v0.line.x = line.posFrom[X];
    v0.line.y = line.posFrom[Y];
    v0.line.z = line.posFrom[Z];
    v0.line.r = line.color[X];
    v0.line.g = line.color[Y];
    v0.line.b = line.color[Z];

    v1.line.x = line.posTo[X];
    v1.line.y = line.posTo[Y];
    v1.line.z = line.posTo[Z];
    v1.line.r = line.color[X];
    v1.line.g = line.color[Y];
    v1.line.b = line.color[Z];
}

static void pushGlyphVerts(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) const DrawVertex verts[4])
{
    static const int indexes[6] = { 0, 1, 2, 2, 1, 3 };

    // Make room for one more glyph (2 tris):
    if ((DD_CONTEXT->vertexBufferUsed + 6) >= DEBUG_DRAW_VERTEX_BUFFER_SIZE)
    {
        flushDebugVerts(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DrawModeText, false);
    }

    for (int i = 0; i < 6; ++i)
    {
        DD_CONTEXT->vertexBuffer[DD_CONTEXT->vertexBufferUsed++].glyph = verts[indexes[i]].glyph;
    }
}

static void pushStringGlyphs(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) float x, float y,
                             const char * text, ddVec3_In color, const float scaling)
{
    // Invariants for all characters:
    const float initialX    = x;
    const float scaleU      = static_cast<float>(getFontCharSet().bitmapWidth);
    const float scaleV      = static_cast<float>(getFontCharSet().bitmapHeight);
    const float fixedWidth  = static_cast<float>(getFontCharSet().charWidth);
    const float fixedHeight = static_cast<float>(getFontCharSet().charHeight);
    const float tabW        = fixedWidth  * 4.0f * scaling; // TAB = 4 spaces.
    const float chrW        = fixedWidth  * scaling;
    const float chrH        = fixedHeight * scaling;

    for (; *text != '\0'; ++text)
    {
        const int charVal = *text;
        if (charVal >= FontCharSet::MaxChars)
        {
            continue;
        }
        if (charVal == ' ')
        {
            x += chrW;
            continue;
        }
        if (charVal == '\t')
        {
            x += tabW;
            continue;
        }
        if (charVal == '\n')
        {
            y += chrH;
            x  = initialX;
            continue;
        }

        const FontChar fontChar = getFontCharSet().chars[charVal];
        const float u0 = (fontChar.x + 0.5f) / scaleU;
        const float v0 = (fontChar.y + 0.5f) / scaleV;
        const float u1 = u0 + (fixedWidth  / scaleU);
        const float v1 = v0 + (fixedHeight / scaleV);

        DrawVertex verts[4];
        verts[0].glyph.x = x;
        verts[0].glyph.y = y;
        verts[0].glyph.u = u0;
        verts[0].glyph.v = v0;
        verts[0].glyph.r = color[X];
        verts[0].glyph.g = color[Y];
        verts[0].glyph.b = color[Z];
        verts[1].glyph.x = x;
        verts[1].glyph.y = y + chrH;
        verts[1].glyph.u = u0;
        verts[1].glyph.v = v1;
        verts[1].glyph.r = color[X];
        verts[1].glyph.g = color[Y];
        verts[1].glyph.b = color[Z];
        verts[2].glyph.x = x + chrW;
        verts[2].glyph.y = y;
        verts[2].glyph.u = u1;
        verts[2].glyph.v = v0;
        verts[2].glyph.r = color[X];
        verts[2].glyph.g = color[Y];
        verts[2].glyph.b = color[Z];
        verts[3].glyph.x = x + chrW;
        verts[3].glyph.y = y + chrH;
        verts[3].glyph.u = u1;
        verts[3].glyph.v = v1;
        verts[3].glyph.r = color[X];
        verts[3].glyph.g = color[Y];
        verts[3].glyph.b = color[Z];

        pushGlyphVerts(DD_EXPLICIT_CONTEXT_ONLY(ctx,) verts);
        x += chrW;
    }
}

static float calcTextWidth(const char * text, const float scaling)
{
    const float fixedWidth = static_cast<float>(getFontCharSet().charWidth);
    const float tabW = fixedWidth * 4.0f * scaling; // TAB = 4 spaces.
    const float chrW = fixedWidth * scaling;

    float x = 0.0f;
    for (; *text != '\0'; ++text)
    {
        // Tabs are handled differently (4 spaces)
        if (*text == '\t')
        {
            x += tabW;
        }
        else // Non-tab char (including whitespace)
        {
            x += chrW;
        }
    }

    return x;
}

static void drawDebugStrings(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx))
{
    const int count = DD_CONTEXT->debugStringsCount;
    if (count == 0)
    {
        return;
    }

    const DebugString * const debugStrings = DD_CONTEXT->debugStrings;

    for (int i = 0; i < count; ++i)
    {
        const DebugString & dstr = debugStrings[i];
        if (dstr.centered)
        {
            // 3D Labels are centered at the point of origin, e.g. center-aligned.
            const float offset = calcTextWidth(dstr.text.c_str(), dstr.scaling) * 0.5f;
            pushStringGlyphs(DD_EXPLICIT_CONTEXT_ONLY(ctx,) dstr.posX - offset, dstr.posY, dstr.text.c_str(), dstr.color, dstr.scaling);
        }
        else
        {
            // Left-aligned
            pushStringGlyphs(DD_EXPLICIT_CONTEXT_ONLY(ctx,) dstr.posX, dstr.posY, dstr.text.c_str(), dstr.color, dstr.scaling);
        }
    }

    flushDebugVerts(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DrawModeText, false);
}

static void drawDebugPoints(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx))
{
    const int count = DD_CONTEXT->debugPointsCount;
    if (count == 0)
    {
        return;
    }

    const DebugPoint * const debugPoints = DD_CONTEXT->debugPoints;

    //
    // First pass, points with depth test ENABLED:
    //
    int numDepthlessPoints = 0;
    for (int i = 0; i < count; ++i)
    {
        const DebugPoint & point = debugPoints[i];
        if (point.depthEnabled)
        {
            pushPointVert(DD_EXPLICIT_CONTEXT_ONLY(ctx,) point);
        }
        numDepthlessPoints += !point.depthEnabled;
    }
    flushDebugVerts(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DrawModePoints, true);

    //
    // Second pass draws points with depth DISABLED:
    //
    if (numDepthlessPoints > 0)
    {
        for (int i = 0; i < count; ++i)
        {
            const DebugPoint & point = debugPoints[i];
            if (!point.depthEnabled)
            {
                pushPointVert(DD_EXPLICIT_CONTEXT_ONLY(ctx,) point);
            }
        }
        flushDebugVerts(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DrawModePoints, false);
    }
}

static void drawDebugLines(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx))
{
    const int count = DD_CONTEXT->debugLinesCount;
    if (count == 0)
    {
        return;
    }

    const DebugLine * const debugLines = DD_CONTEXT->debugLines;

    //
    // First pass, lines with depth test ENABLED:
    //
    int numDepthlessLines = 0;
    for (int i = 0; i < count; ++i)
    {
        const DebugLine & line = debugLines[i];
        if (line.depthEnabled)
        {
            pushLineVert(DD_EXPLICIT_CONTEXT_ONLY(ctx,) line);
        }
        numDepthlessLines += !line.depthEnabled;
    }
    flushDebugVerts(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DrawModeLines, true);

    //
    // Second pass draws lines with depth DISABLED:
    //
    if (numDepthlessLines > 0)
    {
        for (int i = 0; i < count; ++i)
        {
            const DebugLine & line = debugLines[i];
            if (!line.depthEnabled)
            {
                pushLineVert(DD_EXPLICIT_CONTEXT_ONLY(ctx,) line);
            }
        }
        flushDebugVerts(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DrawModeLines, false);
    }
}

template<typename T>
static void clearDebugQueue(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) T * queue, int & queueCount)
{
    const std::int64_t time = DD_CONTEXT->currentTimeMillis;
    if (time == 0)
    {
        queueCount = 0;
        return;
    }

    int index = 0;
    T * pElem = queue;

    // Concatenate elements that still need to be draw on future frames:
    for (int i = 0; i < queueCount; ++i, ++pElem)
    {
        if (pElem->expiryDateMillis > time)
        {
            if (index != i)
            {
                queue[index] = *pElem;
            }
            ++index;
        }
    }

    queueCount = index;
}

static void setupGlyphTexture(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx))
{
    if (DD_CONTEXT->renderInterface == nullptr)
    {
        return;
    }

    if (DD_CONTEXT->glyphTexHandle != nullptr)
    {
        DD_CONTEXT->renderInterface->destroyGlyphTexture(DD_CONTEXT->glyphTexHandle);
        DD_CONTEXT->glyphTexHandle = nullptr;
    }

    std::uint8_t * decompressedBitmap = decompressFontBitmap();
    if (decompressedBitmap == nullptr)
    {
        return; // Failed to decompressed. No font rendering available.
    }

    DD_CONTEXT->glyphTexHandle = DD_CONTEXT->renderInterface->createGlyphTexture(
                                        getFontCharSet().bitmapWidth,
                                        getFontCharSet().bitmapHeight,
                                        decompressedBitmap);

    // No longer needed.
    DD_MFREE(decompressedBitmap);
}

// ========================================================
// Public Debug Draw interface:
// ========================================================

bool initialize(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle * outCtx,) RenderInterface * renderer)
{
    if (renderer == nullptr)
    {
        return false;
    }

    void * buffer = DD_MALLOC(sizeof(InternalContext));
    if (buffer == nullptr)
    {
        return false;
    }

    InternalContext * newCtx = ::new(buffer) InternalContext(renderer);

    #ifdef DEBUG_DRAW_EXPLICIT_CONTEXT
    if ((*outCtx) != nullptr) { shutdown(*outCtx); }
    (*outCtx) = newCtx;
    #else // !DEBUG_DRAW_EXPLICIT_CONTEXT
    if (DD_CONTEXT != nullptr) { shutdown(); }
    DD_CONTEXT = newCtx;
    #endif // DEBUG_DRAW_EXPLICIT_CONTEXT

    setupGlyphTexture(DD_EXPLICIT_CONTEXT_ONLY(*outCtx));
    return true;
}

void shutdown(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx))
{
    if (DD_CONTEXT != nullptr)
    {
        // If this macro is defined, the user-provided ddStr type
        // needs some extra cleanup before shutdown, so we run for
        // all entries in the debugStrings[] array.
        //
        // We could call std::string::clear() here, but clear()
        // doesn't deallocate memory in std string, so we might
        // as well let the default destructor do the cleanup,
        // when using the default (AKA std::string) ddStr.
        #ifdef DEBUG_DRAW_STR_DEALLOC_FUNC
        for (int i = 0; i < DEBUG_DRAW_MAX_STRINGS; ++i)
        {
            DEBUG_DRAW_STR_DEALLOC_FUNC(DD_CONTEXT->debugStrings[i].text);
        }
        #endif // DEBUG_DRAW_STR_DEALLOC_FUNC

        if (DD_CONTEXT->renderInterface != nullptr && DD_CONTEXT->glyphTexHandle != nullptr)
        {
            DD_CONTEXT->renderInterface->destroyGlyphTexture(DD_CONTEXT->glyphTexHandle);
        }

        DD_CONTEXT->~InternalContext(); // Destroy first
        DD_MFREE(DD_CONTEXT);

        #ifndef DEBUG_DRAW_EXPLICIT_CONTEXT
        DD_CONTEXT = nullptr;
        #endif // DEBUG_DRAW_EXPLICIT_CONTEXT
    }
}

bool isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx))
{
    return (DD_CONTEXT != nullptr && DD_CONTEXT->renderInterface != nullptr);
}

bool hasPendingDraws(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx))
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return false;
    }
    return (DD_CONTEXT->debugStringsCount + DD_CONTEXT->debugPointsCount + DD_CONTEXT->debugLinesCount) > 0;
}

void flush(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) const std::int64_t currTimeMillis, const std::uint32_t flags)
{
    if (!hasPendingDraws(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    // Save the last know time value for next dd::line/dd::point calls.
    DD_CONTEXT->currentTimeMillis = currTimeMillis;

    // Let the user set common render states.
    DD_CONTEXT->renderInterface->beginDraw();

    // Issue the render calls:
    if (flags & FlushLines)  { drawDebugLines(DD_EXPLICIT_CONTEXT_ONLY(ctx));   }
    if (flags & FlushPoints) { drawDebugPoints(DD_EXPLICIT_CONTEXT_ONLY(ctx));  }
    if (flags & FlushText)   { drawDebugStrings(DD_EXPLICIT_CONTEXT_ONLY(ctx)); }

    // And cleanup if needed.
    DD_CONTEXT->renderInterface->endDraw();

    // Remove all expired objects, regardless of draw flags:
    clearDebugQueue(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DD_CONTEXT->debugStrings, DD_CONTEXT->debugStringsCount);
    clearDebugQueue(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DD_CONTEXT->debugPoints,  DD_CONTEXT->debugPointsCount);
    clearDebugQueue(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DD_CONTEXT->debugLines,   DD_CONTEXT->debugLinesCount);
}

void clear(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx))
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    // Let the user cleanup the debug strings:
    #ifdef DEBUG_DRAW_STR_DEALLOC_FUNC
    for (int i = 0; i < DEBUG_DRAW_MAX_STRINGS; ++i)
    {
        DEBUG_DRAW_STR_DEALLOC_FUNC(DD_CONTEXT->debugStrings[i].text);
    }
    #endif // DEBUG_DRAW_STR_DEALLOC_FUNC

    DD_CONTEXT->vertexBufferUsed  = 0;
    DD_CONTEXT->debugStringsCount = 0;
    DD_CONTEXT->debugPointsCount  = 0;
    DD_CONTEXT->debugLinesCount   = 0;
}

void point(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In pos, ddVec3_In color,
           const float size, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    if (DD_CONTEXT->debugPointsCount == DEBUG_DRAW_MAX_POINTS)
    {
        DEBUG_DRAW_OVERFLOWED("DEBUG_DRAW_MAX_POINTS limit reached! Dropping further debug point draws.");
        return;
    }

    DebugPoint & point     = DD_CONTEXT->debugPoints[DD_CONTEXT->debugPointsCount++];
    point.expiryDateMillis = DD_CONTEXT->currentTimeMillis + durationMillis;
    point.depthEnabled     = depthEnabled;
    point.size             = size;

    vecCopy(point.position, pos);
    vecCopy(point.color, color);
}

void line(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In from, ddVec3_In to,
          ddVec3_In color, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    if (DD_CONTEXT->debugLinesCount == DEBUG_DRAW_MAX_LINES)
    {
        DEBUG_DRAW_OVERFLOWED("DEBUG_DRAW_MAX_LINES limit reached! Dropping further debug line draws.");
        return;
    }

    DebugLine & line      = DD_CONTEXT->debugLines[DD_CONTEXT->debugLinesCount++];
    line.expiryDateMillis = DD_CONTEXT->currentTimeMillis + durationMillis;
    line.depthEnabled     = depthEnabled;

    vecCopy(line.posFrom, from);
    vecCopy(line.posTo, to);
    vecCopy(line.color, color);
}

void screenText(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) const char * const str, ddVec3_In pos,
                ddVec3_In color, const float scaling, const int durationMillis)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    if (DD_CONTEXT->glyphTexHandle == nullptr)
    {
        return;
    }

    if (DD_CONTEXT->debugStringsCount == DEBUG_DRAW_MAX_STRINGS)
    {
        DEBUG_DRAW_OVERFLOWED("DEBUG_DRAW_MAX_STRINGS limit reached! Dropping further debug string draws.");
        return;
    }

    DebugString & dstr    = DD_CONTEXT->debugStrings[DD_CONTEXT->debugStringsCount++];
    dstr.expiryDateMillis = DD_CONTEXT->currentTimeMillis + durationMillis;
    dstr.posX             = pos[X];
    dstr.posY             = pos[Y];
    dstr.scaling          = scaling;
    dstr.text             = str;
    dstr.centered         = false;
    vecCopy(dstr.color, color);
}

void worldToScreen(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx, ) ddVec3_In pos, ddMat4x4_In vpMatrix, ddVec3_Out outScreenPos,
    const int sx, const int sy, const int sw, const int sh, const float scaling, const int durationMillis)
{

    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    float tempPoint[4];
    matTransformPointXYZW(tempPoint, pos, vpMatrix);

    // Bail if W ended up as zero.
    if (floatAbs(tempPoint[W]) < FloatEpsilon)
    {
        return;
    }

    // Bail if point is behind camera.
    if (tempPoint[Z] < -tempPoint[W] /*|| tempPoint[Z] > tempPoint[W]*/)
    {
        return;
    }
    
    // Perspective divide (we only care about the 2D part now):
    tempPoint[X] /= tempPoint[W];
    tempPoint[Y] /= tempPoint[W];

    // Map to window coordinates:
    float scrX = ((tempPoint[X] * 0.5f) + 0.5f) * sw + sx;
    float scrY = ((tempPoint[Y] * 0.5f) + 0.5f) * sh + sy;

    // Need to invert the direction because on OGL the screen origin is the bottom-left corner.
    // NOTE: This is not renderer agnostic, I think... Should add a #define or something!
    scrY = static_cast<float>(sh) - scrY;

    outScreenPos[X] = scrX;
    outScreenPos[Y] = scrY;
    outScreenPos[Z] = tempPoint[W];
}

void projectedText(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) const char * const str, ddVec3_In pos, ddVec3_In color,
                   ddMat4x4_In vpMatrix, const int sx, const int sy, const int sw, const int sh, const float scaling,
                   const int durationMillis)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    if (DD_CONTEXT->glyphTexHandle == nullptr)
    {
        return;
    }

    if (DD_CONTEXT->debugStringsCount == DEBUG_DRAW_MAX_STRINGS)
    {
        DEBUG_DRAW_OVERFLOWED("DEBUG_DRAW_MAX_STRINGS limit reached! Dropping further debug string draws.");
        return;
    }

    float tempPoint[4];
    matTransformPointXYZW(tempPoint, pos, vpMatrix);

    // Bail if W ended up as zero.
    if (floatAbs(tempPoint[W]) < FloatEpsilon)
    {
        return;
    }

    // Bail if point is behind camera.
    if (tempPoint[Z] < -tempPoint[W] /*|| tempPoint[Z] > tempPoint[W]*/)
    {
        return;
    }
    
    // Perspective divide (we only care about the 2D part now):
    tempPoint[X] /= tempPoint[W];
    tempPoint[Y] /= tempPoint[W];

    // Map to window coordinates:
    float scrX = ((tempPoint[X] * 0.5f) + 0.5f) * sw + sx;
    float scrY = ((tempPoint[Y] * 0.5f) + 0.5f) * sh + sy;

    // Need to invert the direction because on OGL the screen origin is the bottom-left corner.
    // NOTE: This is not renderer agnostic, I think... Should add a #define or something!
    scrY = static_cast<float>(sh) - scrY;

    DebugString & dstr    = DD_CONTEXT->debugStrings[DD_CONTEXT->debugStringsCount++];
    dstr.expiryDateMillis = DD_CONTEXT->currentTimeMillis + durationMillis;
    dstr.posX             = scrX;
    dstr.posY             = scrY;
    dstr.scaling          = scaling;
    dstr.text             = str;
    dstr.centered         = true;
    vecCopy(dstr.color, color);
}

void axisTriad(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddMat4x4_In transform, const float size,
               const float length, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    ddVec3 p0, p1, p2, p3;
    ddVec3 xEnd, yEnd, zEnd;
    ddVec3 origin, cR, cG, cB;

    vecSet(cR, 1.0f, 0.0f, 0.0f);
    vecSet(cG, 0.0f, 1.0f, 0.0f);
    vecSet(cB, 0.0f, 0.0f, 1.0f);

    vecSet(origin, 0.0f, 0.0f, 0.0f);
    vecSet(xEnd, length, 0.0f, 0.0f);
    vecSet(yEnd, 0.0f, length, 0.0f);
    vecSet(zEnd, 0.0f, 0.0f, length);

    matTransformPointXYZ(p0, origin, transform);
    matTransformPointXYZ(p1, xEnd, transform);
    matTransformPointXYZ(p2, yEnd, transform);
    matTransformPointXYZ(p3, zEnd, transform);

    arrow(DD_EXPLICIT_CONTEXT_ONLY(ctx,) p0, p1, cR, size, durationMillis, depthEnabled); // X: red axis
    arrow(DD_EXPLICIT_CONTEXT_ONLY(ctx,) p0, p2, cG, size, durationMillis, depthEnabled); // Y: green axis
    arrow(DD_EXPLICIT_CONTEXT_ONLY(ctx,) p0, p3, cB, size, durationMillis, depthEnabled); // Z: blue axis
}

void arrow(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In from, ddVec3_In to, ddVec3_In color,
           const float size, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    static const float arrowStep = 30.0f; // In degrees
    static const float arrowSin[45] = {
        0.0f, 0.5f, 0.866025f, 1.0f, 0.866025f, 0.5f, -0.0f, -0.5f, -0.866025f,
        -1.0f, -0.866025f, -0.5f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };
    static const float arrowCos[45] = {
        1.0f, 0.866025f, 0.5f, -0.0f, -0.5f, -0.866026f, -1.0f, -0.866025f, -0.5f, 0.0f,
        0.5f, 0.866026f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    // Body line:
    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) from, to, color, durationMillis, depthEnabled);

    // Aux vectors to compute the arrowhead:
    ddVec3 up, right, forward;
    vecSub(forward, to, from);
    vecNormalize(forward, forward);
    vecOrthogonalBasis(right, up, forward);
    vecScale(forward, forward, size);

    // Arrowhead is a cone (sin/cos tables used here):
    float degrees = 0.0f;
    for (int i = 0; degrees < 360.0f; degrees += arrowStep, ++i)
    {
        float scale;
        ddVec3 v1, v2, temp;

        scale = 0.5f * size * arrowCos[i];
        vecScale(temp, right, scale);
        vecSub(v1, to, forward);
        vecAdd(v1, v1, temp);

        scale = 0.5f * size * arrowSin[i];
        vecScale(temp, up, scale);
        vecAdd(v1, v1, temp);

        scale = 0.5f * size * arrowCos[i + 1];
        vecScale(temp, right, scale);
        vecSub(v2, to, forward);
        vecAdd(v2, v2, temp);

        scale = 0.5f * size * arrowSin[i + 1];
        vecScale(temp, up, scale);
        vecAdd(v2, v2, temp);

        line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) v1, to, color, durationMillis, depthEnabled);
        line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) v1, v2, color, durationMillis, depthEnabled);
    }
}

void cross(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In center, const float length,
           const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    ddVec3 from, to;
    ddVec3 cR, cG, cB;

    vecSet(cR, 1.0f, 0.0f, 0.0f);
    vecSet(cG, 0.0f, 1.0f, 0.0f);
    vecSet(cB, 0.0f, 0.0f, 1.0f);

    const float cx = center[X];
    const float cy = center[Y];
    const float cz = center[Z];
    const float hl = length * 0.5f; // Half on each side.

    // Red line: X - length/2 to X + length/2
    vecSet(from, cx - hl, cy, cz);
    vecSet(to,   cx + hl, cy, cz);
    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) from, to, cR, durationMillis, depthEnabled);

    // Green line: Y - length/2 to Y + length/2
    vecSet(from, cx, cy - hl, cz);
    vecSet(to,   cx, cy + hl, cz);
    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) from, to, cG, durationMillis, depthEnabled);

    // Blue line: Z - length/2 to Z + length/2
    vecSet(from, cx, cy, cz - hl);
    vecSet(to,   cx, cy, cz + hl);
    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) from, to, cB, durationMillis, depthEnabled);
}

void circle(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In center, ddVec3_In planeNormal, ddVec3_In color,
            const float radius, const float numSteps, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    ddVec3 left, up;
    ddVec3 point, lastPoint;

    vecOrthogonalBasis(left, up, planeNormal);

    vecScale(up, up, radius);
    vecScale(left, left, radius);
    vecAdd(lastPoint, center, up);

    for (int i = 1; i <= numSteps; ++i)
    {
        const float radians = TAU * i / numSteps;

        ddVec3 vs, vc;
        vecScale(vs, left, floatSin(radians));
        vecScale(vc, up,   floatCos(radians));

        vecAdd(point, center, vs);
        vecAdd(point, point,  vc);

        line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) lastPoint, point, color, durationMillis, depthEnabled);
        vecCopy(lastPoint, point);
    }
}

void plane(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In center, ddVec3_In planeNormal, ddVec3_In planeColor,
           ddVec3_In normalVecColor, const float planeScale, const float normalVecScale, const int durationMillis,
           const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    ddVec3 v1, v2, v3, v4;
    ddVec3 tangent, bitangent;
    vecOrthogonalBasis(tangent, bitangent, planeNormal);

    // A little bit of preprocessor voodoo to make things more interesting :P
    #define DD_PLANE_V(v, op1, op2) \
    v[X] = (center[X] op1 (tangent[X] * planeScale) op2 (bitangent[X] * planeScale)); \
    v[Y] = (center[Y] op1 (tangent[Y] * planeScale) op2 (bitangent[Y] * planeScale)); \
    v[Z] = (center[Z] op1 (tangent[Z] * planeScale) op2 (bitangent[Z] * planeScale))
    DD_PLANE_V(v1, -, -);
    DD_PLANE_V(v2, +, -);
    DD_PLANE_V(v3, +, +);
    DD_PLANE_V(v4, -, +);
    #undef DD_PLANE_V

    // Draw the wireframe plane quadrilateral:
    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) v1, v2, planeColor, durationMillis, depthEnabled);
    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) v2, v3, planeColor, durationMillis, depthEnabled);
    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) v3, v4, planeColor, durationMillis, depthEnabled);
    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) v4, v1, planeColor, durationMillis, depthEnabled);

    // Optionally add a line depicting the plane normal:
    if (normalVecScale != 0.0f)
    {
        ddVec3 normalVec;
        normalVec[X] = (planeNormal[X] * normalVecScale) + center[X];
        normalVec[Y] = (planeNormal[Y] * normalVecScale) + center[Y];
        normalVec[Z] = (planeNormal[Z] * normalVecScale) + center[Z];
        line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) center, normalVec, normalVecColor, durationMillis, depthEnabled);
    }
}

void sphere(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In center, ddVec3_In color,
            const float radius, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    static const int stepSize = 15;
    ddVec3 cache[360 / stepSize];
    ddVec3 radiusVec;

    vecSet(radiusVec, 0.0f, 0.0f, radius);
    vecAdd(cache[0], center, radiusVec);

    for (int n = 1; n < arrayLength(cache); ++n)
    {
        vecCopy(cache[n], cache[0]);
    }

    ddVec3 lastPoint, temp;
    for (int i = stepSize; i <= 360; i += stepSize)
    {
        const float s = floatSin(degreesToRadians(i));
        const float c = floatCos(degreesToRadians(i));

        lastPoint[X] = center[X];
        lastPoint[Y] = center[Y] + radius * s;
        lastPoint[Z] = center[Z] + radius * c;

        for (int n = 0, j = stepSize; j <= 360; j += stepSize, ++n)
        {
            temp[X] = center[X] + floatSin(degreesToRadians(j)) * radius * s;
            temp[Y] = center[Y] + floatCos(degreesToRadians(j)) * radius * s;
            temp[Z] = lastPoint[Z];

            line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) lastPoint, temp, color, durationMillis, depthEnabled);
            line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) lastPoint, cache[n], color, durationMillis, depthEnabled);

            vecCopy(cache[n], lastPoint);
            vecCopy(lastPoint, temp);
        }
    }
}

void cone(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In apex, ddVec3_In dir, ddVec3_In color,
          const float baseRadius, const float apexRadius, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    static const int stepSize = 20;
    ddVec3 axis[3];
    ddVec3 top, temp0, temp1, temp2;
    ddVec3 p1, p2, lastP1, lastP2;

    vecCopy(axis[2], dir);
    vecNormalize(axis[2], axis[2]);
    vecOrthogonalBasis(axis[0], axis[1], axis[2]);

    axis[1][X] = -axis[1][X];
    axis[1][Y] = -axis[1][Y];
    axis[1][Z] = -axis[1][Z];

    vecAdd(top, apex, dir);
    vecScale(temp1, axis[1], baseRadius);
    vecAdd(lastP2, top, temp1);

    if (apexRadius == 0.0f)
    {
        for (int i = stepSize; i <= 360; i += stepSize)
        {
            vecScale(temp1, axis[0], floatSin(degreesToRadians(i)));
            vecScale(temp2, axis[1], floatCos(degreesToRadians(i)));
            vecAdd(temp0, temp1, temp2);

            vecScale(temp0, temp0, baseRadius);
            vecAdd(p2, top, temp0);

            line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) lastP2, p2, color, durationMillis, depthEnabled);
            line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) p2, apex, color, durationMillis, depthEnabled);

            vecCopy(lastP2, p2);
        }
    }
    else // A degenerate cone with open apex:
    {
        vecScale(temp1, axis[1], apexRadius);
        vecAdd(lastP1, apex, temp1);

        for (int i = stepSize; i <= 360; i += stepSize)
        {
            vecScale(temp1, axis[0], floatSin(degreesToRadians(i)));
            vecScale(temp2, axis[1], floatCos(degreesToRadians(i)));
            vecAdd(temp0, temp1, temp2);

            vecScale(temp1, temp0, apexRadius);
            vecScale(temp2, temp0, baseRadius);

            vecAdd(p1, apex, temp1);
            vecAdd(p2, top,  temp2);

            line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) lastP1, p1, color, durationMillis, depthEnabled);
            line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) lastP2, p2, color, durationMillis, depthEnabled);
            line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) p1, p2, color, durationMillis, depthEnabled);

            vecCopy(lastP1, p1);
            vecCopy(lastP2, p2);
        }
    }
}

void box(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) const ddVec3 points[8], ddVec3_In color,
         const int durationMillis, const bool depthEnabled)
{
    // Build the lines from points using clever indexing tricks:
    // (& 3 is a fancy way of doing % 4, but avoids the expensive modulo operation)
    for (int i = 0; i < 4; ++i)
    {
        line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) points[i], points[(i + 1) & 3], color, durationMillis, depthEnabled);
        line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) points[4 + i], points[4 + ((i + 1) & 3)], color, durationMillis, depthEnabled);
        line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) points[i], points[4 + i], color, durationMillis, depthEnabled);
    }
}

void box(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In center, ddVec3_In color, const float width,
         const float height, const float depth, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    const float cx = center[X];
    const float cy = center[Y];
    const float cz = center[Z];
    const float w  = width  * 0.5f;
    const float h  = height * 0.5f;
    const float d  = depth  * 0.5f;

    // Create all the 8 points:
    ddVec3 points[8];
    #define DD_BOX_V(v, op1, op2, op3) \
    v[X] = cx op1 w; \
    v[Y] = cy op2 h; \
    v[Z] = cz op3 d
    DD_BOX_V(points[0], -, +, +);
    DD_BOX_V(points[1], -, +, -);
    DD_BOX_V(points[2], +, +, -);
    DD_BOX_V(points[3], +, +, +);
    DD_BOX_V(points[4], -, -, +);
    DD_BOX_V(points[5], -, -, -);
    DD_BOX_V(points[6], +, -, -);
    DD_BOX_V(points[7], +, -, +);
    #undef DD_BOX_V

    box(DD_EXPLICIT_CONTEXT_ONLY(ctx,) points, color, durationMillis, depthEnabled);
}

void aabb(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In mins, ddVec3_In maxs,
          ddVec3_In color, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    ddVec3 bb[2];
    ddVec3 points[8];

    vecCopy(bb[0], mins);
    vecCopy(bb[1], maxs);

    // Expand min/max bounds:
    for (int i = 0; i < arrayLength(points); ++i)
    {
        points[i][X] = bb[(i ^ (i >> 1)) & 1][X];
        points[i][Y] = bb[(i >> 1) & 1][Y];
        points[i][Z] = bb[(i >> 2) & 1][Z];
    }

    // Build the lines:
    box(DD_EXPLICIT_CONTEXT_ONLY(ctx,) points, color, durationMillis, depthEnabled);
}

void frustum(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddMat4x4_In invClipMatrix,
             ddVec3_In color, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    // Start with the standard clip volume, then bring it back to world space.
    static const float planes[8][3] = {
        // near plane
        { -1.0f, -1.0f, -1.0f }, {  1.0f, -1.0f, -1.0f },
        {  1.0f,  1.0f, -1.0f }, { -1.0f,  1.0f, -1.0f },
        // far plane
        { -1.0f, -1.0f,  1.0f }, {  1.0f, -1.0f,  1.0f },
        {  1.0f,  1.0f,  1.0f }, { -1.0f,  1.0f,  1.0f }
    };

    ddVec3 points[8];
    float wCoords[8];

    // Transform the planes by the inverse clip matrix:
    for (int i = 0; i < arrayLength(planes); ++i)
    {
        wCoords[i] = matTransformPointXYZW2(points[i], planes[i], invClipMatrix);
    }

    // Divide by the W component of each:
    for (int i = 0; i < arrayLength(planes); ++i)
    {
        // But bail if any W ended up as zero.
        if (floatAbs(wCoords[W]) < FloatEpsilon)
        {
            return;
        }

        points[i][X] /= wCoords[i];
        points[i][Y] /= wCoords[i];
        points[i][Z] /= wCoords[i];
    }

    // Connect the dots:
    box(DD_EXPLICIT_CONTEXT_ONLY(ctx,) points, color, durationMillis, depthEnabled);
}

void vertexNormal(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In origin, ddVec3_In normal,
                  const float length, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    ddVec3 normalVec;
    ddVec3 normalColor;

    vecSet(normalColor, 1.0f, 1.0f, 1.0f);

    normalVec[X] = (normal[X] * length) + origin[X];
    normalVec[Y] = (normal[Y] * length) + origin[Y];
    normalVec[Z] = (normal[Z] * length) + origin[Z];

    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) origin, normalVec, normalColor, durationMillis, depthEnabled);
}

void tangentBasis(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In origin, ddVec3_In normal, ddVec3_In tangent,
                  ddVec3_In bitangent, const float lengths, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    ddVec3 cN, cT, cB;
    ddVec3 vN, vT, vB;

    vecSet(cN, 1.0f, 1.0f, 1.0f); // Vertex normals are WHITE
    vecSet(cT, 1.0f, 1.0f, 0.0f); // Tangents are YELLOW
    vecSet(cB, 1.0f, 0.0f, 1.0f); // Bi-tangents are MAGENTA

    vN[X] = (normal[X] * lengths) + origin[X];
    vN[Y] = (normal[Y] * lengths) + origin[Y];
    vN[Z] = (normal[Z] * lengths) + origin[Z];

    vT[X] = (tangent[X] * lengths) + origin[X];
    vT[Y] = (tangent[Y] * lengths) + origin[Y];
    vT[Z] = (tangent[Z] * lengths) + origin[Z];

    vB[X] = (bitangent[X] * lengths) + origin[X];
    vB[Y] = (bitangent[Y] * lengths) + origin[Y];
    vB[Z] = (bitangent[Z] * lengths) + origin[Z];

    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) origin, vN, cN, durationMillis, depthEnabled);
    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) origin, vT, cT, durationMillis, depthEnabled);
    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) origin, vB, cB, durationMillis, depthEnabled);
}

void xzSquareGrid(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) const float mins, const float maxs, const float y,
                  const float step, ddVec3_In color, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    ddVec3 from, to;
    for (float i = mins; i <= maxs; i += step)
    {
        // Horizontal line (along the X)
        vecSet(from, mins, y, i);
        vecSet(to,   maxs, y, i);
        line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) from, to, color, durationMillis, depthEnabled);

        // Vertical line (along the Z)
        vecSet(from, i, y, mins);
        vecSet(to,   i, y, maxs);
        line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) from, to, color, durationMillis, depthEnabled);
    }
}

// ========================================================
// RenderInterface stubs:
// ========================================================

RenderInterface::~RenderInterface()                                              { }
void RenderInterface::beginDraw()                                                { }
void RenderInterface::endDraw()                                                  { }
void RenderInterface::drawPointList(const DrawVertex *, int, bool)               { }
void RenderInterface::drawLineList(const DrawVertex *, int, bool)                { }
void RenderInterface::drawGlyphList(const DrawVertex *, int, GlyphTextureHandle) { }
void RenderInterface::destroyGlyphTexture(GlyphTextureHandle)                    { }
GlyphTextureHandle RenderInterface::createGlyphTexture(int, int, const void *)   { return nullptr; }

} // namespace dd

#undef DD_CONTEXT
#undef DD_MALLOC
#undef DD_MFREE

// ================ End of implementation =================
#endif // DEBUG_DRAW_IMPLEMENTATION
// ================ End of implementation =================

