module;

#pragma warning(disable: 5202)

typedef unsigned char byte8;

template
<
	typename T1,
	typename T2
>
struct TypeMatch
{
	static constexpr bool value = false;
};

template <typename T>
struct TypeMatch<T, T>
{
	static constexpr bool value = true;
};

#define offsetof(s, m) __builtin_offsetof(s, m)

#define _Prep_Merge(a, b) a##b
#define Prep_Merge(a, b) _Prep_Merge(a, b)

#define _(size) struct { byte8 Prep_Merge(padding_, __LINE__)[size]; }

#define namespaceStart(name) namespace name {
#define namespaceEnd() }

export module D3D10;

import Windows;
import DXGI;

using namespace Windows;
using namespace DXGI;

export namespaceStart(D3D10);

#ifdef _WIN64

#pragma region x86_64

struct ID3D10DeviceChild;
struct ID3D10DepthStencilState;
struct ID3D10BlendState;
struct ID3D10RasterizerState;
struct ID3D10Resource;
struct ID3D10Buffer;
struct ID3D10Texture1D;
struct ID3D10Texture2D;
struct ID3D10Texture3D;
struct ID3D10View;
struct ID3D10ShaderResourceView;
struct ID3D10RenderTargetView;
struct ID3D10DepthStencilView;
struct ID3D10VertexShader;
struct ID3D10GeometryShader;
struct ID3D10PixelShader;
struct ID3D10InputLayout;
struct ID3D10SamplerState;
struct ID3D10Asynchronous;
struct ID3D10Query;
struct ID3D10Predicate;
struct ID3D10Counter;
struct ID3D10Device;
struct ID3D10Multithread;

extern "C" const IID IID_ID3D10DeviceChild;
extern "C" const IID IID_ID3D10DepthStencilState;
extern "C" const IID IID_ID3D10BlendState;
extern "C" const IID IID_ID3D10RasterizerState;
extern "C" const IID IID_ID3D10Resource;
extern "C" const IID IID_ID3D10Buffer;
extern "C" const IID IID_ID3D10Texture1D;
extern "C" const IID IID_ID3D10Texture2D;
extern "C" const IID IID_ID3D10Texture3D;
extern "C" const IID IID_ID3D10View;
extern "C" const IID IID_ID3D10ShaderResourceView;
extern "C" const IID IID_ID3D10RenderTargetView;
extern "C" const IID IID_ID3D10DepthStencilView;
extern "C" const IID IID_ID3D10VertexShader;
extern "C" const IID IID_ID3D10GeometryShader;
extern "C" const IID IID_ID3D10PixelShader;
extern "C" const IID IID_ID3D10InputLayout;
extern "C" const IID IID_ID3D10SamplerState;
extern "C" const IID IID_ID3D10Asynchronous;
extern "C" const IID IID_ID3D10Query;
extern "C" const IID IID_ID3D10Predicate;
extern "C" const IID IID_ID3D10Counter;
extern "C" const IID IID_ID3D10Device;
extern "C" const IID IID_ID3D10Multithread;

// D3D10_RECT

typedef RECT D3D10_RECT;

static_assert(TypeMatch<D3D10_RECT, RECT>::value);

static_assert(sizeof(D3D10_RECT) == 16);

// D3D10_RESOURCE_DIMENSION

enum D3D10_RESOURCE_DIMENSION
{
	D3D10_RESOURCE_DIMENSION_UNKNOWN=0,
	D3D10_RESOURCE_DIMENSION_BUFFER=1,
	D3D10_RESOURCE_DIMENSION_TEXTURE1D=2,
	D3D10_RESOURCE_DIMENSION_TEXTURE2D=3,
	D3D10_RESOURCE_DIMENSION_TEXTURE3D=4,
};

// D3D10_MAP

enum D3D10_MAP
{
	D3D10_MAP_READ=1,
	D3D10_MAP_WRITE=2,
	D3D10_MAP_READ_WRITE=3,
	D3D10_MAP_WRITE_DISCARD=4,
	D3D10_MAP_WRITE_NO_OVERWRITE=5,
};

// D3D10_DEPTH_WRITE_MASK

enum D3D10_DEPTH_WRITE_MASK
{
	D3D10_DEPTH_WRITE_MASK_ZERO=0,
	D3D10_DEPTH_WRITE_MASK_ALL=1,
};

// D3D10_COMPARISON_FUNC

enum D3D10_COMPARISON_FUNC
{
	D3D10_COMPARISON_NEVER=1,
	D3D10_COMPARISON_LESS=2,
	D3D10_COMPARISON_EQUAL=3,
	D3D10_COMPARISON_LESS_EQUAL=4,
	D3D10_COMPARISON_GREATER=5,
	D3D10_COMPARISON_NOT_EQUAL=6,
	D3D10_COMPARISON_GREATER_EQUAL=7,
	D3D10_COMPARISON_ALWAYS=8,
};

// D3D10_STENCIL_OP

enum D3D10_STENCIL_OP
{
	D3D10_STENCIL_OP_KEEP=1,
	D3D10_STENCIL_OP_ZERO=2,
	D3D10_STENCIL_OP_REPLACE=3,
	D3D10_STENCIL_OP_INCR_SAT=4,
	D3D10_STENCIL_OP_DECR_SAT=5,
	D3D10_STENCIL_OP_INVERT=6,
	D3D10_STENCIL_OP_INCR=7,
	D3D10_STENCIL_OP_DECR=8,
};

// D3D10_BLEND

enum D3D10_BLEND
{
	D3D10_BLEND_ZERO=1,
	D3D10_BLEND_ONE=2,
	D3D10_BLEND_SRC_COLOR=3,
	D3D10_BLEND_INV_SRC_COLOR=4,
	D3D10_BLEND_SRC_ALPHA=5,
	D3D10_BLEND_INV_SRC_ALPHA=6,
	D3D10_BLEND_DEST_ALPHA=7,
	D3D10_BLEND_INV_DEST_ALPHA=8,
	D3D10_BLEND_DEST_COLOR=9,
	D3D10_BLEND_INV_DEST_COLOR=10,
	D3D10_BLEND_SRC_ALPHA_SAT=11,
	D3D10_BLEND_BLEND_FACTOR=14,
	D3D10_BLEND_INV_BLEND_FACTOR=15,
	D3D10_BLEND_SRC1_COLOR=16,
	D3D10_BLEND_INV_SRC1_COLOR=17,
	D3D10_BLEND_SRC1_ALPHA=18,
	D3D10_BLEND_INV_SRC1_ALPHA=19,
};

// D3D10_BLEND_OP

enum D3D10_BLEND_OP
{
	D3D10_BLEND_OP_ADD=1,
	D3D10_BLEND_OP_SUBTRACT=2,
	D3D10_BLEND_OP_REV_SUBTRACT=3,
	D3D10_BLEND_OP_MIN=4,
	D3D10_BLEND_OP_MAX=5,
};

// D3D10_FILL_MODE

enum D3D10_FILL_MODE
{
	D3D10_FILL_WIREFRAME=2,
	D3D10_FILL_SOLID=3,
};

// D3D10_CULL_MODE

enum D3D10_CULL_MODE
{
	D3D10_CULL_NONE=1,
	D3D10_CULL_FRONT=2,
	D3D10_CULL_BACK=3,
};

// D3D10_USAGE

enum D3D10_USAGE
{
	D3D10_USAGE_DEFAULT=0,
	D3D10_USAGE_IMMUTABLE=1,
	D3D10_USAGE_DYNAMIC=2,
	D3D10_USAGE_STAGING=3,
};

// D3D_SRV_DIMENSION

enum D3D_SRV_DIMENSION
{
	D3D_SRV_DIMENSION_UNKNOWN=0,
	D3D_SRV_DIMENSION_BUFFER=1,
	D3D_SRV_DIMENSION_TEXTURE1D=2,
	D3D_SRV_DIMENSION_TEXTURE1DARRAY=3,
	D3D_SRV_DIMENSION_TEXTURE2D=4,
	D3D_SRV_DIMENSION_TEXTURE2DARRAY=5,
	D3D_SRV_DIMENSION_TEXTURE2DMS=6,
	D3D_SRV_DIMENSION_TEXTURE2DMSARRAY=7,
	D3D_SRV_DIMENSION_TEXTURE3D=8,
	D3D_SRV_DIMENSION_TEXTURECUBE=9,
	D3D_SRV_DIMENSION_TEXTURECUBEARRAY=10,
	D3D_SRV_DIMENSION_BUFFEREX=11,
};

// D3D10_SRV_DIMENSION

enum D3D10_SRV_DIMENSION
{
	D3D10_SRV_DIMENSION_UNKNOWN=D3D_SRV_DIMENSION_UNKNOWN,
	D3D10_SRV_DIMENSION_BUFFER=D3D_SRV_DIMENSION_BUFFER,
	D3D10_SRV_DIMENSION_TEXTURE1D=D3D_SRV_DIMENSION_TEXTURE1D,
	D3D10_SRV_DIMENSION_TEXTURE1DARRAY=D3D_SRV_DIMENSION_TEXTURE1DARRAY,
	D3D10_SRV_DIMENSION_TEXTURE2D=D3D_SRV_DIMENSION_TEXTURE2D,
	D3D10_SRV_DIMENSION_TEXTURE2DARRAY=D3D_SRV_DIMENSION_TEXTURE2DARRAY,
	D3D10_SRV_DIMENSION_TEXTURE2DMS=D3D_SRV_DIMENSION_TEXTURE2DMS,
	D3D10_SRV_DIMENSION_TEXTURE2DMSARRAY=D3D_SRV_DIMENSION_TEXTURE2DMSARRAY,
	D3D10_SRV_DIMENSION_TEXTURE3D=D3D_SRV_DIMENSION_TEXTURE3D,
	D3D10_SRV_DIMENSION_TEXTURECUBE=D3D_SRV_DIMENSION_TEXTURECUBE,
};

// D3D10_1_SRV_DIMENSION

enum D3D10_1_SRV_DIMENSION
{
	D3D10_1_SRV_DIMENSION_UNKNOWN=D3D_SRV_DIMENSION_UNKNOWN,
	D3D10_1_SRV_DIMENSION_BUFFER=D3D_SRV_DIMENSION_BUFFER,
	D3D10_1_SRV_DIMENSION_TEXTURE1D=D3D_SRV_DIMENSION_TEXTURE1D,
	D3D10_1_SRV_DIMENSION_TEXTURE1DARRAY=D3D_SRV_DIMENSION_TEXTURE1DARRAY,
	D3D10_1_SRV_DIMENSION_TEXTURE2D=D3D_SRV_DIMENSION_TEXTURE2D,
	D3D10_1_SRV_DIMENSION_TEXTURE2DARRAY=D3D_SRV_DIMENSION_TEXTURE2DARRAY,
	D3D10_1_SRV_DIMENSION_TEXTURE2DMS=D3D_SRV_DIMENSION_TEXTURE2DMS,
	D3D10_1_SRV_DIMENSION_TEXTURE2DMSARRAY=D3D_SRV_DIMENSION_TEXTURE2DMSARRAY,
	D3D10_1_SRV_DIMENSION_TEXTURE3D=D3D_SRV_DIMENSION_TEXTURE3D,
	D3D10_1_SRV_DIMENSION_TEXTURECUBE=D3D_SRV_DIMENSION_TEXTURECUBE,
	D3D10_1_SRV_DIMENSION_TEXTURECUBEARRAY=D3D_SRV_DIMENSION_TEXTURECUBEARRAY,
};

// D3D11_SRV_DIMENSION

enum D3D11_SRV_DIMENSION
{
	D3D11_SRV_DIMENSION_UNKNOWN=D3D_SRV_DIMENSION_UNKNOWN,
	D3D11_SRV_DIMENSION_BUFFER=D3D_SRV_DIMENSION_BUFFER,
	D3D11_SRV_DIMENSION_TEXTURE1D=D3D_SRV_DIMENSION_TEXTURE1D,
	D3D11_SRV_DIMENSION_TEXTURE1DARRAY=D3D_SRV_DIMENSION_TEXTURE1DARRAY,
	D3D11_SRV_DIMENSION_TEXTURE2D=D3D_SRV_DIMENSION_TEXTURE2D,
	D3D11_SRV_DIMENSION_TEXTURE2DARRAY=D3D_SRV_DIMENSION_TEXTURE2DARRAY,
	D3D11_SRV_DIMENSION_TEXTURE2DMS=D3D_SRV_DIMENSION_TEXTURE2DMS,
	D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY=D3D_SRV_DIMENSION_TEXTURE2DMSARRAY,
	D3D11_SRV_DIMENSION_TEXTURE3D=D3D_SRV_DIMENSION_TEXTURE3D,
	D3D11_SRV_DIMENSION_TEXTURECUBE=D3D_SRV_DIMENSION_TEXTURECUBE,
	D3D11_SRV_DIMENSION_TEXTURECUBEARRAY=D3D_SRV_DIMENSION_TEXTURECUBEARRAY,
	D3D11_SRV_DIMENSION_BUFFEREX=D3D_SRV_DIMENSION_BUFFEREX,
};

// D3D10_RTV_DIMENSION

enum D3D10_RTV_DIMENSION
{
	D3D10_RTV_DIMENSION_UNKNOWN=0,
	D3D10_RTV_DIMENSION_BUFFER=1,
	D3D10_RTV_DIMENSION_TEXTURE1D=2,
	D3D10_RTV_DIMENSION_TEXTURE1DARRAY=3,
	D3D10_RTV_DIMENSION_TEXTURE2D=4,
	D3D10_RTV_DIMENSION_TEXTURE2DARRAY=5,
	D3D10_RTV_DIMENSION_TEXTURE2DMS=6,
	D3D10_RTV_DIMENSION_TEXTURE2DMSARRAY=7,
	D3D10_RTV_DIMENSION_TEXTURE3D=8,
};

// D3D_PRIMITIVE_TOPOLOGY

enum D3D_PRIMITIVE_TOPOLOGY
{
	D3D_PRIMITIVE_TOPOLOGY_UNDEFINED=0,
	D3D_PRIMITIVE_TOPOLOGY_POINTLIST=1,
	D3D_PRIMITIVE_TOPOLOGY_LINELIST=2,
	D3D_PRIMITIVE_TOPOLOGY_LINESTRIP=3,
	D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST=4,
	D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP=5,
	D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ=10,
	D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ=11,
	D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ=12,
	D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ=13,
	D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST=33,
	D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST=34,
	D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST=35,
	D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST=36,
	D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST=37,
	D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST=38,
	D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST=39,
	D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST=40,
	D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST=41,
	D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST=42,
	D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST=43,
	D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST=44,
	D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST=45,
	D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST=46,
	D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST=47,
	D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST=48,
	D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST=49,
	D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST=50,
	D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST=51,
	D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST=52,
	D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST=53,
	D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST=54,
	D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST=55,
	D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST=56,
	D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST=57,
	D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST=58,
	D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST=59,
	D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST=60,
	D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST=61,
	D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST=62,
	D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST=63,
	D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST=64,
};

// D3D10_PRIMITIVE_TOPOLOGY

enum D3D10_PRIMITIVE_TOPOLOGY
{
	D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED=D3D_PRIMITIVE_TOPOLOGY_UNDEFINED,
	D3D10_PRIMITIVE_TOPOLOGY_POINTLIST=D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
	D3D10_PRIMITIVE_TOPOLOGY_LINELIST=D3D_PRIMITIVE_TOPOLOGY_LINELIST,
	D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP=D3D_PRIMITIVE_TOPOLOGY_LINESTRIP,
	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST=D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP=D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
	D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ=D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
	D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ=D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ=D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ=D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
};

// D3D11_PRIMITIVE_TOPOLOGY

enum D3D11_PRIMITIVE_TOPOLOGY
{
	D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED=D3D_PRIMITIVE_TOPOLOGY_UNDEFINED,
	D3D11_PRIMITIVE_TOPOLOGY_POINTLIST=D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
	D3D11_PRIMITIVE_TOPOLOGY_LINELIST=D3D_PRIMITIVE_TOPOLOGY_LINELIST,
	D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP=D3D_PRIMITIVE_TOPOLOGY_LINESTRIP,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST=D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP=D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
	D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ=D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
	D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ=D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ=D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ=D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
	D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST,
};

// D3D10_DSV_DIMENSION

enum D3D10_DSV_DIMENSION
{
	D3D10_DSV_DIMENSION_UNKNOWN=0,
	D3D10_DSV_DIMENSION_TEXTURE1D=1,
	D3D10_DSV_DIMENSION_TEXTURE1DARRAY=2,
	D3D10_DSV_DIMENSION_TEXTURE2D=3,
	D3D10_DSV_DIMENSION_TEXTURE2DARRAY=4,
	D3D10_DSV_DIMENSION_TEXTURE2DMS=5,
	D3D10_DSV_DIMENSION_TEXTURE2DMSARRAY=6,
};

// D3D10_FILTER

enum D3D10_FILTER
{
	D3D10_FILTER_MIN_MAG_MIP_POINT=0,
	D3D10_FILTER_MIN_MAG_POINT_MIP_LINEAR=0x1,
	D3D10_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT=0x4,
	D3D10_FILTER_MIN_POINT_MAG_MIP_LINEAR=0x5,
	D3D10_FILTER_MIN_LINEAR_MAG_MIP_POINT=0x10,
	D3D10_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR=0x11,
	D3D10_FILTER_MIN_MAG_LINEAR_MIP_POINT=0x14,
	D3D10_FILTER_MIN_MAG_MIP_LINEAR=0x15,
	D3D10_FILTER_ANISOTROPIC=0x55,
	D3D10_FILTER_COMPARISON_MIN_MAG_MIP_POINT=0x80,
	D3D10_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR=0x81,
	D3D10_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT=0x84,
	D3D10_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR=0x85,
	D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT=0x90,
	D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR=0x91,
	D3D10_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT=0x94,
	D3D10_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR=0x95,
	D3D10_FILTER_COMPARISON_ANISOTROPIC=0xd5,
	D3D10_FILTER_TEXT_1BIT=0x80000000,
};

// D3D10_TEXTURE_ADDRESS_MODE

enum D3D10_TEXTURE_ADDRESS_MODE
{
	D3D10_TEXTURE_ADDRESS_WRAP=1,
	D3D10_TEXTURE_ADDRESS_MIRROR=2,
	D3D10_TEXTURE_ADDRESS_CLAMP=3,
	D3D10_TEXTURE_ADDRESS_BORDER=4,
	D3D10_TEXTURE_ADDRESS_MIRROR_ONCE=5,
};

// D3D10_COUNTER

enum D3D10_COUNTER
{
	D3D10_COUNTER_GPU_IDLE=0,
	D3D10_COUNTER_VERTEX_PROCESSING=(D3D10_COUNTER_GPU_IDLE+1),
	D3D10_COUNTER_GEOMETRY_PROCESSING=(D3D10_COUNTER_VERTEX_PROCESSING+1),
	D3D10_COUNTER_PIXEL_PROCESSING=(D3D10_COUNTER_GEOMETRY_PROCESSING+1),
	D3D10_COUNTER_OTHER_GPU_PROCESSING=(D3D10_COUNTER_PIXEL_PROCESSING+1),
	D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION=(D3D10_COUNTER_OTHER_GPU_PROCESSING+1),
	D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION=(D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION+1),
	D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION=(D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION+1),
	D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION=(D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION+1),
	D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION=(D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION+1),
	D3D10_COUNTER_VS_MEMORY_LIMITED=(D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION+1),
	D3D10_COUNTER_VS_COMPUTATION_LIMITED=(D3D10_COUNTER_VS_MEMORY_LIMITED+1),
	D3D10_COUNTER_GS_MEMORY_LIMITED=(D3D10_COUNTER_VS_COMPUTATION_LIMITED+1),
	D3D10_COUNTER_GS_COMPUTATION_LIMITED=(D3D10_COUNTER_GS_MEMORY_LIMITED+1),
	D3D10_COUNTER_PS_MEMORY_LIMITED=(D3D10_COUNTER_GS_COMPUTATION_LIMITED+1),
	D3D10_COUNTER_PS_COMPUTATION_LIMITED=(D3D10_COUNTER_PS_MEMORY_LIMITED+1),
	D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE=(D3D10_COUNTER_PS_COMPUTATION_LIMITED+1),
	D3D10_COUNTER_TEXTURE_CACHE_HIT_RATE=(D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE+1),
	D3D10_COUNTER_DEVICE_DEPENDENT_0=0x40000000,
};

// D3D10_QUERY

enum D3D10_QUERY
{
	D3D10_QUERY_EVENT=0,
	D3D10_QUERY_OCCLUSION=(D3D10_QUERY_EVENT+1),
	D3D10_QUERY_TIMESTAMP=(D3D10_QUERY_OCCLUSION+1),
	D3D10_QUERY_TIMESTAMP_DISJOINT=(D3D10_QUERY_TIMESTAMP+1),
	D3D10_QUERY_PIPELINE_STATISTICS=(D3D10_QUERY_TIMESTAMP_DISJOINT+1),
	D3D10_QUERY_OCCLUSION_PREDICATE=(D3D10_QUERY_PIPELINE_STATISTICS+1),
	D3D10_QUERY_SO_STATISTICS=(D3D10_QUERY_OCCLUSION_PREDICATE+1),
	D3D10_QUERY_SO_OVERFLOW_PREDICATE=(D3D10_QUERY_SO_STATISTICS+1),
};

// D3D10_COUNTER_TYPE

enum D3D10_COUNTER_TYPE
{
	D3D10_COUNTER_TYPE_FLOAT32=0,
	D3D10_COUNTER_TYPE_UINT16=(D3D10_COUNTER_TYPE_FLOAT32+1),
	D3D10_COUNTER_TYPE_UINT32=(D3D10_COUNTER_TYPE_UINT16+1),
	D3D10_COUNTER_TYPE_UINT64=(D3D10_COUNTER_TYPE_UINT32+1),
};

// D3D10_INPUT_CLASSIFICATION

enum D3D10_INPUT_CLASSIFICATION
{
	D3D10_INPUT_PER_VERTEX_DATA=0,
	D3D10_INPUT_PER_INSTANCE_DATA=1,
};

// D3D10_BIND_FLAG

enum D3D10_BIND_FLAG
{
	D3D10_BIND_VERTEX_BUFFER=0x1L,
	D3D10_BIND_INDEX_BUFFER=0x2L,
	D3D10_BIND_CONSTANT_BUFFER=0x4L,
	D3D10_BIND_SHADER_RESOURCE=0x8L,
	D3D10_BIND_STREAM_OUTPUT=0x10L,
	D3D10_BIND_RENDER_TARGET=0x20L,
	D3D10_BIND_DEPTH_STENCIL=0x40L,
};

// D3D10_CPU_ACCESS_FLAG

enum D3D10_CPU_ACCESS_FLAG
{
	D3D10_CPU_ACCESS_WRITE=0x10000L,
	D3D10_CPU_ACCESS_READ=0x20000L,
};

enum
{
	D3D10_VIEWPORT_AND_SCISSORRECT_MAX_INDEX=15,
	D3D10_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE=16,
};

// D3D_INCLUDE_TYPE

enum D3D_INCLUDE_TYPE
{
	D3D_INCLUDE_LOCAL=0,
	D3D_INCLUDE_SYSTEM=(D3D_INCLUDE_LOCAL+1),
	D3D10_INCLUDE_LOCAL=D3D_INCLUDE_LOCAL,
	D3D10_INCLUDE_SYSTEM=D3D_INCLUDE_SYSTEM,
	D3D_INCLUDE_FORCE_DWORD=0x7fffffff,
};

// D3D10_COLOR_WRITE_ENABLE

enum D3D10_COLOR_WRITE_ENABLE
{
	D3D10_COLOR_WRITE_ENABLE_RED=1,
	D3D10_COLOR_WRITE_ENABLE_GREEN=2,
	D3D10_COLOR_WRITE_ENABLE_BLUE=4,
	D3D10_COLOR_WRITE_ENABLE_ALPHA=8,
	D3D10_COLOR_WRITE_ENABLE_ALL=(((D3D10_COLOR_WRITE_ENABLE_RED|D3D10_COLOR_WRITE_ENABLE_GREEN)|D3D10_COLOR_WRITE_ENABLE_BLUE)|D3D10_COLOR_WRITE_ENABLE_ALPHA),
};

// D3D10_DRIVER_TYPE

enum D3D10_DRIVER_TYPE
{
	D3D10_DRIVER_TYPE_HARDWARE=0,
	D3D10_DRIVER_TYPE_REFERENCE=1,
	D3D10_DRIVER_TYPE_NULL=2,
	D3D10_DRIVER_TYPE_SOFTWARE=3,
	D3D10_DRIVER_TYPE_WARP=5,
};

#pragma pack(push, 1)

// D3D10_DEPTH_STENCILOP_DESC

struct D3D10_DEPTH_STENCILOP_DESC
{
	D3D10_STENCIL_OP StencilFailOp; // 0
	D3D10_STENCIL_OP StencilDepthFailOp; // 4
	D3D10_STENCIL_OP StencilPassOp; // 8
	D3D10_COMPARISON_FUNC StencilFunc; // 0xC
};

static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCILOP_DESC::StencilFailOp), D3D10_STENCIL_OP>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCILOP_DESC::StencilDepthFailOp), D3D10_STENCIL_OP>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCILOP_DESC::StencilPassOp), D3D10_STENCIL_OP>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCILOP_DESC::StencilFunc), D3D10_COMPARISON_FUNC>::value);

static_assert(offsetof(D3D10_DEPTH_STENCILOP_DESC, StencilFailOp) == 0);
static_assert(offsetof(D3D10_DEPTH_STENCILOP_DESC, StencilDepthFailOp) == 4);
static_assert(offsetof(D3D10_DEPTH_STENCILOP_DESC, StencilPassOp) == 8);
static_assert(offsetof(D3D10_DEPTH_STENCILOP_DESC, StencilFunc) == 0xC);

static_assert(sizeof(D3D10_DEPTH_STENCILOP_DESC) == 16);

// D3D10_DEPTH_STENCIL_DESC

struct D3D10_DEPTH_STENCIL_DESC
{
	BOOL DepthEnable; // 0
	D3D10_DEPTH_WRITE_MASK DepthWriteMask; // 4
	D3D10_COMPARISON_FUNC DepthFunc; // 8
	BOOL StencilEnable; // 0xC
	UINT8 StencilReadMask; // 0x10
	UINT8 StencilWriteMask; // 0x11
	_(2);
	D3D10_DEPTH_STENCILOP_DESC FrontFace; // 0x14
	D3D10_DEPTH_STENCILOP_DESC BackFace; // 0x24
};

static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_DESC::DepthEnable), BOOL>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_DESC::DepthWriteMask), D3D10_DEPTH_WRITE_MASK>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_DESC::DepthFunc), D3D10_COMPARISON_FUNC>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_DESC::StencilEnable), BOOL>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_DESC::StencilReadMask), UINT8>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_DESC::StencilWriteMask), UINT8>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_DESC::FrontFace), D3D10_DEPTH_STENCILOP_DESC>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_DESC::BackFace), D3D10_DEPTH_STENCILOP_DESC>::value);

static_assert(offsetof(D3D10_DEPTH_STENCIL_DESC, DepthEnable) == 0);
static_assert(offsetof(D3D10_DEPTH_STENCIL_DESC, DepthWriteMask) == 4);
static_assert(offsetof(D3D10_DEPTH_STENCIL_DESC, DepthFunc) == 8);
static_assert(offsetof(D3D10_DEPTH_STENCIL_DESC, StencilEnable) == 0xC);
static_assert(offsetof(D3D10_DEPTH_STENCIL_DESC, StencilReadMask) == 0x10);
static_assert(offsetof(D3D10_DEPTH_STENCIL_DESC, StencilWriteMask) == 0x11);
static_assert(offsetof(D3D10_DEPTH_STENCIL_DESC, FrontFace) == 0x14);
static_assert(offsetof(D3D10_DEPTH_STENCIL_DESC, BackFace) == 0x24);

static_assert(sizeof(D3D10_DEPTH_STENCIL_DESC) == 52);

// D3D10_BLEND_DESC

struct D3D10_BLEND_DESC
{
	BOOL AlphaToCoverageEnable; // 0
	BOOL BlendEnable[8]; // 4
	D3D10_BLEND SrcBlend; // 0x24
	D3D10_BLEND DestBlend; // 0x28
	D3D10_BLEND_OP BlendOp; // 0x2C
	D3D10_BLEND SrcBlendAlpha; // 0x30
	D3D10_BLEND DestBlendAlpha; // 0x34
	D3D10_BLEND_OP BlendOpAlpha; // 0x38
	UINT8 RenderTargetWriteMask[8]; // 0x3C
};

static_assert(TypeMatch<decltype(D3D10_BLEND_DESC::AlphaToCoverageEnable), BOOL>::value);
static_assert(TypeMatch<decltype(D3D10_BLEND_DESC::BlendEnable), BOOL[8]>::value);
static_assert(TypeMatch<decltype(D3D10_BLEND_DESC::SrcBlend), D3D10_BLEND>::value);
static_assert(TypeMatch<decltype(D3D10_BLEND_DESC::DestBlend), D3D10_BLEND>::value);
static_assert(TypeMatch<decltype(D3D10_BLEND_DESC::BlendOp), D3D10_BLEND_OP>::value);
static_assert(TypeMatch<decltype(D3D10_BLEND_DESC::SrcBlendAlpha), D3D10_BLEND>::value);
static_assert(TypeMatch<decltype(D3D10_BLEND_DESC::DestBlendAlpha), D3D10_BLEND>::value);
static_assert(TypeMatch<decltype(D3D10_BLEND_DESC::BlendOpAlpha), D3D10_BLEND_OP>::value);
static_assert(TypeMatch<decltype(D3D10_BLEND_DESC::RenderTargetWriteMask), UINT8[8]>::value);

static_assert(offsetof(D3D10_BLEND_DESC, AlphaToCoverageEnable) == 0);
static_assert(offsetof(D3D10_BLEND_DESC, BlendEnable) == 4);
static_assert(offsetof(D3D10_BLEND_DESC, SrcBlend) == 0x24);
static_assert(offsetof(D3D10_BLEND_DESC, DestBlend) == 0x28);
static_assert(offsetof(D3D10_BLEND_DESC, BlendOp) == 0x2C);
static_assert(offsetof(D3D10_BLEND_DESC, SrcBlendAlpha) == 0x30);
static_assert(offsetof(D3D10_BLEND_DESC, DestBlendAlpha) == 0x34);
static_assert(offsetof(D3D10_BLEND_DESC, BlendOpAlpha) == 0x38);
static_assert(offsetof(D3D10_BLEND_DESC, RenderTargetWriteMask) == 0x3C);

static_assert(sizeof(D3D10_BLEND_DESC) == 68);

// D3D10_RASTERIZER_DESC

struct D3D10_RASTERIZER_DESC
{
	D3D10_FILL_MODE FillMode; // 0
	D3D10_CULL_MODE CullMode; // 4
	BOOL FrontCounterClockwise; // 8
	INT DepthBias; // 0xC
	FLOAT DepthBiasClamp; // 0x10
	FLOAT SlopeScaledDepthBias; // 0x14
	BOOL DepthClipEnable; // 0x18
	BOOL ScissorEnable; // 0x1C
	BOOL MultisampleEnable; // 0x20
	BOOL AntialiasedLineEnable; // 0x24
};

static_assert(TypeMatch<decltype(D3D10_RASTERIZER_DESC::FillMode), D3D10_FILL_MODE>::value);
static_assert(TypeMatch<decltype(D3D10_RASTERIZER_DESC::CullMode), D3D10_CULL_MODE>::value);
static_assert(TypeMatch<decltype(D3D10_RASTERIZER_DESC::FrontCounterClockwise), BOOL>::value);
static_assert(TypeMatch<decltype(D3D10_RASTERIZER_DESC::DepthBias), INT>::value);
static_assert(TypeMatch<decltype(D3D10_RASTERIZER_DESC::DepthBiasClamp), FLOAT>::value);
static_assert(TypeMatch<decltype(D3D10_RASTERIZER_DESC::SlopeScaledDepthBias), FLOAT>::value);
static_assert(TypeMatch<decltype(D3D10_RASTERIZER_DESC::DepthClipEnable), BOOL>::value);
static_assert(TypeMatch<decltype(D3D10_RASTERIZER_DESC::ScissorEnable), BOOL>::value);
static_assert(TypeMatch<decltype(D3D10_RASTERIZER_DESC::MultisampleEnable), BOOL>::value);
static_assert(TypeMatch<decltype(D3D10_RASTERIZER_DESC::AntialiasedLineEnable), BOOL>::value);

static_assert(offsetof(D3D10_RASTERIZER_DESC, FillMode) == 0);
static_assert(offsetof(D3D10_RASTERIZER_DESC, CullMode) == 4);
static_assert(offsetof(D3D10_RASTERIZER_DESC, FrontCounterClockwise) == 8);
static_assert(offsetof(D3D10_RASTERIZER_DESC, DepthBias) == 0xC);
static_assert(offsetof(D3D10_RASTERIZER_DESC, DepthBiasClamp) == 0x10);
static_assert(offsetof(D3D10_RASTERIZER_DESC, SlopeScaledDepthBias) == 0x14);
static_assert(offsetof(D3D10_RASTERIZER_DESC, DepthClipEnable) == 0x18);
static_assert(offsetof(D3D10_RASTERIZER_DESC, ScissorEnable) == 0x1C);
static_assert(offsetof(D3D10_RASTERIZER_DESC, MultisampleEnable) == 0x20);
static_assert(offsetof(D3D10_RASTERIZER_DESC, AntialiasedLineEnable) == 0x24);

static_assert(sizeof(D3D10_RASTERIZER_DESC) == 40);

// D3D10_BUFFER_DESC

struct D3D10_BUFFER_DESC
{
	UINT ByteWidth; // 0
	D3D10_USAGE Usage; // 4
	UINT BindFlags; // 8
	UINT CPUAccessFlags; // 0xC
	UINT MiscFlags; // 0x10
};

static_assert(TypeMatch<decltype(D3D10_BUFFER_DESC::ByteWidth), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BUFFER_DESC::Usage), D3D10_USAGE>::value);
static_assert(TypeMatch<decltype(D3D10_BUFFER_DESC::BindFlags), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BUFFER_DESC::CPUAccessFlags), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BUFFER_DESC::MiscFlags), UINT>::value);

static_assert(offsetof(D3D10_BUFFER_DESC, ByteWidth) == 0);
static_assert(offsetof(D3D10_BUFFER_DESC, Usage) == 4);
static_assert(offsetof(D3D10_BUFFER_DESC, BindFlags) == 8);
static_assert(offsetof(D3D10_BUFFER_DESC, CPUAccessFlags) == 0xC);
static_assert(offsetof(D3D10_BUFFER_DESC, MiscFlags) == 0x10);

static_assert(sizeof(D3D10_BUFFER_DESC) == 20);

// D3D10_TEXTURE1D_DESC

struct D3D10_TEXTURE1D_DESC
{
	UINT Width; // 0
	UINT MipLevels; // 4
	UINT ArraySize; // 8
	DXGI_FORMAT Format; // 0xC
	D3D10_USAGE Usage; // 0x10
	UINT BindFlags; // 0x14
	UINT CPUAccessFlags; // 0x18
	UINT MiscFlags; // 0x1C
};

static_assert(TypeMatch<decltype(D3D10_TEXTURE1D_DESC::Width), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE1D_DESC::MipLevels), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE1D_DESC::ArraySize), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE1D_DESC::Format), DXGI_FORMAT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE1D_DESC::Usage), D3D10_USAGE>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE1D_DESC::BindFlags), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE1D_DESC::CPUAccessFlags), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE1D_DESC::MiscFlags), UINT>::value);

static_assert(offsetof(D3D10_TEXTURE1D_DESC, Width) == 0);
static_assert(offsetof(D3D10_TEXTURE1D_DESC, MipLevels) == 4);
static_assert(offsetof(D3D10_TEXTURE1D_DESC, ArraySize) == 8);
static_assert(offsetof(D3D10_TEXTURE1D_DESC, Format) == 0xC);
static_assert(offsetof(D3D10_TEXTURE1D_DESC, Usage) == 0x10);
static_assert(offsetof(D3D10_TEXTURE1D_DESC, BindFlags) == 0x14);
static_assert(offsetof(D3D10_TEXTURE1D_DESC, CPUAccessFlags) == 0x18);
static_assert(offsetof(D3D10_TEXTURE1D_DESC, MiscFlags) == 0x1C);

static_assert(sizeof(D3D10_TEXTURE1D_DESC) == 32);

// D3D10_MAPPED_TEXTURE2D

struct D3D10_MAPPED_TEXTURE2D
{
	void* pData; // 0
	UINT RowPitch; // 8
	_(4);
};

static_assert(TypeMatch<decltype(D3D10_MAPPED_TEXTURE2D::pData), void*>::value);
static_assert(TypeMatch<decltype(D3D10_MAPPED_TEXTURE2D::RowPitch), UINT>::value);

static_assert(offsetof(D3D10_MAPPED_TEXTURE2D, pData) == 0);
static_assert(offsetof(D3D10_MAPPED_TEXTURE2D, RowPitch) == 8);

static_assert(sizeof(D3D10_MAPPED_TEXTURE2D) == 16);

// D3D10_TEXTURE2D_DESC

struct D3D10_TEXTURE2D_DESC
{
	UINT Width; // 0
	UINT Height; // 4
	UINT MipLevels; // 8
	UINT ArraySize; // 0xC
	DXGI_FORMAT Format; // 0x10
	DXGI_SAMPLE_DESC SampleDesc; // 0x14
	D3D10_USAGE Usage; // 0x1C
	UINT BindFlags; // 0x20
	UINT CPUAccessFlags; // 0x24
	UINT MiscFlags; // 0x28
};

static_assert(TypeMatch<decltype(D3D10_TEXTURE2D_DESC::Width), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE2D_DESC::Height), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE2D_DESC::MipLevels), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE2D_DESC::ArraySize), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE2D_DESC::Format), DXGI_FORMAT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE2D_DESC::SampleDesc), DXGI_SAMPLE_DESC>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE2D_DESC::Usage), D3D10_USAGE>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE2D_DESC::BindFlags), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE2D_DESC::CPUAccessFlags), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE2D_DESC::MiscFlags), UINT>::value);

static_assert(offsetof(D3D10_TEXTURE2D_DESC, Width) == 0);
static_assert(offsetof(D3D10_TEXTURE2D_DESC, Height) == 4);
static_assert(offsetof(D3D10_TEXTURE2D_DESC, MipLevels) == 8);
static_assert(offsetof(D3D10_TEXTURE2D_DESC, ArraySize) == 0xC);
static_assert(offsetof(D3D10_TEXTURE2D_DESC, Format) == 0x10);
static_assert(offsetof(D3D10_TEXTURE2D_DESC, SampleDesc) == 0x14);
static_assert(offsetof(D3D10_TEXTURE2D_DESC, Usage) == 0x1C);
static_assert(offsetof(D3D10_TEXTURE2D_DESC, BindFlags) == 0x20);
static_assert(offsetof(D3D10_TEXTURE2D_DESC, CPUAccessFlags) == 0x24);
static_assert(offsetof(D3D10_TEXTURE2D_DESC, MiscFlags) == 0x28);

static_assert(sizeof(D3D10_TEXTURE2D_DESC) == 44);

// D3D10_MAPPED_TEXTURE3D

struct D3D10_MAPPED_TEXTURE3D
{
	void* pData; // 0
	UINT RowPitch; // 8
	UINT DepthPitch; // 0xC
};

static_assert(TypeMatch<decltype(D3D10_MAPPED_TEXTURE3D::pData), void*>::value);
static_assert(TypeMatch<decltype(D3D10_MAPPED_TEXTURE3D::RowPitch), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_MAPPED_TEXTURE3D::DepthPitch), UINT>::value);

static_assert(offsetof(D3D10_MAPPED_TEXTURE3D, pData) == 0);
static_assert(offsetof(D3D10_MAPPED_TEXTURE3D, RowPitch) == 8);
static_assert(offsetof(D3D10_MAPPED_TEXTURE3D, DepthPitch) == 0xC);

static_assert(sizeof(D3D10_MAPPED_TEXTURE3D) == 16);

// D3D10_BUFFER_SRV

struct D3D10_BUFFER_SRV
{
	union
	{
		UINT FirstElement; // 0
		UINT ElementOffset; // 0
	}; // 0
	union
	{
		UINT NumElements; // 4
		UINT ElementWidth; // 4
	}; // 4
};

static_assert(TypeMatch<decltype(D3D10_BUFFER_SRV::FirstElement), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BUFFER_SRV::ElementOffset), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BUFFER_SRV::NumElements), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BUFFER_SRV::ElementWidth), UINT>::value);

static_assert(offsetof(D3D10_BUFFER_SRV, FirstElement) == 0);
static_assert(offsetof(D3D10_BUFFER_SRV, ElementOffset) == 0);
static_assert(offsetof(D3D10_BUFFER_SRV, NumElements) == 4);
static_assert(offsetof(D3D10_BUFFER_SRV, ElementWidth) == 4);

static_assert(sizeof(D3D10_BUFFER_SRV) == 8);

// D3D10_TEX1D_SRV

struct D3D10_TEX1D_SRV
{
	UINT MostDetailedMip; // 0
	UINT MipLevels; // 4
};

static_assert(TypeMatch<decltype(D3D10_TEX1D_SRV::MostDetailedMip), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX1D_SRV::MipLevels), UINT>::value);

static_assert(offsetof(D3D10_TEX1D_SRV, MostDetailedMip) == 0);
static_assert(offsetof(D3D10_TEX1D_SRV, MipLevels) == 4);

static_assert(sizeof(D3D10_TEX1D_SRV) == 8);

// D3D10_TEX1D_ARRAY_SRV

struct D3D10_TEX1D_ARRAY_SRV
{
	UINT MostDetailedMip; // 0
	UINT MipLevels; // 4
	UINT FirstArraySlice; // 8
	UINT ArraySize; // 0xC
};

static_assert(TypeMatch<decltype(D3D10_TEX1D_ARRAY_SRV::MostDetailedMip), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX1D_ARRAY_SRV::MipLevels), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX1D_ARRAY_SRV::FirstArraySlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX1D_ARRAY_SRV::ArraySize), UINT>::value);

static_assert(offsetof(D3D10_TEX1D_ARRAY_SRV, MostDetailedMip) == 0);
static_assert(offsetof(D3D10_TEX1D_ARRAY_SRV, MipLevels) == 4);
static_assert(offsetof(D3D10_TEX1D_ARRAY_SRV, FirstArraySlice) == 8);
static_assert(offsetof(D3D10_TEX1D_ARRAY_SRV, ArraySize) == 0xC);

static_assert(sizeof(D3D10_TEX1D_ARRAY_SRV) == 16);

// D3D10_TEX2D_SRV

struct D3D10_TEX2D_SRV
{
	UINT MostDetailedMip; // 0
	UINT MipLevels; // 4
};

static_assert(TypeMatch<decltype(D3D10_TEX2D_SRV::MostDetailedMip), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2D_SRV::MipLevels), UINT>::value);

static_assert(offsetof(D3D10_TEX2D_SRV, MostDetailedMip) == 0);
static_assert(offsetof(D3D10_TEX2D_SRV, MipLevels) == 4);

static_assert(sizeof(D3D10_TEX2D_SRV) == 8);

// D3D10_TEX2D_ARRAY_SRV

struct D3D10_TEX2D_ARRAY_SRV
{
	UINT MostDetailedMip; // 0
	UINT MipLevels; // 4
	UINT FirstArraySlice; // 8
	UINT ArraySize; // 0xC
};

static_assert(TypeMatch<decltype(D3D10_TEX2D_ARRAY_SRV::MostDetailedMip), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2D_ARRAY_SRV::MipLevels), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2D_ARRAY_SRV::FirstArraySlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2D_ARRAY_SRV::ArraySize), UINT>::value);

static_assert(offsetof(D3D10_TEX2D_ARRAY_SRV, MostDetailedMip) == 0);
static_assert(offsetof(D3D10_TEX2D_ARRAY_SRV, MipLevels) == 4);
static_assert(offsetof(D3D10_TEX2D_ARRAY_SRV, FirstArraySlice) == 8);
static_assert(offsetof(D3D10_TEX2D_ARRAY_SRV, ArraySize) == 0xC);

static_assert(sizeof(D3D10_TEX2D_ARRAY_SRV) == 16);

// D3D10_TEX3D_SRV

struct D3D10_TEX3D_SRV
{
	UINT MostDetailedMip; // 0
	UINT MipLevels; // 4
};

static_assert(TypeMatch<decltype(D3D10_TEX3D_SRV::MostDetailedMip), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX3D_SRV::MipLevels), UINT>::value);

static_assert(offsetof(D3D10_TEX3D_SRV, MostDetailedMip) == 0);
static_assert(offsetof(D3D10_TEX3D_SRV, MipLevels) == 4);

static_assert(sizeof(D3D10_TEX3D_SRV) == 8);

// D3D10_TEXCUBE_SRV

struct D3D10_TEXCUBE_SRV
{
	UINT MostDetailedMip; // 0
	UINT MipLevels; // 4
};

static_assert(TypeMatch<decltype(D3D10_TEXCUBE_SRV::MostDetailedMip), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXCUBE_SRV::MipLevels), UINT>::value);

static_assert(offsetof(D3D10_TEXCUBE_SRV, MostDetailedMip) == 0);
static_assert(offsetof(D3D10_TEXCUBE_SRV, MipLevels) == 4);

static_assert(sizeof(D3D10_TEXCUBE_SRV) == 8);

// D3D10_TEX2DMS_SRV

struct D3D10_TEX2DMS_SRV
{
	UINT UnusedField_NothingToDefine; // 0
};

static_assert(TypeMatch<decltype(D3D10_TEX2DMS_SRV::UnusedField_NothingToDefine), UINT>::value);

static_assert(offsetof(D3D10_TEX2DMS_SRV, UnusedField_NothingToDefine) == 0);

static_assert(sizeof(D3D10_TEX2DMS_SRV) == 4);

// D3D10_TEX2DMS_ARRAY_SRV

struct D3D10_TEX2DMS_ARRAY_SRV
{
	UINT FirstArraySlice; // 0
	UINT ArraySize; // 4
};

static_assert(TypeMatch<decltype(D3D10_TEX2DMS_ARRAY_SRV::FirstArraySlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2DMS_ARRAY_SRV::ArraySize), UINT>::value);

static_assert(offsetof(D3D10_TEX2DMS_ARRAY_SRV, FirstArraySlice) == 0);
static_assert(offsetof(D3D10_TEX2DMS_ARRAY_SRV, ArraySize) == 4);

static_assert(sizeof(D3D10_TEX2DMS_ARRAY_SRV) == 8);

// D3D10_SHADER_RESOURCE_VIEW_DESC

struct D3D10_SHADER_RESOURCE_VIEW_DESC
{
	DXGI_FORMAT Format; // 0
	D3D10_SRV_DIMENSION ViewDimension; // 4
	union
	{
		D3D10_BUFFER_SRV Buffer; // 8
		D3D10_TEX1D_SRV Texture1D; // 8
		D3D10_TEX1D_ARRAY_SRV Texture1DArray; // 8
		D3D10_TEX2D_SRV Texture2D; // 8
		D3D10_TEX2D_ARRAY_SRV Texture2DArray; // 8
		D3D10_TEX2DMS_SRV Texture2DMS; // 8
		D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray; // 8
		D3D10_TEX3D_SRV Texture3D; // 8
		D3D10_TEXCUBE_SRV TextureCube; // 8
	}; // 8
};

static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::Format), DXGI_FORMAT>::value);
static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::ViewDimension), D3D10_SRV_DIMENSION>::value);
static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::Buffer), D3D10_BUFFER_SRV>::value);
static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::Texture1D), D3D10_TEX1D_SRV>::value);
static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::Texture1DArray), D3D10_TEX1D_ARRAY_SRV>::value);
static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::Texture2D), D3D10_TEX2D_SRV>::value);
static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::Texture2DArray), D3D10_TEX2D_ARRAY_SRV>::value);
static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::Texture2DMS), D3D10_TEX2DMS_SRV>::value);
static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::Texture2DMSArray), D3D10_TEX2DMS_ARRAY_SRV>::value);
static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::Texture3D), D3D10_TEX3D_SRV>::value);
static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::TextureCube), D3D10_TEXCUBE_SRV>::value);

static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, Format) == 0);
static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, ViewDimension) == 4);
static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, Buffer) == 8);
static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, Texture1D) == 8);
static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, Texture1DArray) == 8);
static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, Texture2D) == 8);
static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, Texture2DArray) == 8);
static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, Texture2DMS) == 8);
static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, Texture2DMSArray) == 8);
static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, Texture3D) == 8);
static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, TextureCube) == 8);

static_assert(sizeof(D3D10_SHADER_RESOURCE_VIEW_DESC) == 24);

// D3D10_TEXTURE3D_DESC

struct D3D10_TEXTURE3D_DESC
{
	UINT Width; // 0
	UINT Height; // 4
	UINT Depth; // 8
	UINT MipLevels; // 0xC
	DXGI_FORMAT Format; // 0x10
	D3D10_USAGE Usage; // 0x14
	UINT BindFlags; // 0x18
	UINT CPUAccessFlags; // 0x1C
	UINT MiscFlags; // 0x20
};

static_assert(TypeMatch<decltype(D3D10_TEXTURE3D_DESC::Width), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE3D_DESC::Height), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE3D_DESC::Depth), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE3D_DESC::MipLevels), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE3D_DESC::Format), DXGI_FORMAT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE3D_DESC::Usage), D3D10_USAGE>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE3D_DESC::BindFlags), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE3D_DESC::CPUAccessFlags), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE3D_DESC::MiscFlags), UINT>::value);

static_assert(offsetof(D3D10_TEXTURE3D_DESC, Width) == 0);
static_assert(offsetof(D3D10_TEXTURE3D_DESC, Height) == 4);
static_assert(offsetof(D3D10_TEXTURE3D_DESC, Depth) == 8);
static_assert(offsetof(D3D10_TEXTURE3D_DESC, MipLevels) == 0xC);
static_assert(offsetof(D3D10_TEXTURE3D_DESC, Format) == 0x10);
static_assert(offsetof(D3D10_TEXTURE3D_DESC, Usage) == 0x14);
static_assert(offsetof(D3D10_TEXTURE3D_DESC, BindFlags) == 0x18);
static_assert(offsetof(D3D10_TEXTURE3D_DESC, CPUAccessFlags) == 0x1C);
static_assert(offsetof(D3D10_TEXTURE3D_DESC, MiscFlags) == 0x20);

static_assert(sizeof(D3D10_TEXTURE3D_DESC) == 36);

// D3D10_BUFFER_RTV

struct D3D10_BUFFER_RTV
{
	union
	{
		UINT FirstElement; // 0
		UINT ElementOffset; // 0
	}; // 0
	union
	{
		UINT NumElements; // 4
		UINT ElementWidth; // 4
	}; // 4
};

static_assert(TypeMatch<decltype(D3D10_BUFFER_RTV::FirstElement), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BUFFER_RTV::ElementOffset), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BUFFER_RTV::NumElements), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BUFFER_RTV::ElementWidth), UINT>::value);

static_assert(offsetof(D3D10_BUFFER_RTV, FirstElement) == 0);
static_assert(offsetof(D3D10_BUFFER_RTV, ElementOffset) == 0);
static_assert(offsetof(D3D10_BUFFER_RTV, NumElements) == 4);
static_assert(offsetof(D3D10_BUFFER_RTV, ElementWidth) == 4);

static_assert(sizeof(D3D10_BUFFER_RTV) == 8);

// D3D10_TEX1D_RTV

struct D3D10_TEX1D_RTV
{
	UINT MipSlice; // 0
};

static_assert(TypeMatch<decltype(D3D10_TEX1D_RTV::MipSlice), UINT>::value);

static_assert(offsetof(D3D10_TEX1D_RTV, MipSlice) == 0);

static_assert(sizeof(D3D10_TEX1D_RTV) == 4);

// D3D10_TEX1D_ARRAY_RTV

struct D3D10_TEX1D_ARRAY_RTV
{
	UINT MipSlice; // 0
	UINT FirstArraySlice; // 4
	UINT ArraySize; // 8
};

static_assert(TypeMatch<decltype(D3D10_TEX1D_ARRAY_RTV::MipSlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX1D_ARRAY_RTV::FirstArraySlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX1D_ARRAY_RTV::ArraySize), UINT>::value);

static_assert(offsetof(D3D10_TEX1D_ARRAY_RTV, MipSlice) == 0);
static_assert(offsetof(D3D10_TEX1D_ARRAY_RTV, FirstArraySlice) == 4);
static_assert(offsetof(D3D10_TEX1D_ARRAY_RTV, ArraySize) == 8);

static_assert(sizeof(D3D10_TEX1D_ARRAY_RTV) == 12);

// D3D10_TEX2D_RTV

struct D3D10_TEX2D_RTV
{
	UINT MipSlice; // 0
};

static_assert(TypeMatch<decltype(D3D10_TEX2D_RTV::MipSlice), UINT>::value);

static_assert(offsetof(D3D10_TEX2D_RTV, MipSlice) == 0);

static_assert(sizeof(D3D10_TEX2D_RTV) == 4);

// D3D10_TEX2DMS_RTV

struct D3D10_TEX2DMS_RTV
{
	UINT UnusedField_NothingToDefine; // 0
};

static_assert(TypeMatch<decltype(D3D10_TEX2DMS_RTV::UnusedField_NothingToDefine), UINT>::value);

static_assert(offsetof(D3D10_TEX2DMS_RTV, UnusedField_NothingToDefine) == 0);

static_assert(sizeof(D3D10_TEX2DMS_RTV) == 4);

// D3D10_TEX2D_ARRAY_RTV

struct D3D10_TEX2D_ARRAY_RTV
{
	UINT MipSlice; // 0
	UINT FirstArraySlice; // 4
	UINT ArraySize; // 8
};

static_assert(TypeMatch<decltype(D3D10_TEX2D_ARRAY_RTV::MipSlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2D_ARRAY_RTV::FirstArraySlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2D_ARRAY_RTV::ArraySize), UINT>::value);

static_assert(offsetof(D3D10_TEX2D_ARRAY_RTV, MipSlice) == 0);
static_assert(offsetof(D3D10_TEX2D_ARRAY_RTV, FirstArraySlice) == 4);
static_assert(offsetof(D3D10_TEX2D_ARRAY_RTV, ArraySize) == 8);

static_assert(sizeof(D3D10_TEX2D_ARRAY_RTV) == 12);

// D3D10_TEX2DMS_ARRAY_RTV

struct D3D10_TEX2DMS_ARRAY_RTV
{
	UINT FirstArraySlice; // 0
	UINT ArraySize; // 4
};

static_assert(TypeMatch<decltype(D3D10_TEX2DMS_ARRAY_RTV::FirstArraySlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2DMS_ARRAY_RTV::ArraySize), UINT>::value);

static_assert(offsetof(D3D10_TEX2DMS_ARRAY_RTV, FirstArraySlice) == 0);
static_assert(offsetof(D3D10_TEX2DMS_ARRAY_RTV, ArraySize) == 4);

static_assert(sizeof(D3D10_TEX2DMS_ARRAY_RTV) == 8);

// D3D10_TEX3D_RTV

struct D3D10_TEX3D_RTV
{
	UINT MipSlice; // 0
	UINT FirstWSlice; // 4
	UINT WSize; // 8
};

static_assert(TypeMatch<decltype(D3D10_TEX3D_RTV::MipSlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX3D_RTV::FirstWSlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX3D_RTV::WSize), UINT>::value);

static_assert(offsetof(D3D10_TEX3D_RTV, MipSlice) == 0);
static_assert(offsetof(D3D10_TEX3D_RTV, FirstWSlice) == 4);
static_assert(offsetof(D3D10_TEX3D_RTV, WSize) == 8);

static_assert(sizeof(D3D10_TEX3D_RTV) == 12);

// D3D10_RENDER_TARGET_VIEW_DESC

struct D3D10_RENDER_TARGET_VIEW_DESC
{
	DXGI_FORMAT Format; // 0
	D3D10_RTV_DIMENSION ViewDimension; // 4
	union
	{
		D3D10_BUFFER_RTV Buffer; // 8
		D3D10_TEX1D_RTV Texture1D; // 8
		D3D10_TEX1D_ARRAY_RTV Texture1DArray; // 8
		D3D10_TEX2D_RTV Texture2D; // 8
		D3D10_TEX2D_ARRAY_RTV Texture2DArray; // 8
		D3D10_TEX2DMS_RTV Texture2DMS; // 8
		D3D10_TEX2DMS_ARRAY_RTV Texture2DMSArray; // 8
		D3D10_TEX3D_RTV Texture3D; // 8
	}; // 8
};

static_assert(TypeMatch<decltype(D3D10_RENDER_TARGET_VIEW_DESC::Format), DXGI_FORMAT>::value);
static_assert(TypeMatch<decltype(D3D10_RENDER_TARGET_VIEW_DESC::ViewDimension), D3D10_RTV_DIMENSION>::value);
static_assert(TypeMatch<decltype(D3D10_RENDER_TARGET_VIEW_DESC::Buffer), D3D10_BUFFER_RTV>::value);
static_assert(TypeMatch<decltype(D3D10_RENDER_TARGET_VIEW_DESC::Texture1D), D3D10_TEX1D_RTV>::value);
static_assert(TypeMatch<decltype(D3D10_RENDER_TARGET_VIEW_DESC::Texture1DArray), D3D10_TEX1D_ARRAY_RTV>::value);
static_assert(TypeMatch<decltype(D3D10_RENDER_TARGET_VIEW_DESC::Texture2D), D3D10_TEX2D_RTV>::value);
static_assert(TypeMatch<decltype(D3D10_RENDER_TARGET_VIEW_DESC::Texture2DArray), D3D10_TEX2D_ARRAY_RTV>::value);
static_assert(TypeMatch<decltype(D3D10_RENDER_TARGET_VIEW_DESC::Texture2DMS), D3D10_TEX2DMS_RTV>::value);
static_assert(TypeMatch<decltype(D3D10_RENDER_TARGET_VIEW_DESC::Texture2DMSArray), D3D10_TEX2DMS_ARRAY_RTV>::value);
static_assert(TypeMatch<decltype(D3D10_RENDER_TARGET_VIEW_DESC::Texture3D), D3D10_TEX3D_RTV>::value);

static_assert(offsetof(D3D10_RENDER_TARGET_VIEW_DESC, Format) == 0);
static_assert(offsetof(D3D10_RENDER_TARGET_VIEW_DESC, ViewDimension) == 4);
static_assert(offsetof(D3D10_RENDER_TARGET_VIEW_DESC, Buffer) == 8);
static_assert(offsetof(D3D10_RENDER_TARGET_VIEW_DESC, Texture1D) == 8);
static_assert(offsetof(D3D10_RENDER_TARGET_VIEW_DESC, Texture1DArray) == 8);
static_assert(offsetof(D3D10_RENDER_TARGET_VIEW_DESC, Texture2D) == 8);
static_assert(offsetof(D3D10_RENDER_TARGET_VIEW_DESC, Texture2DArray) == 8);
static_assert(offsetof(D3D10_RENDER_TARGET_VIEW_DESC, Texture2DMS) == 8);
static_assert(offsetof(D3D10_RENDER_TARGET_VIEW_DESC, Texture2DMSArray) == 8);
static_assert(offsetof(D3D10_RENDER_TARGET_VIEW_DESC, Texture3D) == 8);

static_assert(sizeof(D3D10_RENDER_TARGET_VIEW_DESC) == 20);

// D3D10_SAMPLER_DESC

struct D3D10_SAMPLER_DESC
{
	D3D10_FILTER Filter; // 0
	D3D10_TEXTURE_ADDRESS_MODE AddressU; // 4
	D3D10_TEXTURE_ADDRESS_MODE AddressV; // 8
	D3D10_TEXTURE_ADDRESS_MODE AddressW; // 0xC
	FLOAT MipLODBias; // 0x10
	UINT MaxAnisotropy; // 0x14
	D3D10_COMPARISON_FUNC ComparisonFunc; // 0x18
	FLOAT BorderColor[4]; // 0x1C
	FLOAT MinLOD; // 0x2C
	FLOAT MaxLOD; // 0x30
};

static_assert(TypeMatch<decltype(D3D10_SAMPLER_DESC::Filter), D3D10_FILTER>::value);
static_assert(TypeMatch<decltype(D3D10_SAMPLER_DESC::AddressU), D3D10_TEXTURE_ADDRESS_MODE>::value);
static_assert(TypeMatch<decltype(D3D10_SAMPLER_DESC::AddressV), D3D10_TEXTURE_ADDRESS_MODE>::value);
static_assert(TypeMatch<decltype(D3D10_SAMPLER_DESC::AddressW), D3D10_TEXTURE_ADDRESS_MODE>::value);
static_assert(TypeMatch<decltype(D3D10_SAMPLER_DESC::MipLODBias), FLOAT>::value);
static_assert(TypeMatch<decltype(D3D10_SAMPLER_DESC::MaxAnisotropy), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_SAMPLER_DESC::ComparisonFunc), D3D10_COMPARISON_FUNC>::value);
static_assert(TypeMatch<decltype(D3D10_SAMPLER_DESC::BorderColor), FLOAT[4]>::value);
static_assert(TypeMatch<decltype(D3D10_SAMPLER_DESC::MinLOD), FLOAT>::value);
static_assert(TypeMatch<decltype(D3D10_SAMPLER_DESC::MaxLOD), FLOAT>::value);

static_assert(offsetof(D3D10_SAMPLER_DESC, Filter) == 0);
static_assert(offsetof(D3D10_SAMPLER_DESC, AddressU) == 4);
static_assert(offsetof(D3D10_SAMPLER_DESC, AddressV) == 8);
static_assert(offsetof(D3D10_SAMPLER_DESC, AddressW) == 0xC);
static_assert(offsetof(D3D10_SAMPLER_DESC, MipLODBias) == 0x10);
static_assert(offsetof(D3D10_SAMPLER_DESC, MaxAnisotropy) == 0x14);
static_assert(offsetof(D3D10_SAMPLER_DESC, ComparisonFunc) == 0x18);
static_assert(offsetof(D3D10_SAMPLER_DESC, BorderColor) == 0x1C);
static_assert(offsetof(D3D10_SAMPLER_DESC, MinLOD) == 0x2C);
static_assert(offsetof(D3D10_SAMPLER_DESC, MaxLOD) == 0x30);

static_assert(sizeof(D3D10_SAMPLER_DESC) == 52);

// D3D10_QUERY_DESC

struct D3D10_QUERY_DESC
{
	D3D10_QUERY Query; // 0
	UINT MiscFlags; // 4
};

static_assert(TypeMatch<decltype(D3D10_QUERY_DESC::Query), D3D10_QUERY>::value);
static_assert(TypeMatch<decltype(D3D10_QUERY_DESC::MiscFlags), UINT>::value);

static_assert(offsetof(D3D10_QUERY_DESC, Query) == 0);
static_assert(offsetof(D3D10_QUERY_DESC, MiscFlags) == 4);

static_assert(sizeof(D3D10_QUERY_DESC) == 8);

// D3D10_COUNTER_DESC

struct D3D10_COUNTER_DESC
{
	D3D10_COUNTER Counter; // 0
	UINT MiscFlags; // 4
};

static_assert(TypeMatch<decltype(D3D10_COUNTER_DESC::Counter), D3D10_COUNTER>::value);
static_assert(TypeMatch<decltype(D3D10_COUNTER_DESC::MiscFlags), UINT>::value);

static_assert(offsetof(D3D10_COUNTER_DESC, Counter) == 0);
static_assert(offsetof(D3D10_COUNTER_DESC, MiscFlags) == 4);

static_assert(sizeof(D3D10_COUNTER_DESC) == 8);

// D3D10_VIEWPORT

struct D3D10_VIEWPORT
{
	INT TopLeftX; // 0
	INT TopLeftY; // 4
	UINT Width; // 8
	UINT Height; // 0xC
	FLOAT MinDepth; // 0x10
	FLOAT MaxDepth; // 0x14
};

static_assert(TypeMatch<decltype(D3D10_VIEWPORT::TopLeftX), INT>::value);
static_assert(TypeMatch<decltype(D3D10_VIEWPORT::TopLeftY), INT>::value);
static_assert(TypeMatch<decltype(D3D10_VIEWPORT::Width), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_VIEWPORT::Height), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_VIEWPORT::MinDepth), FLOAT>::value);
static_assert(TypeMatch<decltype(D3D10_VIEWPORT::MaxDepth), FLOAT>::value);

static_assert(offsetof(D3D10_VIEWPORT, TopLeftX) == 0);
static_assert(offsetof(D3D10_VIEWPORT, TopLeftY) == 4);
static_assert(offsetof(D3D10_VIEWPORT, Width) == 8);
static_assert(offsetof(D3D10_VIEWPORT, Height) == 0xC);
static_assert(offsetof(D3D10_VIEWPORT, MinDepth) == 0x10);
static_assert(offsetof(D3D10_VIEWPORT, MaxDepth) == 0x14);

static_assert(sizeof(D3D10_VIEWPORT) == 24);

// D3D10_TEX1D_DSV

struct D3D10_TEX1D_DSV
{
	UINT MipSlice; // 0
};

static_assert(TypeMatch<decltype(D3D10_TEX1D_DSV::MipSlice), UINT>::value);

static_assert(offsetof(D3D10_TEX1D_DSV, MipSlice) == 0);

static_assert(sizeof(D3D10_TEX1D_DSV) == 4);

// D3D10_TEX1D_ARRAY_DSV

struct D3D10_TEX1D_ARRAY_DSV
{
	UINT MipSlice; // 0
	UINT FirstArraySlice; // 4
	UINT ArraySize; // 8
};

static_assert(TypeMatch<decltype(D3D10_TEX1D_ARRAY_DSV::MipSlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX1D_ARRAY_DSV::FirstArraySlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX1D_ARRAY_DSV::ArraySize), UINT>::value);

static_assert(offsetof(D3D10_TEX1D_ARRAY_DSV, MipSlice) == 0);
static_assert(offsetof(D3D10_TEX1D_ARRAY_DSV, FirstArraySlice) == 4);
static_assert(offsetof(D3D10_TEX1D_ARRAY_DSV, ArraySize) == 8);

static_assert(sizeof(D3D10_TEX1D_ARRAY_DSV) == 12);

// D3D10_TEX2D_DSV

struct D3D10_TEX2D_DSV
{
	UINT MipSlice; // 0
};

static_assert(TypeMatch<decltype(D3D10_TEX2D_DSV::MipSlice), UINT>::value);

static_assert(offsetof(D3D10_TEX2D_DSV, MipSlice) == 0);

static_assert(sizeof(D3D10_TEX2D_DSV) == 4);

// D3D10_TEX2D_ARRAY_DSV

struct D3D10_TEX2D_ARRAY_DSV
{
	UINT MipSlice; // 0
	UINT FirstArraySlice; // 4
	UINT ArraySize; // 8
};

static_assert(TypeMatch<decltype(D3D10_TEX2D_ARRAY_DSV::MipSlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2D_ARRAY_DSV::FirstArraySlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2D_ARRAY_DSV::ArraySize), UINT>::value);

static_assert(offsetof(D3D10_TEX2D_ARRAY_DSV, MipSlice) == 0);
static_assert(offsetof(D3D10_TEX2D_ARRAY_DSV, FirstArraySlice) == 4);
static_assert(offsetof(D3D10_TEX2D_ARRAY_DSV, ArraySize) == 8);

static_assert(sizeof(D3D10_TEX2D_ARRAY_DSV) == 12);

// D3D10_TEX2DMS_DSV

struct D3D10_TEX2DMS_DSV
{
	UINT UnusedField_NothingToDefine; // 0
};

static_assert(TypeMatch<decltype(D3D10_TEX2DMS_DSV::UnusedField_NothingToDefine), UINT>::value);

static_assert(offsetof(D3D10_TEX2DMS_DSV, UnusedField_NothingToDefine) == 0);

static_assert(sizeof(D3D10_TEX2DMS_DSV) == 4);

// D3D10_TEX2DMS_ARRAY_DSV

struct D3D10_TEX2DMS_ARRAY_DSV
{
	UINT FirstArraySlice; // 0
	UINT ArraySize; // 4
};

static_assert(TypeMatch<decltype(D3D10_TEX2DMS_ARRAY_DSV::FirstArraySlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2DMS_ARRAY_DSV::ArraySize), UINT>::value);

static_assert(offsetof(D3D10_TEX2DMS_ARRAY_DSV, FirstArraySlice) == 0);
static_assert(offsetof(D3D10_TEX2DMS_ARRAY_DSV, ArraySize) == 4);

static_assert(sizeof(D3D10_TEX2DMS_ARRAY_DSV) == 8);

// D3D10_DEPTH_STENCIL_VIEW_DESC

struct D3D10_DEPTH_STENCIL_VIEW_DESC
{
	DXGI_FORMAT Format; // 0
	D3D10_DSV_DIMENSION ViewDimension; // 4
	union
	{
		D3D10_TEX1D_DSV Texture1D; // 8
		D3D10_TEX1D_ARRAY_DSV Texture1DArray; // 8
		D3D10_TEX2D_DSV Texture2D; // 8
		D3D10_TEX2D_ARRAY_DSV Texture2DArray; // 8
		D3D10_TEX2DMS_DSV Texture2DMS; // 8
		D3D10_TEX2DMS_ARRAY_DSV Texture2DMSArray; // 8
	}; // 8
};

static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_VIEW_DESC::Format), DXGI_FORMAT>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_VIEW_DESC::ViewDimension), D3D10_DSV_DIMENSION>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_VIEW_DESC::Texture1D), D3D10_TEX1D_DSV>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_VIEW_DESC::Texture1DArray), D3D10_TEX1D_ARRAY_DSV>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_VIEW_DESC::Texture2D), D3D10_TEX2D_DSV>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_VIEW_DESC::Texture2DArray), D3D10_TEX2D_ARRAY_DSV>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_VIEW_DESC::Texture2DMS), D3D10_TEX2DMS_DSV>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_VIEW_DESC::Texture2DMSArray), D3D10_TEX2DMS_ARRAY_DSV>::value);

static_assert(offsetof(D3D10_DEPTH_STENCIL_VIEW_DESC, Format) == 0);
static_assert(offsetof(D3D10_DEPTH_STENCIL_VIEW_DESC, ViewDimension) == 4);
static_assert(offsetof(D3D10_DEPTH_STENCIL_VIEW_DESC, Texture1D) == 8);
static_assert(offsetof(D3D10_DEPTH_STENCIL_VIEW_DESC, Texture1DArray) == 8);
static_assert(offsetof(D3D10_DEPTH_STENCIL_VIEW_DESC, Texture2D) == 8);
static_assert(offsetof(D3D10_DEPTH_STENCIL_VIEW_DESC, Texture2DArray) == 8);
static_assert(offsetof(D3D10_DEPTH_STENCIL_VIEW_DESC, Texture2DMS) == 8);
static_assert(offsetof(D3D10_DEPTH_STENCIL_VIEW_DESC, Texture2DMSArray) == 8);

static_assert(sizeof(D3D10_DEPTH_STENCIL_VIEW_DESC) == 20);

// D3D10_COUNTER_INFO

struct D3D10_COUNTER_INFO
{
	D3D10_COUNTER LastDeviceDependentCounter; // 0
	UINT NumSimultaneousCounters; // 4
	UINT8 NumDetectableParallelUnits; // 8
	_(3);
};

static_assert(TypeMatch<decltype(D3D10_COUNTER_INFO::LastDeviceDependentCounter), D3D10_COUNTER>::value);
static_assert(TypeMatch<decltype(D3D10_COUNTER_INFO::NumSimultaneousCounters), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_COUNTER_INFO::NumDetectableParallelUnits), UINT8>::value);

static_assert(offsetof(D3D10_COUNTER_INFO, LastDeviceDependentCounter) == 0);
static_assert(offsetof(D3D10_COUNTER_INFO, NumSimultaneousCounters) == 4);
static_assert(offsetof(D3D10_COUNTER_INFO, NumDetectableParallelUnits) == 8);

static_assert(sizeof(D3D10_COUNTER_INFO) == 12);

// D3D10_BOX

struct D3D10_BOX
{
	UINT left; // 0
	UINT top; // 4
	UINT front; // 8
	UINT right; // 0xC
	UINT bottom; // 0x10
	UINT back; // 0x14
};

static_assert(TypeMatch<decltype(D3D10_BOX::left), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BOX::top), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BOX::front), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BOX::right), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BOX::bottom), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BOX::back), UINT>::value);

static_assert(offsetof(D3D10_BOX, left) == 0);
static_assert(offsetof(D3D10_BOX, top) == 4);
static_assert(offsetof(D3D10_BOX, front) == 8);
static_assert(offsetof(D3D10_BOX, right) == 0xC);
static_assert(offsetof(D3D10_BOX, bottom) == 0x10);
static_assert(offsetof(D3D10_BOX, back) == 0x14);

static_assert(sizeof(D3D10_BOX) == 24);

// D3D10_SUBRESOURCE_DATA

struct D3D10_SUBRESOURCE_DATA
{
	const void* pSysMem; // 0
	UINT SysMemPitch; // 8
	UINT SysMemSlicePitch; // 0xC
};

static_assert(TypeMatch<decltype(D3D10_SUBRESOURCE_DATA::pSysMem), const void*>::value);
static_assert(TypeMatch<decltype(D3D10_SUBRESOURCE_DATA::SysMemPitch), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_SUBRESOURCE_DATA::SysMemSlicePitch), UINT>::value);

static_assert(offsetof(D3D10_SUBRESOURCE_DATA, pSysMem) == 0);
static_assert(offsetof(D3D10_SUBRESOURCE_DATA, SysMemPitch) == 8);
static_assert(offsetof(D3D10_SUBRESOURCE_DATA, SysMemSlicePitch) == 0xC);

static_assert(sizeof(D3D10_SUBRESOURCE_DATA) == 16);

// D3D10_INPUT_ELEMENT_DESC

struct D3D10_INPUT_ELEMENT_DESC
{
	LPCSTR SemanticName; // 0
	UINT SemanticIndex; // 8
	DXGI_FORMAT Format; // 0xC
	UINT InputSlot; // 0x10
	UINT AlignedByteOffset; // 0x14
	D3D10_INPUT_CLASSIFICATION InputSlotClass; // 0x18
	UINT InstanceDataStepRate; // 0x1C
};

static_assert(TypeMatch<decltype(D3D10_INPUT_ELEMENT_DESC::SemanticName), LPCSTR>::value);
static_assert(TypeMatch<decltype(D3D10_INPUT_ELEMENT_DESC::SemanticIndex), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_INPUT_ELEMENT_DESC::Format), DXGI_FORMAT>::value);
static_assert(TypeMatch<decltype(D3D10_INPUT_ELEMENT_DESC::InputSlot), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_INPUT_ELEMENT_DESC::AlignedByteOffset), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_INPUT_ELEMENT_DESC::InputSlotClass), D3D10_INPUT_CLASSIFICATION>::value);
static_assert(TypeMatch<decltype(D3D10_INPUT_ELEMENT_DESC::InstanceDataStepRate), UINT>::value);

static_assert(offsetof(D3D10_INPUT_ELEMENT_DESC, SemanticName) == 0);
static_assert(offsetof(D3D10_INPUT_ELEMENT_DESC, SemanticIndex) == 8);
static_assert(offsetof(D3D10_INPUT_ELEMENT_DESC, Format) == 0xC);
static_assert(offsetof(D3D10_INPUT_ELEMENT_DESC, InputSlot) == 0x10);
static_assert(offsetof(D3D10_INPUT_ELEMENT_DESC, AlignedByteOffset) == 0x14);
static_assert(offsetof(D3D10_INPUT_ELEMENT_DESC, InputSlotClass) == 0x18);
static_assert(offsetof(D3D10_INPUT_ELEMENT_DESC, InstanceDataStepRate) == 0x1C);

static_assert(sizeof(D3D10_INPUT_ELEMENT_DESC) == 32);

// D3D10_SO_DECLARATION_ENTRY

struct D3D10_SO_DECLARATION_ENTRY
{
	LPCSTR SemanticName; // 0
	UINT SemanticIndex; // 8
	BYTE StartComponent; // 0xC
	BYTE ComponentCount; // 0xD
	BYTE OutputSlot; // 0xE
	_(1);
};

static_assert(TypeMatch<decltype(D3D10_SO_DECLARATION_ENTRY::SemanticName), LPCSTR>::value);
static_assert(TypeMatch<decltype(D3D10_SO_DECLARATION_ENTRY::SemanticIndex), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_SO_DECLARATION_ENTRY::StartComponent), BYTE>::value);
static_assert(TypeMatch<decltype(D3D10_SO_DECLARATION_ENTRY::ComponentCount), BYTE>::value);
static_assert(TypeMatch<decltype(D3D10_SO_DECLARATION_ENTRY::OutputSlot), BYTE>::value);

static_assert(offsetof(D3D10_SO_DECLARATION_ENTRY, SemanticName) == 0);
static_assert(offsetof(D3D10_SO_DECLARATION_ENTRY, SemanticIndex) == 8);
static_assert(offsetof(D3D10_SO_DECLARATION_ENTRY, StartComponent) == 0xC);
static_assert(offsetof(D3D10_SO_DECLARATION_ENTRY, ComponentCount) == 0xD);
static_assert(offsetof(D3D10_SO_DECLARATION_ENTRY, OutputSlot) == 0xE);

static_assert(sizeof(D3D10_SO_DECLARATION_ENTRY) == 16);

// D3D_SHADER_MACRO

struct D3D_SHADER_MACRO
{
	LPCSTR Name; // 0
	LPCSTR Definition; // 8
};

static_assert(TypeMatch<decltype(D3D_SHADER_MACRO::Name), LPCSTR>::value);
static_assert(TypeMatch<decltype(D3D_SHADER_MACRO::Definition), LPCSTR>::value);

static_assert(offsetof(D3D_SHADER_MACRO, Name) == 0);
static_assert(offsetof(D3D_SHADER_MACRO, Definition) == 8);

static_assert(sizeof(D3D_SHADER_MACRO) == 16);

#pragma pack(pop)

// ID3D10DeviceChild

struct __declspec(novtable) ID3D10DeviceChild : IUnknown
{
	virtual void GetDevice(ID3D10Device** ppDevice) = 0;
	virtual HRESULT GetPrivateData
	(
		const GUID& guid,
		UINT* pDataSize,
		void* pData
	) = 0;
	virtual HRESULT SetPrivateData
	(
		const GUID& guid,
		UINT DataSize,
		const void* pData
	) = 0;
	virtual HRESULT SetPrivateDataInterface
	(
		const GUID& guid,
		const IUnknown* pData
	) = 0;
};

static_assert(sizeof(ID3D10DeviceChild) == 8);

// ID3D10DepthStencilState

struct __declspec(novtable) ID3D10DepthStencilState : ID3D10DeviceChild
{
	virtual void GetDesc(D3D10_DEPTH_STENCIL_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10DepthStencilState) == 8);

// ID3D10BlendState

struct __declspec(novtable) ID3D10BlendState : ID3D10DeviceChild
{
	virtual void GetDesc(D3D10_BLEND_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10BlendState) == 8);

// ID3D10RasterizerState

struct __declspec(novtable) ID3D10RasterizerState : ID3D10DeviceChild
{
	virtual void GetDesc(D3D10_RASTERIZER_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10RasterizerState) == 8);

// ID3D10Resource

struct __declspec(novtable) ID3D10Resource : ID3D10DeviceChild
{
	virtual void GetType(D3D10_RESOURCE_DIMENSION* rType) = 0;
	virtual void SetEvictionPriority(UINT EvictionPriority) = 0;
	virtual UINT GetEvictionPriority() = 0;
};

static_assert(sizeof(ID3D10Resource) == 8);

// ID3D10Buffer

struct __declspec(novtable) ID3D10Buffer : ID3D10Resource
{
	virtual HRESULT Map
	(
		D3D10_MAP MapType,
		UINT MapFlags,
		void** ppData
	) = 0;
	virtual void Unmap() = 0;
	virtual void GetDesc(D3D10_BUFFER_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10Buffer) == 8);

// ID3D10Texture1D

struct __declspec(novtable) ID3D10Texture1D : ID3D10Resource
{
	virtual HRESULT Map
	(
		UINT Subresource,
		D3D10_MAP MapType,
		UINT MapFlags,
		void** ppData
	) = 0;
	virtual void Unmap(UINT Subresource) = 0;
	virtual void GetDesc(D3D10_TEXTURE1D_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10Texture1D) == 8);

// ID3D10Texture2D

struct __declspec(novtable) ID3D10Texture2D : ID3D10Resource
{
	virtual HRESULT Map
	(
		UINT Subresource,
		D3D10_MAP MapType,
		UINT MapFlags,
		D3D10_MAPPED_TEXTURE2D* pMappedTex2D
	) = 0;
	virtual void Unmap(UINT Subresource) = 0;
	virtual void GetDesc(D3D10_TEXTURE2D_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10Texture2D) == 8);

// ID3D10Texture3D

struct __declspec(novtable) ID3D10Texture3D : ID3D10Resource
{
	virtual HRESULT Map
	(
		UINT Subresource,
		D3D10_MAP MapType,
		UINT MapFlags,
		D3D10_MAPPED_TEXTURE3D* pMappedTex3D
	) = 0;
	virtual void Unmap(UINT Subresource) = 0;
	virtual void GetDesc(D3D10_TEXTURE3D_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10Texture3D) == 8);

// ID3D10View

struct __declspec(novtable) ID3D10View : ID3D10DeviceChild
{
	virtual void GetResource(ID3D10Resource** ppResource) = 0;
};

static_assert(sizeof(ID3D10View) == 8);

// ID3D10ShaderResourceView

struct __declspec(novtable) ID3D10ShaderResourceView : ID3D10View
{
	virtual void GetDesc(D3D10_SHADER_RESOURCE_VIEW_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10ShaderResourceView) == 8);

// ID3D10RenderTargetView

struct __declspec(novtable) ID3D10RenderTargetView : ID3D10View
{
	virtual void GetDesc(D3D10_RENDER_TARGET_VIEW_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10RenderTargetView) == 8);

// ID3D10DepthStencilView

struct __declspec(novtable) ID3D10DepthStencilView : ID3D10View
{
	virtual void GetDesc(D3D10_DEPTH_STENCIL_VIEW_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10DepthStencilView) == 8);

// ID3D10VertexShader

struct __declspec(novtable) ID3D10VertexShader : ID3D10DeviceChild
{
};

static_assert(sizeof(ID3D10VertexShader) == 8);

// ID3D10GeometryShader

struct __declspec(novtable) ID3D10GeometryShader : ID3D10DeviceChild
{
};

static_assert(sizeof(ID3D10GeometryShader) == 8);

// ID3D10PixelShader

struct __declspec(novtable) ID3D10PixelShader : ID3D10DeviceChild
{
};

static_assert(sizeof(ID3D10PixelShader) == 8);

// ID3D10InputLayout

struct __declspec(novtable) ID3D10InputLayout : ID3D10DeviceChild
{
};

static_assert(sizeof(ID3D10InputLayout) == 8);

// ID3D10SamplerState

struct __declspec(novtable) ID3D10SamplerState : ID3D10DeviceChild
{
	virtual void GetDesc(D3D10_SAMPLER_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10SamplerState) == 8);

// ID3D10Asynchronous

struct __declspec(novtable) ID3D10Asynchronous : ID3D10DeviceChild
{
	virtual void Begin() = 0;
	virtual void End() = 0;
	virtual HRESULT GetData
	(
		void* pData,
		UINT DataSize,
		UINT GetDataFlags
	) = 0;
	virtual UINT GetDataSize() = 0;
};

static_assert(sizeof(ID3D10Asynchronous) == 8);

// ID3D10Query

struct __declspec(novtable) ID3D10Query : ID3D10Asynchronous
{
	virtual void GetDesc(D3D10_QUERY_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10Query) == 8);

// ID3D10Predicate

struct __declspec(novtable) ID3D10Predicate : ID3D10Query
{
};

static_assert(sizeof(ID3D10Predicate) == 8);

// ID3D10Counter

struct __declspec(novtable) ID3D10Counter : ID3D10Asynchronous
{
	virtual void GetDesc(D3D10_COUNTER_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10Counter) == 8);

// ID3D10Device

struct __declspec(novtable) ID3D10Device : IUnknown
{
	virtual void VSSetConstantBuffers
	(
		UINT StartSlot,
		UINT NumBuffers,
		ID3D10Buffer*const* ppConstantBuffers
	) = 0;
	virtual void PSSetShaderResources
	(
		UINT StartSlot,
		UINT NumViews,
		ID3D10ShaderResourceView*const* ppShaderResourceViews
	) = 0;
	virtual void PSSetShader(ID3D10PixelShader* pPixelShader) = 0;
	virtual void PSSetSamplers
	(
		UINT StartSlot,
		UINT NumSamplers,
		ID3D10SamplerState*const* ppSamplers
	) = 0;
	virtual void VSSetShader(ID3D10VertexShader* pVertexShader) = 0;
	virtual void DrawIndexed
	(
		UINT IndexCount,
		UINT StartIndexLocation,
		INT BaseVertexLocation
	) = 0;
	virtual void Draw
	(
		UINT VertexCount,
		UINT StartVertexLocation
	) = 0;
	virtual void PSSetConstantBuffers
	(
		UINT StartSlot,
		UINT NumBuffers,
		ID3D10Buffer*const* ppConstantBuffers
	) = 0;
	virtual void IASetInputLayout(ID3D10InputLayout* pInputLayout) = 0;
	virtual void IASetVertexBuffers
	(
		UINT StartSlot,
		UINT NumBuffers,
		ID3D10Buffer*const* ppVertexBuffers,
		const UINT* pStrides,
		const UINT* pOffsets
	) = 0;
	virtual void IASetIndexBuffer
	(
		ID3D10Buffer* pIndexBuffer,
		DXGI_FORMAT Format,
		UINT Offset
	) = 0;
	virtual void DrawIndexedInstanced
	(
		UINT IndexCountPerInstance,
		UINT InstanceCount,
		UINT StartIndexLocation,
		INT BaseVertexLocation,
		UINT StartInstanceLocation
	) = 0;
	virtual void DrawInstanced
	(
		UINT VertexCountPerInstance,
		UINT InstanceCount,
		UINT StartVertexLocation,
		UINT StartInstanceLocation
	) = 0;
	virtual void GSSetConstantBuffers
	(
		UINT StartSlot,
		UINT NumBuffers,
		ID3D10Buffer*const* ppConstantBuffers
	) = 0;
	virtual void GSSetShader(ID3D10GeometryShader* pShader) = 0;
	virtual void IASetPrimitiveTopology(D3D10_PRIMITIVE_TOPOLOGY Topology) = 0;
	virtual void VSSetShaderResources
	(
		UINT StartSlot,
		UINT NumViews,
		ID3D10ShaderResourceView*const* ppShaderResourceViews
	) = 0;
	virtual void VSSetSamplers
	(
		UINT StartSlot,
		UINT NumSamplers,
		ID3D10SamplerState*const* ppSamplers
	) = 0;
	virtual void SetPredication
	(
		ID3D10Predicate* pPredicate,
		BOOL PredicateValue
	) = 0;
	virtual void GSSetShaderResources
	(
		UINT StartSlot,
		UINT NumViews,
		ID3D10ShaderResourceView*const* ppShaderResourceViews
	) = 0;
	virtual void GSSetSamplers
	(
		UINT StartSlot,
		UINT NumSamplers,
		ID3D10SamplerState*const* ppSamplers
	) = 0;
	virtual void OMSetRenderTargets
	(
		UINT NumViews,
		ID3D10RenderTargetView*const* ppRenderTargetViews,
		ID3D10DepthStencilView* pDepthStencilView
	) = 0;
	virtual void OMSetBlendState
	(
		ID3D10BlendState* pBlendState,
		const FLOAT BlendFactor[4],
		UINT SampleMask
	) = 0;
	virtual void OMSetDepthStencilState
	(
		ID3D10DepthStencilState* pDepthStencilState,
		UINT StencilRef
	) = 0;
	virtual void SOSetTargets
	(
		UINT NumBuffers,
		ID3D10Buffer*const* ppSOTargets,
		const UINT* pOffsets
	) = 0;
	virtual void DrawAuto() = 0;
	virtual void RSSetState(ID3D10RasterizerState* pRasterizerState) = 0;
	virtual void RSSetViewports
	(
		UINT NumViewports,
		const D3D10_VIEWPORT* pViewports
	) = 0;
	virtual void RSSetScissorRects
	(
		UINT NumRects,
		const D3D10_RECT* pRects
	) = 0;
	virtual void CopySubresourceRegion
	(
		ID3D10Resource* pDstResource,
		UINT DstSubresource,
		UINT DstX,
		UINT DstY,
		UINT DstZ,
		ID3D10Resource* pSrcResource,
		UINT SrcSubresource,
		const D3D10_BOX* pSrcBox
	) = 0;
	virtual void CopyResource
	(
		ID3D10Resource* pDstResource,
		ID3D10Resource* pSrcResource
	) = 0;
	virtual void UpdateSubresource
	(
		ID3D10Resource* pDstResource,
		UINT DstSubresource,
		const D3D10_BOX* pDstBox,
		const void* pSrcData,
		UINT SrcRowPitch,
		UINT SrcDepthPitch
	) = 0;
	virtual void ClearRenderTargetView
	(
		ID3D10RenderTargetView* pRenderTargetView,
		const FLOAT ColorRGBA[4]
	) = 0;
	virtual void ClearDepthStencilView
	(
		ID3D10DepthStencilView* pDepthStencilView,
		UINT ClearFlags,
		FLOAT Depth,
		UINT8 Stencil
	) = 0;
	virtual void GenerateMips(ID3D10ShaderResourceView* pShaderResourceView) = 0;
	virtual void ResolveSubresource
	(
		ID3D10Resource* pDstResource,
		UINT DstSubresource,
		ID3D10Resource* pSrcResource,
		UINT SrcSubresource,
		DXGI_FORMAT Format
	) = 0;
	virtual void VSGetConstantBuffers
	(
		UINT StartSlot,
		UINT NumBuffers,
		ID3D10Buffer** ppConstantBuffers
	) = 0;
	virtual void PSGetShaderResources
	(
		UINT StartSlot,
		UINT NumViews,
		ID3D10ShaderResourceView** ppShaderResourceViews
	) = 0;
	virtual void PSGetShader(ID3D10PixelShader** ppPixelShader) = 0;
	virtual void PSGetSamplers
	(
		UINT StartSlot,
		UINT NumSamplers,
		ID3D10SamplerState** ppSamplers
	) = 0;
	virtual void VSGetShader(ID3D10VertexShader** ppVertexShader) = 0;
	virtual void PSGetConstantBuffers
	(
		UINT StartSlot,
		UINT NumBuffers,
		ID3D10Buffer** ppConstantBuffers
	) = 0;
	virtual void IAGetInputLayout(ID3D10InputLayout** ppInputLayout) = 0;
	virtual void IAGetVertexBuffers
	(
		UINT StartSlot,
		UINT NumBuffers,
		ID3D10Buffer** ppVertexBuffers,
		UINT* pStrides,
		UINT* pOffsets
	) = 0;
	virtual void IAGetIndexBuffer
	(
		ID3D10Buffer** pIndexBuffer,
		DXGI_FORMAT* Format,
		UINT* Offset
	) = 0;
	virtual void GSGetConstantBuffers
	(
		UINT StartSlot,
		UINT NumBuffers,
		ID3D10Buffer** ppConstantBuffers
	) = 0;
	virtual void GSGetShader(ID3D10GeometryShader** ppGeometryShader) = 0;
	virtual void IAGetPrimitiveTopology(D3D10_PRIMITIVE_TOPOLOGY* pTopology) = 0;
	virtual void VSGetShaderResources
	(
		UINT StartSlot,
		UINT NumViews,
		ID3D10ShaderResourceView** ppShaderResourceViews
	) = 0;
	virtual void VSGetSamplers
	(
		UINT StartSlot,
		UINT NumSamplers,
		ID3D10SamplerState** ppSamplers
	) = 0;
	virtual void GetPredication
	(
		ID3D10Predicate** ppPredicate,
		BOOL* pPredicateValue
	) = 0;
	virtual void GSGetShaderResources
	(
		UINT StartSlot,
		UINT NumViews,
		ID3D10ShaderResourceView** ppShaderResourceViews
	) = 0;
	virtual void GSGetSamplers
	(
		UINT StartSlot,
		UINT NumSamplers,
		ID3D10SamplerState** ppSamplers
	) = 0;
	virtual void OMGetRenderTargets
	(
		UINT NumViews,
		ID3D10RenderTargetView** ppRenderTargetViews,
		ID3D10DepthStencilView** ppDepthStencilView
	) = 0;
	virtual void OMGetBlendState
	(
		ID3D10BlendState** ppBlendState,
		FLOAT BlendFactor[4],
		UINT* pSampleMask
	) = 0;
	virtual void OMGetDepthStencilState
	(
		ID3D10DepthStencilState** ppDepthStencilState,
		UINT* pStencilRef
	) = 0;
	virtual void SOGetTargets
	(
		UINT NumBuffers,
		ID3D10Buffer** ppSOTargets,
		UINT* pOffsets
	) = 0;
	virtual void RSGetState(ID3D10RasterizerState** ppRasterizerState) = 0;
	virtual void RSGetViewports
	(
		UINT* NumViewports,
		D3D10_VIEWPORT* pViewports
	) = 0;
	virtual void RSGetScissorRects
	(
		UINT* NumRects,
		D3D10_RECT* pRects
	) = 0;
	virtual HRESULT GetDeviceRemovedReason() = 0;
	virtual HRESULT SetExceptionMode(UINT RaiseFlags) = 0;
	virtual UINT GetExceptionMode() = 0;
	virtual HRESULT GetPrivateData
	(
		const GUID& guid,
		UINT* pDataSize,
		void* pData
	) = 0;
	virtual HRESULT SetPrivateData
	(
		const GUID& guid,
		UINT DataSize,
		const void* pData
	) = 0;
	virtual HRESULT SetPrivateDataInterface
	(
		const GUID& guid,
		const IUnknown* pData
	) = 0;
	virtual void ClearState() = 0;
	virtual void Flush() = 0;
	virtual HRESULT CreateBuffer
	(
		const D3D10_BUFFER_DESC* pDesc,
		const D3D10_SUBRESOURCE_DATA* pInitialData,
		ID3D10Buffer** ppBuffer
	) = 0;
	virtual HRESULT CreateTexture1D
	(
		const D3D10_TEXTURE1D_DESC* pDesc,
		const D3D10_SUBRESOURCE_DATA* pInitialData,
		ID3D10Texture1D** ppTexture1D
	) = 0;
	virtual HRESULT CreateTexture2D
	(
		const D3D10_TEXTURE2D_DESC* pDesc,
		const D3D10_SUBRESOURCE_DATA* pInitialData,
		ID3D10Texture2D** ppTexture2D
	) = 0;
	virtual HRESULT CreateTexture3D
	(
		const D3D10_TEXTURE3D_DESC* pDesc,
		const D3D10_SUBRESOURCE_DATA* pInitialData,
		ID3D10Texture3D** ppTexture3D
	) = 0;
	virtual HRESULT CreateShaderResourceView
	(
		ID3D10Resource* pResource,
		const D3D10_SHADER_RESOURCE_VIEW_DESC* pDesc,
		ID3D10ShaderResourceView** ppSRView
	) = 0;
	virtual HRESULT CreateRenderTargetView
	(
		ID3D10Resource* pResource,
		const D3D10_RENDER_TARGET_VIEW_DESC* pDesc,
		ID3D10RenderTargetView** ppRTView
	) = 0;
	virtual HRESULT CreateDepthStencilView
	(
		ID3D10Resource* pResource,
		const D3D10_DEPTH_STENCIL_VIEW_DESC* pDesc,
		ID3D10DepthStencilView** ppDepthStencilView
	) = 0;
	virtual HRESULT CreateInputLayout
	(
		const D3D10_INPUT_ELEMENT_DESC* pInputElementDescs,
		UINT NumElements,
		const void* pShaderBytecodeWithInputSignature,
		SIZE_T BytecodeLength,
		ID3D10InputLayout** ppInputLayout
	) = 0;
	virtual HRESULT CreateVertexShader
	(
		const void* pShaderBytecode,
		SIZE_T BytecodeLength,
		ID3D10VertexShader** ppVertexShader
	) = 0;
	virtual HRESULT CreateGeometryShader
	(
		const void* pShaderBytecode,
		SIZE_T BytecodeLength,
		ID3D10GeometryShader** ppGeometryShader
	) = 0;
	virtual HRESULT CreateGeometryShaderWithStreamOutput
	(
		const void* pShaderBytecode,
		SIZE_T BytecodeLength,
		const D3D10_SO_DECLARATION_ENTRY* pSODeclaration,
		UINT NumEntries,
		UINT OutputStreamStride,
		ID3D10GeometryShader** ppGeometryShader
	) = 0;
	virtual HRESULT CreatePixelShader
	(
		const void* pShaderBytecode,
		SIZE_T BytecodeLength,
		ID3D10PixelShader** ppPixelShader
	) = 0;
	virtual HRESULT CreateBlendState
	(
		const D3D10_BLEND_DESC* pBlendStateDesc,
		ID3D10BlendState** ppBlendState
	) = 0;
	virtual HRESULT CreateDepthStencilState
	(
		const D3D10_DEPTH_STENCIL_DESC* pDepthStencilDesc,
		ID3D10DepthStencilState** ppDepthStencilState
	) = 0;
	virtual HRESULT CreateRasterizerState
	(
		const D3D10_RASTERIZER_DESC* pRasterizerDesc,
		ID3D10RasterizerState** ppRasterizerState
	) = 0;
	virtual HRESULT CreateSamplerState
	(
		const D3D10_SAMPLER_DESC* pSamplerDesc,
		ID3D10SamplerState** ppSamplerState
	) = 0;
	virtual HRESULT CreateQuery
	(
		const D3D10_QUERY_DESC* pQueryDesc,
		ID3D10Query** ppQuery
	) = 0;
	virtual HRESULT CreatePredicate
	(
		const D3D10_QUERY_DESC* pPredicateDesc,
		ID3D10Predicate** ppPredicate
	) = 0;
	virtual HRESULT CreateCounter
	(
		const D3D10_COUNTER_DESC* pCounterDesc,
		ID3D10Counter** ppCounter
	) = 0;
	virtual HRESULT CheckFormatSupport
	(
		DXGI_FORMAT Format,
		UINT* pFormatSupport
	) = 0;
	virtual HRESULT CheckMultisampleQualityLevels
	(
		DXGI_FORMAT Format,
		UINT SampleCount,
		UINT* pNumQualityLevels
	) = 0;
	virtual void CheckCounterInfo(D3D10_COUNTER_INFO* pCounterInfo) = 0;
	virtual HRESULT CheckCounter
	(
		const D3D10_COUNTER_DESC* pDesc,
		D3D10_COUNTER_TYPE* pType,
		UINT* pActiveCounters,
		LPSTR szName,
		UINT* pNameLength,
		LPSTR szUnits,
		UINT* pUnitsLength,
		LPSTR szDescription,
		UINT* pDescriptionLength
	) = 0;
	virtual UINT GetCreationFlags() = 0;
	virtual HRESULT OpenSharedResource
	(
		HANDLE hResource,
		const IID& ReturnedInterface,
		void** ppResource
	) = 0;
	virtual void SetTextFilterSize
	(
		UINT Width,
		UINT Height
	) = 0;
	virtual void GetTextFilterSize
	(
		UINT* pWidth,
		UINT* pHeight
	) = 0;
};

static_assert(sizeof(ID3D10Device) == 8);

// ID3D10Multithread

struct __declspec(novtable) ID3D10Multithread : IUnknown
{
	virtual void Enter() = 0;
	virtual void Leave() = 0;
	virtual BOOL SetMultithreadProtected(BOOL bMTProtect) = 0;
	virtual BOOL GetMultithreadProtected() = 0;
};

static_assert(sizeof(ID3D10Multithread) == 8);

// ID3D10Blob

struct __declspec(novtable) ID3D10Blob : IUnknown
{
	virtual LPVOID GetBufferPointer() = 0;
	virtual SIZE_T GetBufferSize() = 0;
};

static_assert(sizeof(ID3D10Blob) == 8);

// ID3DInclude

struct __declspec(novtable) ID3DInclude
{
	virtual HRESULT Open
	(
		D3D_INCLUDE_TYPE IncludeType,
		LPCSTR pFileName,
		LPCVOID pParentData,
		LPCVOID* ppData,
		UINT* pBytes
	) = 0;
	virtual HRESULT Close(LPCVOID pData) = 0;
};

static_assert(sizeof(ID3DInclude) == 8);

// ID3DBlob

typedef ID3D10Blob ID3DBlob;

static_assert(TypeMatch<ID3DBlob, ID3D10Blob>::value);

static_assert(sizeof(ID3DBlob) == 8);

extern "C" HRESULT D3DCompile
(
	LPCVOID pSrcData,
	SIZE_T SrcDataSize,
	LPCSTR pSourceName,
	const D3D_SHADER_MACRO* pDefines,
	ID3DInclude* pInclude,
	LPCSTR pEntrypoint,
	LPCSTR pTarget,
	UINT Flags1,
	UINT Flags2,
	ID3DBlob** ppCode,
	ID3DBlob** ppErrorMsgs
);
extern "C" HRESULT D3D10CreateDeviceAndSwapChain
(
	IDXGIAdapter* pAdapter,
	D3D10_DRIVER_TYPE DriverType,
	HMODULE Software,
	UINT Flags,
	UINT SDKVersion,
	DXGI_SWAP_CHAIN_DESC* pSwapChainDesc,
	IDXGISwapChain** ppSwapChain,
	ID3D10Device** ppDevice
);
#pragma endregion

#else

#pragma region x86_32

struct ID3D10DeviceChild;
struct ID3D10DepthStencilState;
struct ID3D10BlendState;
struct ID3D10RasterizerState;
struct ID3D10Resource;
struct ID3D10Buffer;
struct ID3D10Texture1D;
struct ID3D10Texture2D;
struct ID3D10Texture3D;
struct ID3D10View;
struct ID3D10ShaderResourceView;
struct ID3D10RenderTargetView;
struct ID3D10DepthStencilView;
struct ID3D10VertexShader;
struct ID3D10GeometryShader;
struct ID3D10PixelShader;
struct ID3D10InputLayout;
struct ID3D10SamplerState;
struct ID3D10Asynchronous;
struct ID3D10Query;
struct ID3D10Predicate;
struct ID3D10Counter;
struct ID3D10Device;
struct ID3D10Multithread;

extern "C" const IID IID_ID3D10DeviceChild;
extern "C" const IID IID_ID3D10DepthStencilState;
extern "C" const IID IID_ID3D10BlendState;
extern "C" const IID IID_ID3D10RasterizerState;
extern "C" const IID IID_ID3D10Resource;
extern "C" const IID IID_ID3D10Buffer;
extern "C" const IID IID_ID3D10Texture1D;
extern "C" const IID IID_ID3D10Texture2D;
extern "C" const IID IID_ID3D10Texture3D;
extern "C" const IID IID_ID3D10View;
extern "C" const IID IID_ID3D10ShaderResourceView;
extern "C" const IID IID_ID3D10RenderTargetView;
extern "C" const IID IID_ID3D10DepthStencilView;
extern "C" const IID IID_ID3D10VertexShader;
extern "C" const IID IID_ID3D10GeometryShader;
extern "C" const IID IID_ID3D10PixelShader;
extern "C" const IID IID_ID3D10InputLayout;
extern "C" const IID IID_ID3D10SamplerState;
extern "C" const IID IID_ID3D10Asynchronous;
extern "C" const IID IID_ID3D10Query;
extern "C" const IID IID_ID3D10Predicate;
extern "C" const IID IID_ID3D10Counter;
extern "C" const IID IID_ID3D10Device;
extern "C" const IID IID_ID3D10Multithread;

// D3D10_RECT

typedef RECT D3D10_RECT;

static_assert(TypeMatch<D3D10_RECT, RECT>::value);

static_assert(sizeof(D3D10_RECT) == 16);

// D3D10_RESOURCE_DIMENSION

enum D3D10_RESOURCE_DIMENSION
{
	D3D10_RESOURCE_DIMENSION_UNKNOWN=0,
	D3D10_RESOURCE_DIMENSION_BUFFER=1,
	D3D10_RESOURCE_DIMENSION_TEXTURE1D=2,
	D3D10_RESOURCE_DIMENSION_TEXTURE2D=3,
	D3D10_RESOURCE_DIMENSION_TEXTURE3D=4,
};

// D3D10_MAP

enum D3D10_MAP
{
	D3D10_MAP_READ=1,
	D3D10_MAP_WRITE=2,
	D3D10_MAP_READ_WRITE=3,
	D3D10_MAP_WRITE_DISCARD=4,
	D3D10_MAP_WRITE_NO_OVERWRITE=5,
};

// D3D10_DEPTH_WRITE_MASK

enum D3D10_DEPTH_WRITE_MASK
{
	D3D10_DEPTH_WRITE_MASK_ZERO=0,
	D3D10_DEPTH_WRITE_MASK_ALL=1,
};

// D3D10_COMPARISON_FUNC

enum D3D10_COMPARISON_FUNC
{
	D3D10_COMPARISON_NEVER=1,
	D3D10_COMPARISON_LESS=2,
	D3D10_COMPARISON_EQUAL=3,
	D3D10_COMPARISON_LESS_EQUAL=4,
	D3D10_COMPARISON_GREATER=5,
	D3D10_COMPARISON_NOT_EQUAL=6,
	D3D10_COMPARISON_GREATER_EQUAL=7,
	D3D10_COMPARISON_ALWAYS=8,
};

// D3D10_STENCIL_OP

enum D3D10_STENCIL_OP
{
	D3D10_STENCIL_OP_KEEP=1,
	D3D10_STENCIL_OP_ZERO=2,
	D3D10_STENCIL_OP_REPLACE=3,
	D3D10_STENCIL_OP_INCR_SAT=4,
	D3D10_STENCIL_OP_DECR_SAT=5,
	D3D10_STENCIL_OP_INVERT=6,
	D3D10_STENCIL_OP_INCR=7,
	D3D10_STENCIL_OP_DECR=8,
};

// D3D10_BLEND

enum D3D10_BLEND
{
	D3D10_BLEND_ZERO=1,
	D3D10_BLEND_ONE=2,
	D3D10_BLEND_SRC_COLOR=3,
	D3D10_BLEND_INV_SRC_COLOR=4,
	D3D10_BLEND_SRC_ALPHA=5,
	D3D10_BLEND_INV_SRC_ALPHA=6,
	D3D10_BLEND_DEST_ALPHA=7,
	D3D10_BLEND_INV_DEST_ALPHA=8,
	D3D10_BLEND_DEST_COLOR=9,
	D3D10_BLEND_INV_DEST_COLOR=10,
	D3D10_BLEND_SRC_ALPHA_SAT=11,
	D3D10_BLEND_BLEND_FACTOR=14,
	D3D10_BLEND_INV_BLEND_FACTOR=15,
	D3D10_BLEND_SRC1_COLOR=16,
	D3D10_BLEND_INV_SRC1_COLOR=17,
	D3D10_BLEND_SRC1_ALPHA=18,
	D3D10_BLEND_INV_SRC1_ALPHA=19,
};

// D3D10_BLEND_OP

enum D3D10_BLEND_OP
{
	D3D10_BLEND_OP_ADD=1,
	D3D10_BLEND_OP_SUBTRACT=2,
	D3D10_BLEND_OP_REV_SUBTRACT=3,
	D3D10_BLEND_OP_MIN=4,
	D3D10_BLEND_OP_MAX=5,
};

// D3D10_FILL_MODE

enum D3D10_FILL_MODE
{
	D3D10_FILL_WIREFRAME=2,
	D3D10_FILL_SOLID=3,
};

// D3D10_CULL_MODE

enum D3D10_CULL_MODE
{
	D3D10_CULL_NONE=1,
	D3D10_CULL_FRONT=2,
	D3D10_CULL_BACK=3,
};

// D3D10_USAGE

enum D3D10_USAGE
{
	D3D10_USAGE_DEFAULT=0,
	D3D10_USAGE_IMMUTABLE=1,
	D3D10_USAGE_DYNAMIC=2,
	D3D10_USAGE_STAGING=3,
};

// D3D_SRV_DIMENSION

enum D3D_SRV_DIMENSION
{
	D3D_SRV_DIMENSION_UNKNOWN=0,
	D3D_SRV_DIMENSION_BUFFER=1,
	D3D_SRV_DIMENSION_TEXTURE1D=2,
	D3D_SRV_DIMENSION_TEXTURE1DARRAY=3,
	D3D_SRV_DIMENSION_TEXTURE2D=4,
	D3D_SRV_DIMENSION_TEXTURE2DARRAY=5,
	D3D_SRV_DIMENSION_TEXTURE2DMS=6,
	D3D_SRV_DIMENSION_TEXTURE2DMSARRAY=7,
	D3D_SRV_DIMENSION_TEXTURE3D=8,
	D3D_SRV_DIMENSION_TEXTURECUBE=9,
	D3D_SRV_DIMENSION_TEXTURECUBEARRAY=10,
	D3D_SRV_DIMENSION_BUFFEREX=11,
};

// D3D10_SRV_DIMENSION

enum D3D10_SRV_DIMENSION
{
	D3D10_SRV_DIMENSION_UNKNOWN=D3D_SRV_DIMENSION_UNKNOWN,
	D3D10_SRV_DIMENSION_BUFFER=D3D_SRV_DIMENSION_BUFFER,
	D3D10_SRV_DIMENSION_TEXTURE1D=D3D_SRV_DIMENSION_TEXTURE1D,
	D3D10_SRV_DIMENSION_TEXTURE1DARRAY=D3D_SRV_DIMENSION_TEXTURE1DARRAY,
	D3D10_SRV_DIMENSION_TEXTURE2D=D3D_SRV_DIMENSION_TEXTURE2D,
	D3D10_SRV_DIMENSION_TEXTURE2DARRAY=D3D_SRV_DIMENSION_TEXTURE2DARRAY,
	D3D10_SRV_DIMENSION_TEXTURE2DMS=D3D_SRV_DIMENSION_TEXTURE2DMS,
	D3D10_SRV_DIMENSION_TEXTURE2DMSARRAY=D3D_SRV_DIMENSION_TEXTURE2DMSARRAY,
	D3D10_SRV_DIMENSION_TEXTURE3D=D3D_SRV_DIMENSION_TEXTURE3D,
	D3D10_SRV_DIMENSION_TEXTURECUBE=D3D_SRV_DIMENSION_TEXTURECUBE,
};

// D3D10_1_SRV_DIMENSION

enum D3D10_1_SRV_DIMENSION
{
	D3D10_1_SRV_DIMENSION_UNKNOWN=D3D_SRV_DIMENSION_UNKNOWN,
	D3D10_1_SRV_DIMENSION_BUFFER=D3D_SRV_DIMENSION_BUFFER,
	D3D10_1_SRV_DIMENSION_TEXTURE1D=D3D_SRV_DIMENSION_TEXTURE1D,
	D3D10_1_SRV_DIMENSION_TEXTURE1DARRAY=D3D_SRV_DIMENSION_TEXTURE1DARRAY,
	D3D10_1_SRV_DIMENSION_TEXTURE2D=D3D_SRV_DIMENSION_TEXTURE2D,
	D3D10_1_SRV_DIMENSION_TEXTURE2DARRAY=D3D_SRV_DIMENSION_TEXTURE2DARRAY,
	D3D10_1_SRV_DIMENSION_TEXTURE2DMS=D3D_SRV_DIMENSION_TEXTURE2DMS,
	D3D10_1_SRV_DIMENSION_TEXTURE2DMSARRAY=D3D_SRV_DIMENSION_TEXTURE2DMSARRAY,
	D3D10_1_SRV_DIMENSION_TEXTURE3D=D3D_SRV_DIMENSION_TEXTURE3D,
	D3D10_1_SRV_DIMENSION_TEXTURECUBE=D3D_SRV_DIMENSION_TEXTURECUBE,
	D3D10_1_SRV_DIMENSION_TEXTURECUBEARRAY=D3D_SRV_DIMENSION_TEXTURECUBEARRAY,
};

// D3D11_SRV_DIMENSION

enum D3D11_SRV_DIMENSION
{
	D3D11_SRV_DIMENSION_UNKNOWN=D3D_SRV_DIMENSION_UNKNOWN,
	D3D11_SRV_DIMENSION_BUFFER=D3D_SRV_DIMENSION_BUFFER,
	D3D11_SRV_DIMENSION_TEXTURE1D=D3D_SRV_DIMENSION_TEXTURE1D,
	D3D11_SRV_DIMENSION_TEXTURE1DARRAY=D3D_SRV_DIMENSION_TEXTURE1DARRAY,
	D3D11_SRV_DIMENSION_TEXTURE2D=D3D_SRV_DIMENSION_TEXTURE2D,
	D3D11_SRV_DIMENSION_TEXTURE2DARRAY=D3D_SRV_DIMENSION_TEXTURE2DARRAY,
	D3D11_SRV_DIMENSION_TEXTURE2DMS=D3D_SRV_DIMENSION_TEXTURE2DMS,
	D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY=D3D_SRV_DIMENSION_TEXTURE2DMSARRAY,
	D3D11_SRV_DIMENSION_TEXTURE3D=D3D_SRV_DIMENSION_TEXTURE3D,
	D3D11_SRV_DIMENSION_TEXTURECUBE=D3D_SRV_DIMENSION_TEXTURECUBE,
	D3D11_SRV_DIMENSION_TEXTURECUBEARRAY=D3D_SRV_DIMENSION_TEXTURECUBEARRAY,
	D3D11_SRV_DIMENSION_BUFFEREX=D3D_SRV_DIMENSION_BUFFEREX,
};

// D3D10_RTV_DIMENSION

enum D3D10_RTV_DIMENSION
{
	D3D10_RTV_DIMENSION_UNKNOWN=0,
	D3D10_RTV_DIMENSION_BUFFER=1,
	D3D10_RTV_DIMENSION_TEXTURE1D=2,
	D3D10_RTV_DIMENSION_TEXTURE1DARRAY=3,
	D3D10_RTV_DIMENSION_TEXTURE2D=4,
	D3D10_RTV_DIMENSION_TEXTURE2DARRAY=5,
	D3D10_RTV_DIMENSION_TEXTURE2DMS=6,
	D3D10_RTV_DIMENSION_TEXTURE2DMSARRAY=7,
	D3D10_RTV_DIMENSION_TEXTURE3D=8,
};

// D3D_PRIMITIVE_TOPOLOGY

enum D3D_PRIMITIVE_TOPOLOGY
{
	D3D_PRIMITIVE_TOPOLOGY_UNDEFINED=0,
	D3D_PRIMITIVE_TOPOLOGY_POINTLIST=1,
	D3D_PRIMITIVE_TOPOLOGY_LINELIST=2,
	D3D_PRIMITIVE_TOPOLOGY_LINESTRIP=3,
	D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST=4,
	D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP=5,
	D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ=10,
	D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ=11,
	D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ=12,
	D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ=13,
	D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST=33,
	D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST=34,
	D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST=35,
	D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST=36,
	D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST=37,
	D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST=38,
	D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST=39,
	D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST=40,
	D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST=41,
	D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST=42,
	D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST=43,
	D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST=44,
	D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST=45,
	D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST=46,
	D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST=47,
	D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST=48,
	D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST=49,
	D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST=50,
	D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST=51,
	D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST=52,
	D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST=53,
	D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST=54,
	D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST=55,
	D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST=56,
	D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST=57,
	D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST=58,
	D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST=59,
	D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST=60,
	D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST=61,
	D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST=62,
	D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST=63,
	D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST=64,
};

// D3D10_PRIMITIVE_TOPOLOGY

enum D3D10_PRIMITIVE_TOPOLOGY
{
	D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED=D3D_PRIMITIVE_TOPOLOGY_UNDEFINED,
	D3D10_PRIMITIVE_TOPOLOGY_POINTLIST=D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
	D3D10_PRIMITIVE_TOPOLOGY_LINELIST=D3D_PRIMITIVE_TOPOLOGY_LINELIST,
	D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP=D3D_PRIMITIVE_TOPOLOGY_LINESTRIP,
	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST=D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP=D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
	D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ=D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
	D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ=D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ=D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ=D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
};

// D3D11_PRIMITIVE_TOPOLOGY

enum D3D11_PRIMITIVE_TOPOLOGY
{
	D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED=D3D_PRIMITIVE_TOPOLOGY_UNDEFINED,
	D3D11_PRIMITIVE_TOPOLOGY_POINTLIST=D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
	D3D11_PRIMITIVE_TOPOLOGY_LINELIST=D3D_PRIMITIVE_TOPOLOGY_LINELIST,
	D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP=D3D_PRIMITIVE_TOPOLOGY_LINESTRIP,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST=D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP=D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
	D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ=D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
	D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ=D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ=D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ=D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
	D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST=D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST,
};

// D3D10_DSV_DIMENSION

enum D3D10_DSV_DIMENSION
{
	D3D10_DSV_DIMENSION_UNKNOWN=0,
	D3D10_DSV_DIMENSION_TEXTURE1D=1,
	D3D10_DSV_DIMENSION_TEXTURE1DARRAY=2,
	D3D10_DSV_DIMENSION_TEXTURE2D=3,
	D3D10_DSV_DIMENSION_TEXTURE2DARRAY=4,
	D3D10_DSV_DIMENSION_TEXTURE2DMS=5,
	D3D10_DSV_DIMENSION_TEXTURE2DMSARRAY=6,
};

// D3D10_FILTER

enum D3D10_FILTER
{
	D3D10_FILTER_MIN_MAG_MIP_POINT=0,
	D3D10_FILTER_MIN_MAG_POINT_MIP_LINEAR=0x1,
	D3D10_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT=0x4,
	D3D10_FILTER_MIN_POINT_MAG_MIP_LINEAR=0x5,
	D3D10_FILTER_MIN_LINEAR_MAG_MIP_POINT=0x10,
	D3D10_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR=0x11,
	D3D10_FILTER_MIN_MAG_LINEAR_MIP_POINT=0x14,
	D3D10_FILTER_MIN_MAG_MIP_LINEAR=0x15,
	D3D10_FILTER_ANISOTROPIC=0x55,
	D3D10_FILTER_COMPARISON_MIN_MAG_MIP_POINT=0x80,
	D3D10_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR=0x81,
	D3D10_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT=0x84,
	D3D10_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR=0x85,
	D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT=0x90,
	D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR=0x91,
	D3D10_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT=0x94,
	D3D10_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR=0x95,
	D3D10_FILTER_COMPARISON_ANISOTROPIC=0xd5,
	D3D10_FILTER_TEXT_1BIT=0x80000000,
};

// D3D10_TEXTURE_ADDRESS_MODE

enum D3D10_TEXTURE_ADDRESS_MODE
{
	D3D10_TEXTURE_ADDRESS_WRAP=1,
	D3D10_TEXTURE_ADDRESS_MIRROR=2,
	D3D10_TEXTURE_ADDRESS_CLAMP=3,
	D3D10_TEXTURE_ADDRESS_BORDER=4,
	D3D10_TEXTURE_ADDRESS_MIRROR_ONCE=5,
};

// D3D10_COUNTER

enum D3D10_COUNTER
{
	D3D10_COUNTER_GPU_IDLE=0,
	D3D10_COUNTER_VERTEX_PROCESSING=(D3D10_COUNTER_GPU_IDLE+1),
	D3D10_COUNTER_GEOMETRY_PROCESSING=(D3D10_COUNTER_VERTEX_PROCESSING+1),
	D3D10_COUNTER_PIXEL_PROCESSING=(D3D10_COUNTER_GEOMETRY_PROCESSING+1),
	D3D10_COUNTER_OTHER_GPU_PROCESSING=(D3D10_COUNTER_PIXEL_PROCESSING+1),
	D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION=(D3D10_COUNTER_OTHER_GPU_PROCESSING+1),
	D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION=(D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION+1),
	D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION=(D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION+1),
	D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION=(D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION+1),
	D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION=(D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION+1),
	D3D10_COUNTER_VS_MEMORY_LIMITED=(D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION+1),
	D3D10_COUNTER_VS_COMPUTATION_LIMITED=(D3D10_COUNTER_VS_MEMORY_LIMITED+1),
	D3D10_COUNTER_GS_MEMORY_LIMITED=(D3D10_COUNTER_VS_COMPUTATION_LIMITED+1),
	D3D10_COUNTER_GS_COMPUTATION_LIMITED=(D3D10_COUNTER_GS_MEMORY_LIMITED+1),
	D3D10_COUNTER_PS_MEMORY_LIMITED=(D3D10_COUNTER_GS_COMPUTATION_LIMITED+1),
	D3D10_COUNTER_PS_COMPUTATION_LIMITED=(D3D10_COUNTER_PS_MEMORY_LIMITED+1),
	D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE=(D3D10_COUNTER_PS_COMPUTATION_LIMITED+1),
	D3D10_COUNTER_TEXTURE_CACHE_HIT_RATE=(D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE+1),
	D3D10_COUNTER_DEVICE_DEPENDENT_0=0x40000000,
};

// D3D10_QUERY

enum D3D10_QUERY
{
	D3D10_QUERY_EVENT=0,
	D3D10_QUERY_OCCLUSION=(D3D10_QUERY_EVENT+1),
	D3D10_QUERY_TIMESTAMP=(D3D10_QUERY_OCCLUSION+1),
	D3D10_QUERY_TIMESTAMP_DISJOINT=(D3D10_QUERY_TIMESTAMP+1),
	D3D10_QUERY_PIPELINE_STATISTICS=(D3D10_QUERY_TIMESTAMP_DISJOINT+1),
	D3D10_QUERY_OCCLUSION_PREDICATE=(D3D10_QUERY_PIPELINE_STATISTICS+1),
	D3D10_QUERY_SO_STATISTICS=(D3D10_QUERY_OCCLUSION_PREDICATE+1),
	D3D10_QUERY_SO_OVERFLOW_PREDICATE=(D3D10_QUERY_SO_STATISTICS+1),
};

// D3D10_COUNTER_TYPE

enum D3D10_COUNTER_TYPE
{
	D3D10_COUNTER_TYPE_FLOAT32=0,
	D3D10_COUNTER_TYPE_UINT16=(D3D10_COUNTER_TYPE_FLOAT32+1),
	D3D10_COUNTER_TYPE_UINT32=(D3D10_COUNTER_TYPE_UINT16+1),
	D3D10_COUNTER_TYPE_UINT64=(D3D10_COUNTER_TYPE_UINT32+1),
};

// D3D10_INPUT_CLASSIFICATION

enum D3D10_INPUT_CLASSIFICATION
{
	D3D10_INPUT_PER_VERTEX_DATA=0,
	D3D10_INPUT_PER_INSTANCE_DATA=1,
};

// D3D10_BIND_FLAG

enum D3D10_BIND_FLAG
{
	D3D10_BIND_VERTEX_BUFFER=0x1L,
	D3D10_BIND_INDEX_BUFFER=0x2L,
	D3D10_BIND_CONSTANT_BUFFER=0x4L,
	D3D10_BIND_SHADER_RESOURCE=0x8L,
	D3D10_BIND_STREAM_OUTPUT=0x10L,
	D3D10_BIND_RENDER_TARGET=0x20L,
	D3D10_BIND_DEPTH_STENCIL=0x40L,
};

// D3D10_CPU_ACCESS_FLAG

enum D3D10_CPU_ACCESS_FLAG
{
	D3D10_CPU_ACCESS_WRITE=0x10000L,
	D3D10_CPU_ACCESS_READ=0x20000L,
};

enum
{
	D3D10_VIEWPORT_AND_SCISSORRECT_MAX_INDEX=15,
	D3D10_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE=16,
};

// D3D_INCLUDE_TYPE

enum D3D_INCLUDE_TYPE
{
	D3D_INCLUDE_LOCAL=0,
	D3D_INCLUDE_SYSTEM=(D3D_INCLUDE_LOCAL+1),
	D3D10_INCLUDE_LOCAL=D3D_INCLUDE_LOCAL,
	D3D10_INCLUDE_SYSTEM=D3D_INCLUDE_SYSTEM,
	D3D_INCLUDE_FORCE_DWORD=0x7fffffff,
};

// D3D10_COLOR_WRITE_ENABLE

enum D3D10_COLOR_WRITE_ENABLE
{
	D3D10_COLOR_WRITE_ENABLE_RED=1,
	D3D10_COLOR_WRITE_ENABLE_GREEN=2,
	D3D10_COLOR_WRITE_ENABLE_BLUE=4,
	D3D10_COLOR_WRITE_ENABLE_ALPHA=8,
	D3D10_COLOR_WRITE_ENABLE_ALL=(((D3D10_COLOR_WRITE_ENABLE_RED|D3D10_COLOR_WRITE_ENABLE_GREEN)|D3D10_COLOR_WRITE_ENABLE_BLUE)|D3D10_COLOR_WRITE_ENABLE_ALPHA),
};

// D3D10_DRIVER_TYPE

enum D3D10_DRIVER_TYPE
{
	D3D10_DRIVER_TYPE_HARDWARE=0,
	D3D10_DRIVER_TYPE_REFERENCE=1,
	D3D10_DRIVER_TYPE_NULL=2,
	D3D10_DRIVER_TYPE_SOFTWARE=3,
	D3D10_DRIVER_TYPE_WARP=5,
};

#pragma pack(push, 1)

// D3D10_DEPTH_STENCILOP_DESC

struct D3D10_DEPTH_STENCILOP_DESC
{
	D3D10_STENCIL_OP StencilFailOp; // 0
	D3D10_STENCIL_OP StencilDepthFailOp; // 4
	D3D10_STENCIL_OP StencilPassOp; // 8
	D3D10_COMPARISON_FUNC StencilFunc; // 0xC
};

static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCILOP_DESC::StencilFailOp), D3D10_STENCIL_OP>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCILOP_DESC::StencilDepthFailOp), D3D10_STENCIL_OP>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCILOP_DESC::StencilPassOp), D3D10_STENCIL_OP>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCILOP_DESC::StencilFunc), D3D10_COMPARISON_FUNC>::value);

static_assert(offsetof(D3D10_DEPTH_STENCILOP_DESC, StencilFailOp) == 0);
static_assert(offsetof(D3D10_DEPTH_STENCILOP_DESC, StencilDepthFailOp) == 4);
static_assert(offsetof(D3D10_DEPTH_STENCILOP_DESC, StencilPassOp) == 8);
static_assert(offsetof(D3D10_DEPTH_STENCILOP_DESC, StencilFunc) == 0xC);

static_assert(sizeof(D3D10_DEPTH_STENCILOP_DESC) == 16);

// D3D10_DEPTH_STENCIL_DESC

struct D3D10_DEPTH_STENCIL_DESC
{
	BOOL DepthEnable; // 0
	D3D10_DEPTH_WRITE_MASK DepthWriteMask; // 4
	D3D10_COMPARISON_FUNC DepthFunc; // 8
	BOOL StencilEnable; // 0xC
	UINT8 StencilReadMask; // 0x10
	UINT8 StencilWriteMask; // 0x11
	_(2);
	D3D10_DEPTH_STENCILOP_DESC FrontFace; // 0x14
	D3D10_DEPTH_STENCILOP_DESC BackFace; // 0x24
};

static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_DESC::DepthEnable), BOOL>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_DESC::DepthWriteMask), D3D10_DEPTH_WRITE_MASK>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_DESC::DepthFunc), D3D10_COMPARISON_FUNC>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_DESC::StencilEnable), BOOL>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_DESC::StencilReadMask), UINT8>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_DESC::StencilWriteMask), UINT8>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_DESC::FrontFace), D3D10_DEPTH_STENCILOP_DESC>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_DESC::BackFace), D3D10_DEPTH_STENCILOP_DESC>::value);

static_assert(offsetof(D3D10_DEPTH_STENCIL_DESC, DepthEnable) == 0);
static_assert(offsetof(D3D10_DEPTH_STENCIL_DESC, DepthWriteMask) == 4);
static_assert(offsetof(D3D10_DEPTH_STENCIL_DESC, DepthFunc) == 8);
static_assert(offsetof(D3D10_DEPTH_STENCIL_DESC, StencilEnable) == 0xC);
static_assert(offsetof(D3D10_DEPTH_STENCIL_DESC, StencilReadMask) == 0x10);
static_assert(offsetof(D3D10_DEPTH_STENCIL_DESC, StencilWriteMask) == 0x11);
static_assert(offsetof(D3D10_DEPTH_STENCIL_DESC, FrontFace) == 0x14);
static_assert(offsetof(D3D10_DEPTH_STENCIL_DESC, BackFace) == 0x24);

static_assert(sizeof(D3D10_DEPTH_STENCIL_DESC) == 52);

// D3D10_BLEND_DESC

struct D3D10_BLEND_DESC
{
	BOOL AlphaToCoverageEnable; // 0
	BOOL BlendEnable[8]; // 4
	D3D10_BLEND SrcBlend; // 0x24
	D3D10_BLEND DestBlend; // 0x28
	D3D10_BLEND_OP BlendOp; // 0x2C
	D3D10_BLEND SrcBlendAlpha; // 0x30
	D3D10_BLEND DestBlendAlpha; // 0x34
	D3D10_BLEND_OP BlendOpAlpha; // 0x38
	UINT8 RenderTargetWriteMask[8]; // 0x3C
};

static_assert(TypeMatch<decltype(D3D10_BLEND_DESC::AlphaToCoverageEnable), BOOL>::value);
static_assert(TypeMatch<decltype(D3D10_BLEND_DESC::BlendEnable), BOOL[8]>::value);
static_assert(TypeMatch<decltype(D3D10_BLEND_DESC::SrcBlend), D3D10_BLEND>::value);
static_assert(TypeMatch<decltype(D3D10_BLEND_DESC::DestBlend), D3D10_BLEND>::value);
static_assert(TypeMatch<decltype(D3D10_BLEND_DESC::BlendOp), D3D10_BLEND_OP>::value);
static_assert(TypeMatch<decltype(D3D10_BLEND_DESC::SrcBlendAlpha), D3D10_BLEND>::value);
static_assert(TypeMatch<decltype(D3D10_BLEND_DESC::DestBlendAlpha), D3D10_BLEND>::value);
static_assert(TypeMatch<decltype(D3D10_BLEND_DESC::BlendOpAlpha), D3D10_BLEND_OP>::value);
static_assert(TypeMatch<decltype(D3D10_BLEND_DESC::RenderTargetWriteMask), UINT8[8]>::value);

static_assert(offsetof(D3D10_BLEND_DESC, AlphaToCoverageEnable) == 0);
static_assert(offsetof(D3D10_BLEND_DESC, BlendEnable) == 4);
static_assert(offsetof(D3D10_BLEND_DESC, SrcBlend) == 0x24);
static_assert(offsetof(D3D10_BLEND_DESC, DestBlend) == 0x28);
static_assert(offsetof(D3D10_BLEND_DESC, BlendOp) == 0x2C);
static_assert(offsetof(D3D10_BLEND_DESC, SrcBlendAlpha) == 0x30);
static_assert(offsetof(D3D10_BLEND_DESC, DestBlendAlpha) == 0x34);
static_assert(offsetof(D3D10_BLEND_DESC, BlendOpAlpha) == 0x38);
static_assert(offsetof(D3D10_BLEND_DESC, RenderTargetWriteMask) == 0x3C);

static_assert(sizeof(D3D10_BLEND_DESC) == 68);

// D3D10_RASTERIZER_DESC

struct D3D10_RASTERIZER_DESC
{
	D3D10_FILL_MODE FillMode; // 0
	D3D10_CULL_MODE CullMode; // 4
	BOOL FrontCounterClockwise; // 8
	INT DepthBias; // 0xC
	FLOAT DepthBiasClamp; // 0x10
	FLOAT SlopeScaledDepthBias; // 0x14
	BOOL DepthClipEnable; // 0x18
	BOOL ScissorEnable; // 0x1C
	BOOL MultisampleEnable; // 0x20
	BOOL AntialiasedLineEnable; // 0x24
};

static_assert(TypeMatch<decltype(D3D10_RASTERIZER_DESC::FillMode), D3D10_FILL_MODE>::value);
static_assert(TypeMatch<decltype(D3D10_RASTERIZER_DESC::CullMode), D3D10_CULL_MODE>::value);
static_assert(TypeMatch<decltype(D3D10_RASTERIZER_DESC::FrontCounterClockwise), BOOL>::value);
static_assert(TypeMatch<decltype(D3D10_RASTERIZER_DESC::DepthBias), INT>::value);
static_assert(TypeMatch<decltype(D3D10_RASTERIZER_DESC::DepthBiasClamp), FLOAT>::value);
static_assert(TypeMatch<decltype(D3D10_RASTERIZER_DESC::SlopeScaledDepthBias), FLOAT>::value);
static_assert(TypeMatch<decltype(D3D10_RASTERIZER_DESC::DepthClipEnable), BOOL>::value);
static_assert(TypeMatch<decltype(D3D10_RASTERIZER_DESC::ScissorEnable), BOOL>::value);
static_assert(TypeMatch<decltype(D3D10_RASTERIZER_DESC::MultisampleEnable), BOOL>::value);
static_assert(TypeMatch<decltype(D3D10_RASTERIZER_DESC::AntialiasedLineEnable), BOOL>::value);

static_assert(offsetof(D3D10_RASTERIZER_DESC, FillMode) == 0);
static_assert(offsetof(D3D10_RASTERIZER_DESC, CullMode) == 4);
static_assert(offsetof(D3D10_RASTERIZER_DESC, FrontCounterClockwise) == 8);
static_assert(offsetof(D3D10_RASTERIZER_DESC, DepthBias) == 0xC);
static_assert(offsetof(D3D10_RASTERIZER_DESC, DepthBiasClamp) == 0x10);
static_assert(offsetof(D3D10_RASTERIZER_DESC, SlopeScaledDepthBias) == 0x14);
static_assert(offsetof(D3D10_RASTERIZER_DESC, DepthClipEnable) == 0x18);
static_assert(offsetof(D3D10_RASTERIZER_DESC, ScissorEnable) == 0x1C);
static_assert(offsetof(D3D10_RASTERIZER_DESC, MultisampleEnable) == 0x20);
static_assert(offsetof(D3D10_RASTERIZER_DESC, AntialiasedLineEnable) == 0x24);

static_assert(sizeof(D3D10_RASTERIZER_DESC) == 40);

// D3D10_BUFFER_DESC

struct D3D10_BUFFER_DESC
{
	UINT ByteWidth; // 0
	D3D10_USAGE Usage; // 4
	UINT BindFlags; // 8
	UINT CPUAccessFlags; // 0xC
	UINT MiscFlags; // 0x10
};

static_assert(TypeMatch<decltype(D3D10_BUFFER_DESC::ByteWidth), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BUFFER_DESC::Usage), D3D10_USAGE>::value);
static_assert(TypeMatch<decltype(D3D10_BUFFER_DESC::BindFlags), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BUFFER_DESC::CPUAccessFlags), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BUFFER_DESC::MiscFlags), UINT>::value);

static_assert(offsetof(D3D10_BUFFER_DESC, ByteWidth) == 0);
static_assert(offsetof(D3D10_BUFFER_DESC, Usage) == 4);
static_assert(offsetof(D3D10_BUFFER_DESC, BindFlags) == 8);
static_assert(offsetof(D3D10_BUFFER_DESC, CPUAccessFlags) == 0xC);
static_assert(offsetof(D3D10_BUFFER_DESC, MiscFlags) == 0x10);

static_assert(sizeof(D3D10_BUFFER_DESC) == 20);

// D3D10_TEXTURE1D_DESC

struct D3D10_TEXTURE1D_DESC
{
	UINT Width; // 0
	UINT MipLevels; // 4
	UINT ArraySize; // 8
	DXGI_FORMAT Format; // 0xC
	D3D10_USAGE Usage; // 0x10
	UINT BindFlags; // 0x14
	UINT CPUAccessFlags; // 0x18
	UINT MiscFlags; // 0x1C
};

static_assert(TypeMatch<decltype(D3D10_TEXTURE1D_DESC::Width), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE1D_DESC::MipLevels), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE1D_DESC::ArraySize), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE1D_DESC::Format), DXGI_FORMAT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE1D_DESC::Usage), D3D10_USAGE>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE1D_DESC::BindFlags), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE1D_DESC::CPUAccessFlags), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE1D_DESC::MiscFlags), UINT>::value);

static_assert(offsetof(D3D10_TEXTURE1D_DESC, Width) == 0);
static_assert(offsetof(D3D10_TEXTURE1D_DESC, MipLevels) == 4);
static_assert(offsetof(D3D10_TEXTURE1D_DESC, ArraySize) == 8);
static_assert(offsetof(D3D10_TEXTURE1D_DESC, Format) == 0xC);
static_assert(offsetof(D3D10_TEXTURE1D_DESC, Usage) == 0x10);
static_assert(offsetof(D3D10_TEXTURE1D_DESC, BindFlags) == 0x14);
static_assert(offsetof(D3D10_TEXTURE1D_DESC, CPUAccessFlags) == 0x18);
static_assert(offsetof(D3D10_TEXTURE1D_DESC, MiscFlags) == 0x1C);

static_assert(sizeof(D3D10_TEXTURE1D_DESC) == 32);

// D3D10_MAPPED_TEXTURE2D

struct D3D10_MAPPED_TEXTURE2D
{
	void* pData; // 0
	UINT RowPitch; // 4
};

static_assert(TypeMatch<decltype(D3D10_MAPPED_TEXTURE2D::pData), void*>::value);
static_assert(TypeMatch<decltype(D3D10_MAPPED_TEXTURE2D::RowPitch), UINT>::value);

static_assert(offsetof(D3D10_MAPPED_TEXTURE2D, pData) == 0);
static_assert(offsetof(D3D10_MAPPED_TEXTURE2D, RowPitch) == 4);

static_assert(sizeof(D3D10_MAPPED_TEXTURE2D) == 8);

// D3D10_TEXTURE2D_DESC

struct D3D10_TEXTURE2D_DESC
{
	UINT Width; // 0
	UINT Height; // 4
	UINT MipLevels; // 8
	UINT ArraySize; // 0xC
	DXGI_FORMAT Format; // 0x10
	DXGI_SAMPLE_DESC SampleDesc; // 0x14
	D3D10_USAGE Usage; // 0x1C
	UINT BindFlags; // 0x20
	UINT CPUAccessFlags; // 0x24
	UINT MiscFlags; // 0x28
};

static_assert(TypeMatch<decltype(D3D10_TEXTURE2D_DESC::Width), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE2D_DESC::Height), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE2D_DESC::MipLevels), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE2D_DESC::ArraySize), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE2D_DESC::Format), DXGI_FORMAT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE2D_DESC::SampleDesc), DXGI_SAMPLE_DESC>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE2D_DESC::Usage), D3D10_USAGE>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE2D_DESC::BindFlags), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE2D_DESC::CPUAccessFlags), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE2D_DESC::MiscFlags), UINT>::value);

static_assert(offsetof(D3D10_TEXTURE2D_DESC, Width) == 0);
static_assert(offsetof(D3D10_TEXTURE2D_DESC, Height) == 4);
static_assert(offsetof(D3D10_TEXTURE2D_DESC, MipLevels) == 8);
static_assert(offsetof(D3D10_TEXTURE2D_DESC, ArraySize) == 0xC);
static_assert(offsetof(D3D10_TEXTURE2D_DESC, Format) == 0x10);
static_assert(offsetof(D3D10_TEXTURE2D_DESC, SampleDesc) == 0x14);
static_assert(offsetof(D3D10_TEXTURE2D_DESC, Usage) == 0x1C);
static_assert(offsetof(D3D10_TEXTURE2D_DESC, BindFlags) == 0x20);
static_assert(offsetof(D3D10_TEXTURE2D_DESC, CPUAccessFlags) == 0x24);
static_assert(offsetof(D3D10_TEXTURE2D_DESC, MiscFlags) == 0x28);

static_assert(sizeof(D3D10_TEXTURE2D_DESC) == 44);

// D3D10_MAPPED_TEXTURE3D

struct D3D10_MAPPED_TEXTURE3D
{
	void* pData; // 0
	UINT RowPitch; // 4
	UINT DepthPitch; // 8
};

static_assert(TypeMatch<decltype(D3D10_MAPPED_TEXTURE3D::pData), void*>::value);
static_assert(TypeMatch<decltype(D3D10_MAPPED_TEXTURE3D::RowPitch), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_MAPPED_TEXTURE3D::DepthPitch), UINT>::value);

static_assert(offsetof(D3D10_MAPPED_TEXTURE3D, pData) == 0);
static_assert(offsetof(D3D10_MAPPED_TEXTURE3D, RowPitch) == 4);
static_assert(offsetof(D3D10_MAPPED_TEXTURE3D, DepthPitch) == 8);

static_assert(sizeof(D3D10_MAPPED_TEXTURE3D) == 12);

// D3D10_BUFFER_SRV

struct D3D10_BUFFER_SRV
{
	union
	{
		UINT FirstElement; // 0
		UINT ElementOffset; // 0
	}; // 0
	union
	{
		UINT NumElements; // 4
		UINT ElementWidth; // 4
	}; // 4
};

static_assert(TypeMatch<decltype(D3D10_BUFFER_SRV::FirstElement), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BUFFER_SRV::ElementOffset), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BUFFER_SRV::NumElements), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BUFFER_SRV::ElementWidth), UINT>::value);

static_assert(offsetof(D3D10_BUFFER_SRV, FirstElement) == 0);
static_assert(offsetof(D3D10_BUFFER_SRV, ElementOffset) == 0);
static_assert(offsetof(D3D10_BUFFER_SRV, NumElements) == 4);
static_assert(offsetof(D3D10_BUFFER_SRV, ElementWidth) == 4);

static_assert(sizeof(D3D10_BUFFER_SRV) == 8);

// D3D10_TEX1D_SRV

struct D3D10_TEX1D_SRV
{
	UINT MostDetailedMip; // 0
	UINT MipLevels; // 4
};

static_assert(TypeMatch<decltype(D3D10_TEX1D_SRV::MostDetailedMip), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX1D_SRV::MipLevels), UINT>::value);

static_assert(offsetof(D3D10_TEX1D_SRV, MostDetailedMip) == 0);
static_assert(offsetof(D3D10_TEX1D_SRV, MipLevels) == 4);

static_assert(sizeof(D3D10_TEX1D_SRV) == 8);

// D3D10_TEX1D_ARRAY_SRV

struct D3D10_TEX1D_ARRAY_SRV
{
	UINT MostDetailedMip; // 0
	UINT MipLevels; // 4
	UINT FirstArraySlice; // 8
	UINT ArraySize; // 0xC
};

static_assert(TypeMatch<decltype(D3D10_TEX1D_ARRAY_SRV::MostDetailedMip), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX1D_ARRAY_SRV::MipLevels), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX1D_ARRAY_SRV::FirstArraySlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX1D_ARRAY_SRV::ArraySize), UINT>::value);

static_assert(offsetof(D3D10_TEX1D_ARRAY_SRV, MostDetailedMip) == 0);
static_assert(offsetof(D3D10_TEX1D_ARRAY_SRV, MipLevels) == 4);
static_assert(offsetof(D3D10_TEX1D_ARRAY_SRV, FirstArraySlice) == 8);
static_assert(offsetof(D3D10_TEX1D_ARRAY_SRV, ArraySize) == 0xC);

static_assert(sizeof(D3D10_TEX1D_ARRAY_SRV) == 16);

// D3D10_TEX2D_SRV

struct D3D10_TEX2D_SRV
{
	UINT MostDetailedMip; // 0
	UINT MipLevels; // 4
};

static_assert(TypeMatch<decltype(D3D10_TEX2D_SRV::MostDetailedMip), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2D_SRV::MipLevels), UINT>::value);

static_assert(offsetof(D3D10_TEX2D_SRV, MostDetailedMip) == 0);
static_assert(offsetof(D3D10_TEX2D_SRV, MipLevels) == 4);

static_assert(sizeof(D3D10_TEX2D_SRV) == 8);

// D3D10_TEX2D_ARRAY_SRV

struct D3D10_TEX2D_ARRAY_SRV
{
	UINT MostDetailedMip; // 0
	UINT MipLevels; // 4
	UINT FirstArraySlice; // 8
	UINT ArraySize; // 0xC
};

static_assert(TypeMatch<decltype(D3D10_TEX2D_ARRAY_SRV::MostDetailedMip), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2D_ARRAY_SRV::MipLevels), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2D_ARRAY_SRV::FirstArraySlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2D_ARRAY_SRV::ArraySize), UINT>::value);

static_assert(offsetof(D3D10_TEX2D_ARRAY_SRV, MostDetailedMip) == 0);
static_assert(offsetof(D3D10_TEX2D_ARRAY_SRV, MipLevels) == 4);
static_assert(offsetof(D3D10_TEX2D_ARRAY_SRV, FirstArraySlice) == 8);
static_assert(offsetof(D3D10_TEX2D_ARRAY_SRV, ArraySize) == 0xC);

static_assert(sizeof(D3D10_TEX2D_ARRAY_SRV) == 16);

// D3D10_TEX3D_SRV

struct D3D10_TEX3D_SRV
{
	UINT MostDetailedMip; // 0
	UINT MipLevels; // 4
};

static_assert(TypeMatch<decltype(D3D10_TEX3D_SRV::MostDetailedMip), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX3D_SRV::MipLevels), UINT>::value);

static_assert(offsetof(D3D10_TEX3D_SRV, MostDetailedMip) == 0);
static_assert(offsetof(D3D10_TEX3D_SRV, MipLevels) == 4);

static_assert(sizeof(D3D10_TEX3D_SRV) == 8);

// D3D10_TEXCUBE_SRV

struct D3D10_TEXCUBE_SRV
{
	UINT MostDetailedMip; // 0
	UINT MipLevels; // 4
};

static_assert(TypeMatch<decltype(D3D10_TEXCUBE_SRV::MostDetailedMip), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXCUBE_SRV::MipLevels), UINT>::value);

static_assert(offsetof(D3D10_TEXCUBE_SRV, MostDetailedMip) == 0);
static_assert(offsetof(D3D10_TEXCUBE_SRV, MipLevels) == 4);

static_assert(sizeof(D3D10_TEXCUBE_SRV) == 8);

// D3D10_TEX2DMS_SRV

struct D3D10_TEX2DMS_SRV
{
	UINT UnusedField_NothingToDefine; // 0
};

static_assert(TypeMatch<decltype(D3D10_TEX2DMS_SRV::UnusedField_NothingToDefine), UINT>::value);

static_assert(offsetof(D3D10_TEX2DMS_SRV, UnusedField_NothingToDefine) == 0);

static_assert(sizeof(D3D10_TEX2DMS_SRV) == 4);

// D3D10_TEX2DMS_ARRAY_SRV

struct D3D10_TEX2DMS_ARRAY_SRV
{
	UINT FirstArraySlice; // 0
	UINT ArraySize; // 4
};

static_assert(TypeMatch<decltype(D3D10_TEX2DMS_ARRAY_SRV::FirstArraySlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2DMS_ARRAY_SRV::ArraySize), UINT>::value);

static_assert(offsetof(D3D10_TEX2DMS_ARRAY_SRV, FirstArraySlice) == 0);
static_assert(offsetof(D3D10_TEX2DMS_ARRAY_SRV, ArraySize) == 4);

static_assert(sizeof(D3D10_TEX2DMS_ARRAY_SRV) == 8);

// D3D10_SHADER_RESOURCE_VIEW_DESC

struct D3D10_SHADER_RESOURCE_VIEW_DESC
{
	DXGI_FORMAT Format; // 0
	D3D10_SRV_DIMENSION ViewDimension; // 4
	union
	{
		D3D10_BUFFER_SRV Buffer; // 8
		D3D10_TEX1D_SRV Texture1D; // 8
		D3D10_TEX1D_ARRAY_SRV Texture1DArray; // 8
		D3D10_TEX2D_SRV Texture2D; // 8
		D3D10_TEX2D_ARRAY_SRV Texture2DArray; // 8
		D3D10_TEX2DMS_SRV Texture2DMS; // 8
		D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray; // 8
		D3D10_TEX3D_SRV Texture3D; // 8
		D3D10_TEXCUBE_SRV TextureCube; // 8
	}; // 8
};

static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::Format), DXGI_FORMAT>::value);
static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::ViewDimension), D3D10_SRV_DIMENSION>::value);
static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::Buffer), D3D10_BUFFER_SRV>::value);
static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::Texture1D), D3D10_TEX1D_SRV>::value);
static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::Texture1DArray), D3D10_TEX1D_ARRAY_SRV>::value);
static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::Texture2D), D3D10_TEX2D_SRV>::value);
static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::Texture2DArray), D3D10_TEX2D_ARRAY_SRV>::value);
static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::Texture2DMS), D3D10_TEX2DMS_SRV>::value);
static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::Texture2DMSArray), D3D10_TEX2DMS_ARRAY_SRV>::value);
static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::Texture3D), D3D10_TEX3D_SRV>::value);
static_assert(TypeMatch<decltype(D3D10_SHADER_RESOURCE_VIEW_DESC::TextureCube), D3D10_TEXCUBE_SRV>::value);

static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, Format) == 0);
static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, ViewDimension) == 4);
static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, Buffer) == 8);
static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, Texture1D) == 8);
static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, Texture1DArray) == 8);
static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, Texture2D) == 8);
static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, Texture2DArray) == 8);
static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, Texture2DMS) == 8);
static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, Texture2DMSArray) == 8);
static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, Texture3D) == 8);
static_assert(offsetof(D3D10_SHADER_RESOURCE_VIEW_DESC, TextureCube) == 8);

static_assert(sizeof(D3D10_SHADER_RESOURCE_VIEW_DESC) == 24);

// D3D10_TEXTURE3D_DESC

struct D3D10_TEXTURE3D_DESC
{
	UINT Width; // 0
	UINT Height; // 4
	UINT Depth; // 8
	UINT MipLevels; // 0xC
	DXGI_FORMAT Format; // 0x10
	D3D10_USAGE Usage; // 0x14
	UINT BindFlags; // 0x18
	UINT CPUAccessFlags; // 0x1C
	UINT MiscFlags; // 0x20
};

static_assert(TypeMatch<decltype(D3D10_TEXTURE3D_DESC::Width), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE3D_DESC::Height), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE3D_DESC::Depth), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE3D_DESC::MipLevels), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE3D_DESC::Format), DXGI_FORMAT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE3D_DESC::Usage), D3D10_USAGE>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE3D_DESC::BindFlags), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE3D_DESC::CPUAccessFlags), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEXTURE3D_DESC::MiscFlags), UINT>::value);

static_assert(offsetof(D3D10_TEXTURE3D_DESC, Width) == 0);
static_assert(offsetof(D3D10_TEXTURE3D_DESC, Height) == 4);
static_assert(offsetof(D3D10_TEXTURE3D_DESC, Depth) == 8);
static_assert(offsetof(D3D10_TEXTURE3D_DESC, MipLevels) == 0xC);
static_assert(offsetof(D3D10_TEXTURE3D_DESC, Format) == 0x10);
static_assert(offsetof(D3D10_TEXTURE3D_DESC, Usage) == 0x14);
static_assert(offsetof(D3D10_TEXTURE3D_DESC, BindFlags) == 0x18);
static_assert(offsetof(D3D10_TEXTURE3D_DESC, CPUAccessFlags) == 0x1C);
static_assert(offsetof(D3D10_TEXTURE3D_DESC, MiscFlags) == 0x20);

static_assert(sizeof(D3D10_TEXTURE3D_DESC) == 36);

// D3D10_BUFFER_RTV

struct D3D10_BUFFER_RTV
{
	union
	{
		UINT FirstElement; // 0
		UINT ElementOffset; // 0
	}; // 0
	union
	{
		UINT NumElements; // 4
		UINT ElementWidth; // 4
	}; // 4
};

static_assert(TypeMatch<decltype(D3D10_BUFFER_RTV::FirstElement), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BUFFER_RTV::ElementOffset), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BUFFER_RTV::NumElements), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BUFFER_RTV::ElementWidth), UINT>::value);

static_assert(offsetof(D3D10_BUFFER_RTV, FirstElement) == 0);
static_assert(offsetof(D3D10_BUFFER_RTV, ElementOffset) == 0);
static_assert(offsetof(D3D10_BUFFER_RTV, NumElements) == 4);
static_assert(offsetof(D3D10_BUFFER_RTV, ElementWidth) == 4);

static_assert(sizeof(D3D10_BUFFER_RTV) == 8);

// D3D10_TEX1D_RTV

struct D3D10_TEX1D_RTV
{
	UINT MipSlice; // 0
};

static_assert(TypeMatch<decltype(D3D10_TEX1D_RTV::MipSlice), UINT>::value);

static_assert(offsetof(D3D10_TEX1D_RTV, MipSlice) == 0);

static_assert(sizeof(D3D10_TEX1D_RTV) == 4);

// D3D10_TEX1D_ARRAY_RTV

struct D3D10_TEX1D_ARRAY_RTV
{
	UINT MipSlice; // 0
	UINT FirstArraySlice; // 4
	UINT ArraySize; // 8
};

static_assert(TypeMatch<decltype(D3D10_TEX1D_ARRAY_RTV::MipSlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX1D_ARRAY_RTV::FirstArraySlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX1D_ARRAY_RTV::ArraySize), UINT>::value);

static_assert(offsetof(D3D10_TEX1D_ARRAY_RTV, MipSlice) == 0);
static_assert(offsetof(D3D10_TEX1D_ARRAY_RTV, FirstArraySlice) == 4);
static_assert(offsetof(D3D10_TEX1D_ARRAY_RTV, ArraySize) == 8);

static_assert(sizeof(D3D10_TEX1D_ARRAY_RTV) == 12);

// D3D10_TEX2D_RTV

struct D3D10_TEX2D_RTV
{
	UINT MipSlice; // 0
};

static_assert(TypeMatch<decltype(D3D10_TEX2D_RTV::MipSlice), UINT>::value);

static_assert(offsetof(D3D10_TEX2D_RTV, MipSlice) == 0);

static_assert(sizeof(D3D10_TEX2D_RTV) == 4);

// D3D10_TEX2DMS_RTV

struct D3D10_TEX2DMS_RTV
{
	UINT UnusedField_NothingToDefine; // 0
};

static_assert(TypeMatch<decltype(D3D10_TEX2DMS_RTV::UnusedField_NothingToDefine), UINT>::value);

static_assert(offsetof(D3D10_TEX2DMS_RTV, UnusedField_NothingToDefine) == 0);

static_assert(sizeof(D3D10_TEX2DMS_RTV) == 4);

// D3D10_TEX2D_ARRAY_RTV

struct D3D10_TEX2D_ARRAY_RTV
{
	UINT MipSlice; // 0
	UINT FirstArraySlice; // 4
	UINT ArraySize; // 8
};

static_assert(TypeMatch<decltype(D3D10_TEX2D_ARRAY_RTV::MipSlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2D_ARRAY_RTV::FirstArraySlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2D_ARRAY_RTV::ArraySize), UINT>::value);

static_assert(offsetof(D3D10_TEX2D_ARRAY_RTV, MipSlice) == 0);
static_assert(offsetof(D3D10_TEX2D_ARRAY_RTV, FirstArraySlice) == 4);
static_assert(offsetof(D3D10_TEX2D_ARRAY_RTV, ArraySize) == 8);

static_assert(sizeof(D3D10_TEX2D_ARRAY_RTV) == 12);

// D3D10_TEX2DMS_ARRAY_RTV

struct D3D10_TEX2DMS_ARRAY_RTV
{
	UINT FirstArraySlice; // 0
	UINT ArraySize; // 4
};

static_assert(TypeMatch<decltype(D3D10_TEX2DMS_ARRAY_RTV::FirstArraySlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2DMS_ARRAY_RTV::ArraySize), UINT>::value);

static_assert(offsetof(D3D10_TEX2DMS_ARRAY_RTV, FirstArraySlice) == 0);
static_assert(offsetof(D3D10_TEX2DMS_ARRAY_RTV, ArraySize) == 4);

static_assert(sizeof(D3D10_TEX2DMS_ARRAY_RTV) == 8);

// D3D10_TEX3D_RTV

struct D3D10_TEX3D_RTV
{
	UINT MipSlice; // 0
	UINT FirstWSlice; // 4
	UINT WSize; // 8
};

static_assert(TypeMatch<decltype(D3D10_TEX3D_RTV::MipSlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX3D_RTV::FirstWSlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX3D_RTV::WSize), UINT>::value);

static_assert(offsetof(D3D10_TEX3D_RTV, MipSlice) == 0);
static_assert(offsetof(D3D10_TEX3D_RTV, FirstWSlice) == 4);
static_assert(offsetof(D3D10_TEX3D_RTV, WSize) == 8);

static_assert(sizeof(D3D10_TEX3D_RTV) == 12);

// D3D10_RENDER_TARGET_VIEW_DESC

struct D3D10_RENDER_TARGET_VIEW_DESC
{
	DXGI_FORMAT Format; // 0
	D3D10_RTV_DIMENSION ViewDimension; // 4
	union
	{
		D3D10_BUFFER_RTV Buffer; // 8
		D3D10_TEX1D_RTV Texture1D; // 8
		D3D10_TEX1D_ARRAY_RTV Texture1DArray; // 8
		D3D10_TEX2D_RTV Texture2D; // 8
		D3D10_TEX2D_ARRAY_RTV Texture2DArray; // 8
		D3D10_TEX2DMS_RTV Texture2DMS; // 8
		D3D10_TEX2DMS_ARRAY_RTV Texture2DMSArray; // 8
		D3D10_TEX3D_RTV Texture3D; // 8
	}; // 8
};

static_assert(TypeMatch<decltype(D3D10_RENDER_TARGET_VIEW_DESC::Format), DXGI_FORMAT>::value);
static_assert(TypeMatch<decltype(D3D10_RENDER_TARGET_VIEW_DESC::ViewDimension), D3D10_RTV_DIMENSION>::value);
static_assert(TypeMatch<decltype(D3D10_RENDER_TARGET_VIEW_DESC::Buffer), D3D10_BUFFER_RTV>::value);
static_assert(TypeMatch<decltype(D3D10_RENDER_TARGET_VIEW_DESC::Texture1D), D3D10_TEX1D_RTV>::value);
static_assert(TypeMatch<decltype(D3D10_RENDER_TARGET_VIEW_DESC::Texture1DArray), D3D10_TEX1D_ARRAY_RTV>::value);
static_assert(TypeMatch<decltype(D3D10_RENDER_TARGET_VIEW_DESC::Texture2D), D3D10_TEX2D_RTV>::value);
static_assert(TypeMatch<decltype(D3D10_RENDER_TARGET_VIEW_DESC::Texture2DArray), D3D10_TEX2D_ARRAY_RTV>::value);
static_assert(TypeMatch<decltype(D3D10_RENDER_TARGET_VIEW_DESC::Texture2DMS), D3D10_TEX2DMS_RTV>::value);
static_assert(TypeMatch<decltype(D3D10_RENDER_TARGET_VIEW_DESC::Texture2DMSArray), D3D10_TEX2DMS_ARRAY_RTV>::value);
static_assert(TypeMatch<decltype(D3D10_RENDER_TARGET_VIEW_DESC::Texture3D), D3D10_TEX3D_RTV>::value);

static_assert(offsetof(D3D10_RENDER_TARGET_VIEW_DESC, Format) == 0);
static_assert(offsetof(D3D10_RENDER_TARGET_VIEW_DESC, ViewDimension) == 4);
static_assert(offsetof(D3D10_RENDER_TARGET_VIEW_DESC, Buffer) == 8);
static_assert(offsetof(D3D10_RENDER_TARGET_VIEW_DESC, Texture1D) == 8);
static_assert(offsetof(D3D10_RENDER_TARGET_VIEW_DESC, Texture1DArray) == 8);
static_assert(offsetof(D3D10_RENDER_TARGET_VIEW_DESC, Texture2D) == 8);
static_assert(offsetof(D3D10_RENDER_TARGET_VIEW_DESC, Texture2DArray) == 8);
static_assert(offsetof(D3D10_RENDER_TARGET_VIEW_DESC, Texture2DMS) == 8);
static_assert(offsetof(D3D10_RENDER_TARGET_VIEW_DESC, Texture2DMSArray) == 8);
static_assert(offsetof(D3D10_RENDER_TARGET_VIEW_DESC, Texture3D) == 8);

static_assert(sizeof(D3D10_RENDER_TARGET_VIEW_DESC) == 20);

// D3D10_SAMPLER_DESC

struct D3D10_SAMPLER_DESC
{
	D3D10_FILTER Filter; // 0
	D3D10_TEXTURE_ADDRESS_MODE AddressU; // 4
	D3D10_TEXTURE_ADDRESS_MODE AddressV; // 8
	D3D10_TEXTURE_ADDRESS_MODE AddressW; // 0xC
	FLOAT MipLODBias; // 0x10
	UINT MaxAnisotropy; // 0x14
	D3D10_COMPARISON_FUNC ComparisonFunc; // 0x18
	FLOAT BorderColor[4]; // 0x1C
	FLOAT MinLOD; // 0x2C
	FLOAT MaxLOD; // 0x30
};

static_assert(TypeMatch<decltype(D3D10_SAMPLER_DESC::Filter), D3D10_FILTER>::value);
static_assert(TypeMatch<decltype(D3D10_SAMPLER_DESC::AddressU), D3D10_TEXTURE_ADDRESS_MODE>::value);
static_assert(TypeMatch<decltype(D3D10_SAMPLER_DESC::AddressV), D3D10_TEXTURE_ADDRESS_MODE>::value);
static_assert(TypeMatch<decltype(D3D10_SAMPLER_DESC::AddressW), D3D10_TEXTURE_ADDRESS_MODE>::value);
static_assert(TypeMatch<decltype(D3D10_SAMPLER_DESC::MipLODBias), FLOAT>::value);
static_assert(TypeMatch<decltype(D3D10_SAMPLER_DESC::MaxAnisotropy), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_SAMPLER_DESC::ComparisonFunc), D3D10_COMPARISON_FUNC>::value);
static_assert(TypeMatch<decltype(D3D10_SAMPLER_DESC::BorderColor), FLOAT[4]>::value);
static_assert(TypeMatch<decltype(D3D10_SAMPLER_DESC::MinLOD), FLOAT>::value);
static_assert(TypeMatch<decltype(D3D10_SAMPLER_DESC::MaxLOD), FLOAT>::value);

static_assert(offsetof(D3D10_SAMPLER_DESC, Filter) == 0);
static_assert(offsetof(D3D10_SAMPLER_DESC, AddressU) == 4);
static_assert(offsetof(D3D10_SAMPLER_DESC, AddressV) == 8);
static_assert(offsetof(D3D10_SAMPLER_DESC, AddressW) == 0xC);
static_assert(offsetof(D3D10_SAMPLER_DESC, MipLODBias) == 0x10);
static_assert(offsetof(D3D10_SAMPLER_DESC, MaxAnisotropy) == 0x14);
static_assert(offsetof(D3D10_SAMPLER_DESC, ComparisonFunc) == 0x18);
static_assert(offsetof(D3D10_SAMPLER_DESC, BorderColor) == 0x1C);
static_assert(offsetof(D3D10_SAMPLER_DESC, MinLOD) == 0x2C);
static_assert(offsetof(D3D10_SAMPLER_DESC, MaxLOD) == 0x30);

static_assert(sizeof(D3D10_SAMPLER_DESC) == 52);

// D3D10_QUERY_DESC

struct D3D10_QUERY_DESC
{
	D3D10_QUERY Query; // 0
	UINT MiscFlags; // 4
};

static_assert(TypeMatch<decltype(D3D10_QUERY_DESC::Query), D3D10_QUERY>::value);
static_assert(TypeMatch<decltype(D3D10_QUERY_DESC::MiscFlags), UINT>::value);

static_assert(offsetof(D3D10_QUERY_DESC, Query) == 0);
static_assert(offsetof(D3D10_QUERY_DESC, MiscFlags) == 4);

static_assert(sizeof(D3D10_QUERY_DESC) == 8);

// D3D10_COUNTER_DESC

struct D3D10_COUNTER_DESC
{
	D3D10_COUNTER Counter; // 0
	UINT MiscFlags; // 4
};

static_assert(TypeMatch<decltype(D3D10_COUNTER_DESC::Counter), D3D10_COUNTER>::value);
static_assert(TypeMatch<decltype(D3D10_COUNTER_DESC::MiscFlags), UINT>::value);

static_assert(offsetof(D3D10_COUNTER_DESC, Counter) == 0);
static_assert(offsetof(D3D10_COUNTER_DESC, MiscFlags) == 4);

static_assert(sizeof(D3D10_COUNTER_DESC) == 8);

// D3D10_VIEWPORT

struct D3D10_VIEWPORT
{
	INT TopLeftX; // 0
	INT TopLeftY; // 4
	UINT Width; // 8
	UINT Height; // 0xC
	FLOAT MinDepth; // 0x10
	FLOAT MaxDepth; // 0x14
};

static_assert(TypeMatch<decltype(D3D10_VIEWPORT::TopLeftX), INT>::value);
static_assert(TypeMatch<decltype(D3D10_VIEWPORT::TopLeftY), INT>::value);
static_assert(TypeMatch<decltype(D3D10_VIEWPORT::Width), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_VIEWPORT::Height), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_VIEWPORT::MinDepth), FLOAT>::value);
static_assert(TypeMatch<decltype(D3D10_VIEWPORT::MaxDepth), FLOAT>::value);

static_assert(offsetof(D3D10_VIEWPORT, TopLeftX) == 0);
static_assert(offsetof(D3D10_VIEWPORT, TopLeftY) == 4);
static_assert(offsetof(D3D10_VIEWPORT, Width) == 8);
static_assert(offsetof(D3D10_VIEWPORT, Height) == 0xC);
static_assert(offsetof(D3D10_VIEWPORT, MinDepth) == 0x10);
static_assert(offsetof(D3D10_VIEWPORT, MaxDepth) == 0x14);

static_assert(sizeof(D3D10_VIEWPORT) == 24);

// D3D10_TEX1D_DSV

struct D3D10_TEX1D_DSV
{
	UINT MipSlice; // 0
};

static_assert(TypeMatch<decltype(D3D10_TEX1D_DSV::MipSlice), UINT>::value);

static_assert(offsetof(D3D10_TEX1D_DSV, MipSlice) == 0);

static_assert(sizeof(D3D10_TEX1D_DSV) == 4);

// D3D10_TEX1D_ARRAY_DSV

struct D3D10_TEX1D_ARRAY_DSV
{
	UINT MipSlice; // 0
	UINT FirstArraySlice; // 4
	UINT ArraySize; // 8
};

static_assert(TypeMatch<decltype(D3D10_TEX1D_ARRAY_DSV::MipSlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX1D_ARRAY_DSV::FirstArraySlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX1D_ARRAY_DSV::ArraySize), UINT>::value);

static_assert(offsetof(D3D10_TEX1D_ARRAY_DSV, MipSlice) == 0);
static_assert(offsetof(D3D10_TEX1D_ARRAY_DSV, FirstArraySlice) == 4);
static_assert(offsetof(D3D10_TEX1D_ARRAY_DSV, ArraySize) == 8);

static_assert(sizeof(D3D10_TEX1D_ARRAY_DSV) == 12);

// D3D10_TEX2D_DSV

struct D3D10_TEX2D_DSV
{
	UINT MipSlice; // 0
};

static_assert(TypeMatch<decltype(D3D10_TEX2D_DSV::MipSlice), UINT>::value);

static_assert(offsetof(D3D10_TEX2D_DSV, MipSlice) == 0);

static_assert(sizeof(D3D10_TEX2D_DSV) == 4);

// D3D10_TEX2D_ARRAY_DSV

struct D3D10_TEX2D_ARRAY_DSV
{
	UINT MipSlice; // 0
	UINT FirstArraySlice; // 4
	UINT ArraySize; // 8
};

static_assert(TypeMatch<decltype(D3D10_TEX2D_ARRAY_DSV::MipSlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2D_ARRAY_DSV::FirstArraySlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2D_ARRAY_DSV::ArraySize), UINT>::value);

static_assert(offsetof(D3D10_TEX2D_ARRAY_DSV, MipSlice) == 0);
static_assert(offsetof(D3D10_TEX2D_ARRAY_DSV, FirstArraySlice) == 4);
static_assert(offsetof(D3D10_TEX2D_ARRAY_DSV, ArraySize) == 8);

static_assert(sizeof(D3D10_TEX2D_ARRAY_DSV) == 12);

// D3D10_TEX2DMS_DSV

struct D3D10_TEX2DMS_DSV
{
	UINT UnusedField_NothingToDefine; // 0
};

static_assert(TypeMatch<decltype(D3D10_TEX2DMS_DSV::UnusedField_NothingToDefine), UINT>::value);

static_assert(offsetof(D3D10_TEX2DMS_DSV, UnusedField_NothingToDefine) == 0);

static_assert(sizeof(D3D10_TEX2DMS_DSV) == 4);

// D3D10_TEX2DMS_ARRAY_DSV

struct D3D10_TEX2DMS_ARRAY_DSV
{
	UINT FirstArraySlice; // 0
	UINT ArraySize; // 4
};

static_assert(TypeMatch<decltype(D3D10_TEX2DMS_ARRAY_DSV::FirstArraySlice), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_TEX2DMS_ARRAY_DSV::ArraySize), UINT>::value);

static_assert(offsetof(D3D10_TEX2DMS_ARRAY_DSV, FirstArraySlice) == 0);
static_assert(offsetof(D3D10_TEX2DMS_ARRAY_DSV, ArraySize) == 4);

static_assert(sizeof(D3D10_TEX2DMS_ARRAY_DSV) == 8);

// D3D10_DEPTH_STENCIL_VIEW_DESC

struct D3D10_DEPTH_STENCIL_VIEW_DESC
{
	DXGI_FORMAT Format; // 0
	D3D10_DSV_DIMENSION ViewDimension; // 4
	union
	{
		D3D10_TEX1D_DSV Texture1D; // 8
		D3D10_TEX1D_ARRAY_DSV Texture1DArray; // 8
		D3D10_TEX2D_DSV Texture2D; // 8
		D3D10_TEX2D_ARRAY_DSV Texture2DArray; // 8
		D3D10_TEX2DMS_DSV Texture2DMS; // 8
		D3D10_TEX2DMS_ARRAY_DSV Texture2DMSArray; // 8
	}; // 8
};

static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_VIEW_DESC::Format), DXGI_FORMAT>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_VIEW_DESC::ViewDimension), D3D10_DSV_DIMENSION>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_VIEW_DESC::Texture1D), D3D10_TEX1D_DSV>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_VIEW_DESC::Texture1DArray), D3D10_TEX1D_ARRAY_DSV>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_VIEW_DESC::Texture2D), D3D10_TEX2D_DSV>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_VIEW_DESC::Texture2DArray), D3D10_TEX2D_ARRAY_DSV>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_VIEW_DESC::Texture2DMS), D3D10_TEX2DMS_DSV>::value);
static_assert(TypeMatch<decltype(D3D10_DEPTH_STENCIL_VIEW_DESC::Texture2DMSArray), D3D10_TEX2DMS_ARRAY_DSV>::value);

static_assert(offsetof(D3D10_DEPTH_STENCIL_VIEW_DESC, Format) == 0);
static_assert(offsetof(D3D10_DEPTH_STENCIL_VIEW_DESC, ViewDimension) == 4);
static_assert(offsetof(D3D10_DEPTH_STENCIL_VIEW_DESC, Texture1D) == 8);
static_assert(offsetof(D3D10_DEPTH_STENCIL_VIEW_DESC, Texture1DArray) == 8);
static_assert(offsetof(D3D10_DEPTH_STENCIL_VIEW_DESC, Texture2D) == 8);
static_assert(offsetof(D3D10_DEPTH_STENCIL_VIEW_DESC, Texture2DArray) == 8);
static_assert(offsetof(D3D10_DEPTH_STENCIL_VIEW_DESC, Texture2DMS) == 8);
static_assert(offsetof(D3D10_DEPTH_STENCIL_VIEW_DESC, Texture2DMSArray) == 8);

static_assert(sizeof(D3D10_DEPTH_STENCIL_VIEW_DESC) == 20);

// D3D10_COUNTER_INFO

struct D3D10_COUNTER_INFO
{
	D3D10_COUNTER LastDeviceDependentCounter; // 0
	UINT NumSimultaneousCounters; // 4
	UINT8 NumDetectableParallelUnits; // 8
	_(3);
};

static_assert(TypeMatch<decltype(D3D10_COUNTER_INFO::LastDeviceDependentCounter), D3D10_COUNTER>::value);
static_assert(TypeMatch<decltype(D3D10_COUNTER_INFO::NumSimultaneousCounters), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_COUNTER_INFO::NumDetectableParallelUnits), UINT8>::value);

static_assert(offsetof(D3D10_COUNTER_INFO, LastDeviceDependentCounter) == 0);
static_assert(offsetof(D3D10_COUNTER_INFO, NumSimultaneousCounters) == 4);
static_assert(offsetof(D3D10_COUNTER_INFO, NumDetectableParallelUnits) == 8);

static_assert(sizeof(D3D10_COUNTER_INFO) == 12);

// D3D10_BOX

struct D3D10_BOX
{
	UINT left; // 0
	UINT top; // 4
	UINT front; // 8
	UINT right; // 0xC
	UINT bottom; // 0x10
	UINT back; // 0x14
};

static_assert(TypeMatch<decltype(D3D10_BOX::left), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BOX::top), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BOX::front), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BOX::right), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BOX::bottom), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_BOX::back), UINT>::value);

static_assert(offsetof(D3D10_BOX, left) == 0);
static_assert(offsetof(D3D10_BOX, top) == 4);
static_assert(offsetof(D3D10_BOX, front) == 8);
static_assert(offsetof(D3D10_BOX, right) == 0xC);
static_assert(offsetof(D3D10_BOX, bottom) == 0x10);
static_assert(offsetof(D3D10_BOX, back) == 0x14);

static_assert(sizeof(D3D10_BOX) == 24);

// D3D10_SUBRESOURCE_DATA

struct D3D10_SUBRESOURCE_DATA
{
	const void* pSysMem; // 0
	UINT SysMemPitch; // 4
	UINT SysMemSlicePitch; // 8
};

static_assert(TypeMatch<decltype(D3D10_SUBRESOURCE_DATA::pSysMem), const void*>::value);
static_assert(TypeMatch<decltype(D3D10_SUBRESOURCE_DATA::SysMemPitch), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_SUBRESOURCE_DATA::SysMemSlicePitch), UINT>::value);

static_assert(offsetof(D3D10_SUBRESOURCE_DATA, pSysMem) == 0);
static_assert(offsetof(D3D10_SUBRESOURCE_DATA, SysMemPitch) == 4);
static_assert(offsetof(D3D10_SUBRESOURCE_DATA, SysMemSlicePitch) == 8);

static_assert(sizeof(D3D10_SUBRESOURCE_DATA) == 12);

// D3D10_INPUT_ELEMENT_DESC

struct D3D10_INPUT_ELEMENT_DESC
{
	LPCSTR SemanticName; // 0
	UINT SemanticIndex; // 4
	DXGI_FORMAT Format; // 8
	UINT InputSlot; // 0xC
	UINT AlignedByteOffset; // 0x10
	D3D10_INPUT_CLASSIFICATION InputSlotClass; // 0x14
	UINT InstanceDataStepRate; // 0x18
};

static_assert(TypeMatch<decltype(D3D10_INPUT_ELEMENT_DESC::SemanticName), LPCSTR>::value);
static_assert(TypeMatch<decltype(D3D10_INPUT_ELEMENT_DESC::SemanticIndex), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_INPUT_ELEMENT_DESC::Format), DXGI_FORMAT>::value);
static_assert(TypeMatch<decltype(D3D10_INPUT_ELEMENT_DESC::InputSlot), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_INPUT_ELEMENT_DESC::AlignedByteOffset), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_INPUT_ELEMENT_DESC::InputSlotClass), D3D10_INPUT_CLASSIFICATION>::value);
static_assert(TypeMatch<decltype(D3D10_INPUT_ELEMENT_DESC::InstanceDataStepRate), UINT>::value);

static_assert(offsetof(D3D10_INPUT_ELEMENT_DESC, SemanticName) == 0);
static_assert(offsetof(D3D10_INPUT_ELEMENT_DESC, SemanticIndex) == 4);
static_assert(offsetof(D3D10_INPUT_ELEMENT_DESC, Format) == 8);
static_assert(offsetof(D3D10_INPUT_ELEMENT_DESC, InputSlot) == 0xC);
static_assert(offsetof(D3D10_INPUT_ELEMENT_DESC, AlignedByteOffset) == 0x10);
static_assert(offsetof(D3D10_INPUT_ELEMENT_DESC, InputSlotClass) == 0x14);
static_assert(offsetof(D3D10_INPUT_ELEMENT_DESC, InstanceDataStepRate) == 0x18);

static_assert(sizeof(D3D10_INPUT_ELEMENT_DESC) == 28);

// D3D10_SO_DECLARATION_ENTRY

struct D3D10_SO_DECLARATION_ENTRY
{
	LPCSTR SemanticName; // 0
	UINT SemanticIndex; // 4
	BYTE StartComponent; // 8
	BYTE ComponentCount; // 9
	BYTE OutputSlot; // 0xA
	_(1);
};

static_assert(TypeMatch<decltype(D3D10_SO_DECLARATION_ENTRY::SemanticName), LPCSTR>::value);
static_assert(TypeMatch<decltype(D3D10_SO_DECLARATION_ENTRY::SemanticIndex), UINT>::value);
static_assert(TypeMatch<decltype(D3D10_SO_DECLARATION_ENTRY::StartComponent), BYTE>::value);
static_assert(TypeMatch<decltype(D3D10_SO_DECLARATION_ENTRY::ComponentCount), BYTE>::value);
static_assert(TypeMatch<decltype(D3D10_SO_DECLARATION_ENTRY::OutputSlot), BYTE>::value);

static_assert(offsetof(D3D10_SO_DECLARATION_ENTRY, SemanticName) == 0);
static_assert(offsetof(D3D10_SO_DECLARATION_ENTRY, SemanticIndex) == 4);
static_assert(offsetof(D3D10_SO_DECLARATION_ENTRY, StartComponent) == 8);
static_assert(offsetof(D3D10_SO_DECLARATION_ENTRY, ComponentCount) == 9);
static_assert(offsetof(D3D10_SO_DECLARATION_ENTRY, OutputSlot) == 0xA);

static_assert(sizeof(D3D10_SO_DECLARATION_ENTRY) == 12);

// D3D_SHADER_MACRO

struct D3D_SHADER_MACRO
{
	LPCSTR Name; // 0
	LPCSTR Definition; // 4
};

static_assert(TypeMatch<decltype(D3D_SHADER_MACRO::Name), LPCSTR>::value);
static_assert(TypeMatch<decltype(D3D_SHADER_MACRO::Definition), LPCSTR>::value);

static_assert(offsetof(D3D_SHADER_MACRO, Name) == 0);
static_assert(offsetof(D3D_SHADER_MACRO, Definition) == 4);

static_assert(sizeof(D3D_SHADER_MACRO) == 8);

#pragma pack(pop)

// ID3D10DeviceChild

struct __declspec(novtable) ID3D10DeviceChild : IUnknown
{
	virtual void __stdcall GetDevice(ID3D10Device** ppDevice) = 0;
	virtual HRESULT __stdcall GetPrivateData
	(
		const GUID& guid,
		UINT* pDataSize,
		void* pData
	) = 0;
	virtual HRESULT __stdcall SetPrivateData
	(
		const GUID& guid,
		UINT DataSize,
		const void* pData
	) = 0;
	virtual HRESULT __stdcall SetPrivateDataInterface
	(
		const GUID& guid,
		const IUnknown* pData
	) = 0;
};

static_assert(sizeof(ID3D10DeviceChild) == 4);

// ID3D10DepthStencilState

struct __declspec(novtable) ID3D10DepthStencilState : ID3D10DeviceChild
{
	virtual void __stdcall GetDesc(D3D10_DEPTH_STENCIL_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10DepthStencilState) == 4);

// ID3D10BlendState

struct __declspec(novtable) ID3D10BlendState : ID3D10DeviceChild
{
	virtual void __stdcall GetDesc(D3D10_BLEND_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10BlendState) == 4);

// ID3D10RasterizerState

struct __declspec(novtable) ID3D10RasterizerState : ID3D10DeviceChild
{
	virtual void __stdcall GetDesc(D3D10_RASTERIZER_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10RasterizerState) == 4);

// ID3D10Resource

struct __declspec(novtable) ID3D10Resource : ID3D10DeviceChild
{
	virtual void __stdcall GetType(D3D10_RESOURCE_DIMENSION* rType) = 0;
	virtual void __stdcall SetEvictionPriority(UINT EvictionPriority) = 0;
	virtual UINT __stdcall GetEvictionPriority() = 0;
};

static_assert(sizeof(ID3D10Resource) == 4);

// ID3D10Buffer

struct __declspec(novtable) ID3D10Buffer : ID3D10Resource
{
	virtual HRESULT __stdcall Map
	(
		D3D10_MAP MapType,
		UINT MapFlags,
		void** ppData
	) = 0;
	virtual void __stdcall Unmap() = 0;
	virtual void __stdcall GetDesc(D3D10_BUFFER_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10Buffer) == 4);

// ID3D10Texture1D

struct __declspec(novtable) ID3D10Texture1D : ID3D10Resource
{
	virtual HRESULT __stdcall Map
	(
		UINT Subresource,
		D3D10_MAP MapType,
		UINT MapFlags,
		void** ppData
	) = 0;
	virtual void __stdcall Unmap(UINT Subresource) = 0;
	virtual void __stdcall GetDesc(D3D10_TEXTURE1D_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10Texture1D) == 4);

// ID3D10Texture2D

struct __declspec(novtable) ID3D10Texture2D : ID3D10Resource
{
	virtual HRESULT __stdcall Map
	(
		UINT Subresource,
		D3D10_MAP MapType,
		UINT MapFlags,
		D3D10_MAPPED_TEXTURE2D* pMappedTex2D
	) = 0;
	virtual void __stdcall Unmap(UINT Subresource) = 0;
	virtual void __stdcall GetDesc(D3D10_TEXTURE2D_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10Texture2D) == 4);

// ID3D10Texture3D

struct __declspec(novtable) ID3D10Texture3D : ID3D10Resource
{
	virtual HRESULT __stdcall Map
	(
		UINT Subresource,
		D3D10_MAP MapType,
		UINT MapFlags,
		D3D10_MAPPED_TEXTURE3D* pMappedTex3D
	) = 0;
	virtual void __stdcall Unmap(UINT Subresource) = 0;
	virtual void __stdcall GetDesc(D3D10_TEXTURE3D_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10Texture3D) == 4);

// ID3D10View

struct __declspec(novtable) ID3D10View : ID3D10DeviceChild
{
	virtual void __stdcall GetResource(ID3D10Resource** ppResource) = 0;
};

static_assert(sizeof(ID3D10View) == 4);

// ID3D10ShaderResourceView

struct __declspec(novtable) ID3D10ShaderResourceView : ID3D10View
{
	virtual void __stdcall GetDesc(D3D10_SHADER_RESOURCE_VIEW_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10ShaderResourceView) == 4);

// ID3D10RenderTargetView

struct __declspec(novtable) ID3D10RenderTargetView : ID3D10View
{
	virtual void __stdcall GetDesc(D3D10_RENDER_TARGET_VIEW_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10RenderTargetView) == 4);

// ID3D10DepthStencilView

struct __declspec(novtable) ID3D10DepthStencilView : ID3D10View
{
	virtual void __stdcall GetDesc(D3D10_DEPTH_STENCIL_VIEW_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10DepthStencilView) == 4);

// ID3D10VertexShader

struct __declspec(novtable) ID3D10VertexShader : ID3D10DeviceChild
{
};

static_assert(sizeof(ID3D10VertexShader) == 4);

// ID3D10GeometryShader

struct __declspec(novtable) ID3D10GeometryShader : ID3D10DeviceChild
{
};

static_assert(sizeof(ID3D10GeometryShader) == 4);

// ID3D10PixelShader

struct __declspec(novtable) ID3D10PixelShader : ID3D10DeviceChild
{
};

static_assert(sizeof(ID3D10PixelShader) == 4);

// ID3D10InputLayout

struct __declspec(novtable) ID3D10InputLayout : ID3D10DeviceChild
{
};

static_assert(sizeof(ID3D10InputLayout) == 4);

// ID3D10SamplerState

struct __declspec(novtable) ID3D10SamplerState : ID3D10DeviceChild
{
	virtual void __stdcall GetDesc(D3D10_SAMPLER_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10SamplerState) == 4);

// ID3D10Asynchronous

struct __declspec(novtable) ID3D10Asynchronous : ID3D10DeviceChild
{
	virtual void __stdcall Begin() = 0;
	virtual void __stdcall End() = 0;
	virtual HRESULT __stdcall GetData
	(
		void* pData,
		UINT DataSize,
		UINT GetDataFlags
	) = 0;
	virtual UINT __stdcall GetDataSize() = 0;
};

static_assert(sizeof(ID3D10Asynchronous) == 4);

// ID3D10Query

struct __declspec(novtable) ID3D10Query : ID3D10Asynchronous
{
	virtual void __stdcall GetDesc(D3D10_QUERY_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10Query) == 4);

// ID3D10Predicate

struct __declspec(novtable) ID3D10Predicate : ID3D10Query
{
};

static_assert(sizeof(ID3D10Predicate) == 4);

// ID3D10Counter

struct __declspec(novtable) ID3D10Counter : ID3D10Asynchronous
{
	virtual void __stdcall GetDesc(D3D10_COUNTER_DESC* pDesc) = 0;
};

static_assert(sizeof(ID3D10Counter) == 4);

// ID3D10Device

struct __declspec(novtable) ID3D10Device : IUnknown
{
	virtual void __stdcall VSSetConstantBuffers
	(
		UINT StartSlot,
		UINT NumBuffers,
		ID3D10Buffer*const* ppConstantBuffers
	) = 0;
	virtual void __stdcall PSSetShaderResources
	(
		UINT StartSlot,
		UINT NumViews,
		ID3D10ShaderResourceView*const* ppShaderResourceViews
	) = 0;
	virtual void __stdcall PSSetShader(ID3D10PixelShader* pPixelShader) = 0;
	virtual void __stdcall PSSetSamplers
	(
		UINT StartSlot,
		UINT NumSamplers,
		ID3D10SamplerState*const* ppSamplers
	) = 0;
	virtual void __stdcall VSSetShader(ID3D10VertexShader* pVertexShader) = 0;
	virtual void __stdcall DrawIndexed
	(
		UINT IndexCount,
		UINT StartIndexLocation,
		INT BaseVertexLocation
	) = 0;
	virtual void __stdcall Draw
	(
		UINT VertexCount,
		UINT StartVertexLocation
	) = 0;
	virtual void __stdcall PSSetConstantBuffers
	(
		UINT StartSlot,
		UINT NumBuffers,
		ID3D10Buffer*const* ppConstantBuffers
	) = 0;
	virtual void __stdcall IASetInputLayout(ID3D10InputLayout* pInputLayout) = 0;
	virtual void __stdcall IASetVertexBuffers
	(
		UINT StartSlot,
		UINT NumBuffers,
		ID3D10Buffer*const* ppVertexBuffers,
		const UINT* pStrides,
		const UINT* pOffsets
	) = 0;
	virtual void __stdcall IASetIndexBuffer
	(
		ID3D10Buffer* pIndexBuffer,
		DXGI_FORMAT Format,
		UINT Offset
	) = 0;
	virtual void __stdcall DrawIndexedInstanced
	(
		UINT IndexCountPerInstance,
		UINT InstanceCount,
		UINT StartIndexLocation,
		INT BaseVertexLocation,
		UINT StartInstanceLocation
	) = 0;
	virtual void __stdcall DrawInstanced
	(
		UINT VertexCountPerInstance,
		UINT InstanceCount,
		UINT StartVertexLocation,
		UINT StartInstanceLocation
	) = 0;
	virtual void __stdcall GSSetConstantBuffers
	(
		UINT StartSlot,
		UINT NumBuffers,
		ID3D10Buffer*const* ppConstantBuffers
	) = 0;
	virtual void __stdcall GSSetShader(ID3D10GeometryShader* pShader) = 0;
	virtual void __stdcall IASetPrimitiveTopology(D3D10_PRIMITIVE_TOPOLOGY Topology) = 0;
	virtual void __stdcall VSSetShaderResources
	(
		UINT StartSlot,
		UINT NumViews,
		ID3D10ShaderResourceView*const* ppShaderResourceViews
	) = 0;
	virtual void __stdcall VSSetSamplers
	(
		UINT StartSlot,
		UINT NumSamplers,
		ID3D10SamplerState*const* ppSamplers
	) = 0;
	virtual void __stdcall SetPredication
	(
		ID3D10Predicate* pPredicate,
		BOOL PredicateValue
	) = 0;
	virtual void __stdcall GSSetShaderResources
	(
		UINT StartSlot,
		UINT NumViews,
		ID3D10ShaderResourceView*const* ppShaderResourceViews
	) = 0;
	virtual void __stdcall GSSetSamplers
	(
		UINT StartSlot,
		UINT NumSamplers,
		ID3D10SamplerState*const* ppSamplers
	) = 0;
	virtual void __stdcall OMSetRenderTargets
	(
		UINT NumViews,
		ID3D10RenderTargetView*const* ppRenderTargetViews,
		ID3D10DepthStencilView* pDepthStencilView
	) = 0;
	virtual void __stdcall OMSetBlendState
	(
		ID3D10BlendState* pBlendState,
		const FLOAT BlendFactor[4],
		UINT SampleMask
	) = 0;
	virtual void __stdcall OMSetDepthStencilState
	(
		ID3D10DepthStencilState* pDepthStencilState,
		UINT StencilRef
	) = 0;
	virtual void __stdcall SOSetTargets
	(
		UINT NumBuffers,
		ID3D10Buffer*const* ppSOTargets,
		const UINT* pOffsets
	) = 0;
	virtual void __stdcall DrawAuto() = 0;
	virtual void __stdcall RSSetState(ID3D10RasterizerState* pRasterizerState) = 0;
	virtual void __stdcall RSSetViewports
	(
		UINT NumViewports,
		const D3D10_VIEWPORT* pViewports
	) = 0;
	virtual void __stdcall RSSetScissorRects
	(
		UINT NumRects,
		const D3D10_RECT* pRects
	) = 0;
	virtual void __stdcall CopySubresourceRegion
	(
		ID3D10Resource* pDstResource,
		UINT DstSubresource,
		UINT DstX,
		UINT DstY,
		UINT DstZ,
		ID3D10Resource* pSrcResource,
		UINT SrcSubresource,
		const D3D10_BOX* pSrcBox
	) = 0;
	virtual void __stdcall CopyResource
	(
		ID3D10Resource* pDstResource,
		ID3D10Resource* pSrcResource
	) = 0;
	virtual void __stdcall UpdateSubresource
	(
		ID3D10Resource* pDstResource,
		UINT DstSubresource,
		const D3D10_BOX* pDstBox,
		const void* pSrcData,
		UINT SrcRowPitch,
		UINT SrcDepthPitch
	) = 0;
	virtual void __stdcall ClearRenderTargetView
	(
		ID3D10RenderTargetView* pRenderTargetView,
		const FLOAT ColorRGBA[4]
	) = 0;
	virtual void __stdcall ClearDepthStencilView
	(
		ID3D10DepthStencilView* pDepthStencilView,
		UINT ClearFlags,
		FLOAT Depth,
		UINT8 Stencil
	) = 0;
	virtual void __stdcall GenerateMips(ID3D10ShaderResourceView* pShaderResourceView) = 0;
	virtual void __stdcall ResolveSubresource
	(
		ID3D10Resource* pDstResource,
		UINT DstSubresource,
		ID3D10Resource* pSrcResource,
		UINT SrcSubresource,
		DXGI_FORMAT Format
	) = 0;
	virtual void __stdcall VSGetConstantBuffers
	(
		UINT StartSlot,
		UINT NumBuffers,
		ID3D10Buffer** ppConstantBuffers
	) = 0;
	virtual void __stdcall PSGetShaderResources
	(
		UINT StartSlot,
		UINT NumViews,
		ID3D10ShaderResourceView** ppShaderResourceViews
	) = 0;
	virtual void __stdcall PSGetShader(ID3D10PixelShader** ppPixelShader) = 0;
	virtual void __stdcall PSGetSamplers
	(
		UINT StartSlot,
		UINT NumSamplers,
		ID3D10SamplerState** ppSamplers
	) = 0;
	virtual void __stdcall VSGetShader(ID3D10VertexShader** ppVertexShader) = 0;
	virtual void __stdcall PSGetConstantBuffers
	(
		UINT StartSlot,
		UINT NumBuffers,
		ID3D10Buffer** ppConstantBuffers
	) = 0;
	virtual void __stdcall IAGetInputLayout(ID3D10InputLayout** ppInputLayout) = 0;
	virtual void __stdcall IAGetVertexBuffers
	(
		UINT StartSlot,
		UINT NumBuffers,
		ID3D10Buffer** ppVertexBuffers,
		UINT* pStrides,
		UINT* pOffsets
	) = 0;
	virtual void __stdcall IAGetIndexBuffer
	(
		ID3D10Buffer** pIndexBuffer,
		DXGI_FORMAT* Format,
		UINT* Offset
	) = 0;
	virtual void __stdcall GSGetConstantBuffers
	(
		UINT StartSlot,
		UINT NumBuffers,
		ID3D10Buffer** ppConstantBuffers
	) = 0;
	virtual void __stdcall GSGetShader(ID3D10GeometryShader** ppGeometryShader) = 0;
	virtual void __stdcall IAGetPrimitiveTopology(D3D10_PRIMITIVE_TOPOLOGY* pTopology) = 0;
	virtual void __stdcall VSGetShaderResources
	(
		UINT StartSlot,
		UINT NumViews,
		ID3D10ShaderResourceView** ppShaderResourceViews
	) = 0;
	virtual void __stdcall VSGetSamplers
	(
		UINT StartSlot,
		UINT NumSamplers,
		ID3D10SamplerState** ppSamplers
	) = 0;
	virtual void __stdcall GetPredication
	(
		ID3D10Predicate** ppPredicate,
		BOOL* pPredicateValue
	) = 0;
	virtual void __stdcall GSGetShaderResources
	(
		UINT StartSlot,
		UINT NumViews,
		ID3D10ShaderResourceView** ppShaderResourceViews
	) = 0;
	virtual void __stdcall GSGetSamplers
	(
		UINT StartSlot,
		UINT NumSamplers,
		ID3D10SamplerState** ppSamplers
	) = 0;
	virtual void __stdcall OMGetRenderTargets
	(
		UINT NumViews,
		ID3D10RenderTargetView** ppRenderTargetViews,
		ID3D10DepthStencilView** ppDepthStencilView
	) = 0;
	virtual void __stdcall OMGetBlendState
	(
		ID3D10BlendState** ppBlendState,
		FLOAT BlendFactor[4],
		UINT* pSampleMask
	) = 0;
	virtual void __stdcall OMGetDepthStencilState
	(
		ID3D10DepthStencilState** ppDepthStencilState,
		UINT* pStencilRef
	) = 0;
	virtual void __stdcall SOGetTargets
	(
		UINT NumBuffers,
		ID3D10Buffer** ppSOTargets,
		UINT* pOffsets
	) = 0;
	virtual void __stdcall RSGetState(ID3D10RasterizerState** ppRasterizerState) = 0;
	virtual void __stdcall RSGetViewports
	(
		UINT* NumViewports,
		D3D10_VIEWPORT* pViewports
	) = 0;
	virtual void __stdcall RSGetScissorRects
	(
		UINT* NumRects,
		D3D10_RECT* pRects
	) = 0;
	virtual HRESULT __stdcall GetDeviceRemovedReason() = 0;
	virtual HRESULT __stdcall SetExceptionMode(UINT RaiseFlags) = 0;
	virtual UINT __stdcall GetExceptionMode() = 0;
	virtual HRESULT __stdcall GetPrivateData
	(
		const GUID& guid,
		UINT* pDataSize,
		void* pData
	) = 0;
	virtual HRESULT __stdcall SetPrivateData
	(
		const GUID& guid,
		UINT DataSize,
		const void* pData
	) = 0;
	virtual HRESULT __stdcall SetPrivateDataInterface
	(
		const GUID& guid,
		const IUnknown* pData
	) = 0;
	virtual void __stdcall ClearState() = 0;
	virtual void __stdcall Flush() = 0;
	virtual HRESULT __stdcall CreateBuffer
	(
		const D3D10_BUFFER_DESC* pDesc,
		const D3D10_SUBRESOURCE_DATA* pInitialData,
		ID3D10Buffer** ppBuffer
	) = 0;
	virtual HRESULT __stdcall CreateTexture1D
	(
		const D3D10_TEXTURE1D_DESC* pDesc,
		const D3D10_SUBRESOURCE_DATA* pInitialData,
		ID3D10Texture1D** ppTexture1D
	) = 0;
	virtual HRESULT __stdcall CreateTexture2D
	(
		const D3D10_TEXTURE2D_DESC* pDesc,
		const D3D10_SUBRESOURCE_DATA* pInitialData,
		ID3D10Texture2D** ppTexture2D
	) = 0;
	virtual HRESULT __stdcall CreateTexture3D
	(
		const D3D10_TEXTURE3D_DESC* pDesc,
		const D3D10_SUBRESOURCE_DATA* pInitialData,
		ID3D10Texture3D** ppTexture3D
	) = 0;
	virtual HRESULT __stdcall CreateShaderResourceView
	(
		ID3D10Resource* pResource,
		const D3D10_SHADER_RESOURCE_VIEW_DESC* pDesc,
		ID3D10ShaderResourceView** ppSRView
	) = 0;
	virtual HRESULT __stdcall CreateRenderTargetView
	(
		ID3D10Resource* pResource,
		const D3D10_RENDER_TARGET_VIEW_DESC* pDesc,
		ID3D10RenderTargetView** ppRTView
	) = 0;
	virtual HRESULT __stdcall CreateDepthStencilView
	(
		ID3D10Resource* pResource,
		const D3D10_DEPTH_STENCIL_VIEW_DESC* pDesc,
		ID3D10DepthStencilView** ppDepthStencilView
	) = 0;
	virtual HRESULT __stdcall CreateInputLayout
	(
		const D3D10_INPUT_ELEMENT_DESC* pInputElementDescs,
		UINT NumElements,
		const void* pShaderBytecodeWithInputSignature,
		SIZE_T BytecodeLength,
		ID3D10InputLayout** ppInputLayout
	) = 0;
	virtual HRESULT __stdcall CreateVertexShader
	(
		const void* pShaderBytecode,
		SIZE_T BytecodeLength,
		ID3D10VertexShader** ppVertexShader
	) = 0;
	virtual HRESULT __stdcall CreateGeometryShader
	(
		const void* pShaderBytecode,
		SIZE_T BytecodeLength,
		ID3D10GeometryShader** ppGeometryShader
	) = 0;
	virtual HRESULT __stdcall CreateGeometryShaderWithStreamOutput
	(
		const void* pShaderBytecode,
		SIZE_T BytecodeLength,
		const D3D10_SO_DECLARATION_ENTRY* pSODeclaration,
		UINT NumEntries,
		UINT OutputStreamStride,
		ID3D10GeometryShader** ppGeometryShader
	) = 0;
	virtual HRESULT __stdcall CreatePixelShader
	(
		const void* pShaderBytecode,
		SIZE_T BytecodeLength,
		ID3D10PixelShader** ppPixelShader
	) = 0;
	virtual HRESULT __stdcall CreateBlendState
	(
		const D3D10_BLEND_DESC* pBlendStateDesc,
		ID3D10BlendState** ppBlendState
	) = 0;
	virtual HRESULT __stdcall CreateDepthStencilState
	(
		const D3D10_DEPTH_STENCIL_DESC* pDepthStencilDesc,
		ID3D10DepthStencilState** ppDepthStencilState
	) = 0;
	virtual HRESULT __stdcall CreateRasterizerState
	(
		const D3D10_RASTERIZER_DESC* pRasterizerDesc,
		ID3D10RasterizerState** ppRasterizerState
	) = 0;
	virtual HRESULT __stdcall CreateSamplerState
	(
		const D3D10_SAMPLER_DESC* pSamplerDesc,
		ID3D10SamplerState** ppSamplerState
	) = 0;
	virtual HRESULT __stdcall CreateQuery
	(
		const D3D10_QUERY_DESC* pQueryDesc,
		ID3D10Query** ppQuery
	) = 0;
	virtual HRESULT __stdcall CreatePredicate
	(
		const D3D10_QUERY_DESC* pPredicateDesc,
		ID3D10Predicate** ppPredicate
	) = 0;
	virtual HRESULT __stdcall CreateCounter
	(
		const D3D10_COUNTER_DESC* pCounterDesc,
		ID3D10Counter** ppCounter
	) = 0;
	virtual HRESULT __stdcall CheckFormatSupport
	(
		DXGI_FORMAT Format,
		UINT* pFormatSupport
	) = 0;
	virtual HRESULT __stdcall CheckMultisampleQualityLevels
	(
		DXGI_FORMAT Format,
		UINT SampleCount,
		UINT* pNumQualityLevels
	) = 0;
	virtual void __stdcall CheckCounterInfo(D3D10_COUNTER_INFO* pCounterInfo) = 0;
	virtual HRESULT __stdcall CheckCounter
	(
		const D3D10_COUNTER_DESC* pDesc,
		D3D10_COUNTER_TYPE* pType,
		UINT* pActiveCounters,
		LPSTR szName,
		UINT* pNameLength,
		LPSTR szUnits,
		UINT* pUnitsLength,
		LPSTR szDescription,
		UINT* pDescriptionLength
	) = 0;
	virtual UINT __stdcall GetCreationFlags() = 0;
	virtual HRESULT __stdcall OpenSharedResource
	(
		HANDLE hResource,
		const IID& ReturnedInterface,
		void** ppResource
	) = 0;
	virtual void __stdcall SetTextFilterSize
	(
		UINT Width,
		UINT Height
	) = 0;
	virtual void __stdcall GetTextFilterSize
	(
		UINT* pWidth,
		UINT* pHeight
	) = 0;
};

static_assert(sizeof(ID3D10Device) == 4);

// ID3D10Multithread

struct __declspec(novtable) ID3D10Multithread : IUnknown
{
	virtual void __stdcall Enter() = 0;
	virtual void __stdcall Leave() = 0;
	virtual BOOL __stdcall SetMultithreadProtected(BOOL bMTProtect) = 0;
	virtual BOOL __stdcall GetMultithreadProtected() = 0;
};

static_assert(sizeof(ID3D10Multithread) == 4);

// ID3D10Blob

struct __declspec(novtable) ID3D10Blob : IUnknown
{
	virtual LPVOID __stdcall GetBufferPointer() = 0;
	virtual SIZE_T __stdcall GetBufferSize() = 0;
};

static_assert(sizeof(ID3D10Blob) == 4);

// ID3DInclude

struct __declspec(novtable) ID3DInclude
{
	virtual HRESULT __stdcall Open
	(
		D3D_INCLUDE_TYPE IncludeType,
		LPCSTR pFileName,
		LPCVOID pParentData,
		LPCVOID* ppData,
		UINT* pBytes
	) = 0;
	virtual HRESULT __stdcall Close(LPCVOID pData) = 0;
};

static_assert(sizeof(ID3DInclude) == 4);

// ID3DBlob

typedef ID3D10Blob ID3DBlob;

static_assert(TypeMatch<ID3DBlob, ID3D10Blob>::value);

static_assert(sizeof(ID3DBlob) == 4);

extern "C" HRESULT __stdcall D3DCompile
(
	LPCVOID pSrcData,
	SIZE_T SrcDataSize,
	LPCSTR pSourceName,
	const D3D_SHADER_MACRO* pDefines,
	ID3DInclude* pInclude,
	LPCSTR pEntrypoint,
	LPCSTR pTarget,
	UINT Flags1,
	UINT Flags2,
	ID3DBlob** ppCode,
	ID3DBlob** ppErrorMsgs
);
extern "C" HRESULT __stdcall D3D10CreateDeviceAndSwapChain
(
	IDXGIAdapter* pAdapter,
	D3D10_DRIVER_TYPE DriverType,
	HMODULE Software,
	UINT Flags,
	UINT SDKVersion,
	DXGI_SWAP_CHAIN_DESC* pSwapChainDesc,
	IDXGISwapChain** ppSwapChain,
	ID3D10Device** ppDevice
);
#pragma endregion

#endif

namespaceEnd();
